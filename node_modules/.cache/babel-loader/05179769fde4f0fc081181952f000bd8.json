{"ast":null,"code":"import { useGetManyAggregate } from '../dataProvider';\n/**\n * @typedef UseReferenceResult\n * @type {Object}\n * @property {boolean} isFetching: boolean indicating if the reference is loading\n * @property {boolean} isLoading: boolean indicating if the reference has loaded at least once\n * @property {Object} referenceRecord: the referenced record.\n */\n\n/**\n * Fetch reference record, and return it when available\n *\n * The reference prop should be the name of one of the <Resource> components\n * added as <Admin> child.\n *\n * @example\n *\n * const { isLoading, referenceRecord } = useReference({\n *     id: 7,\n *     reference: 'users',\n * });\n *\n * @param {Object} option\n * @param {string} option.reference The linked resource name\n * @param {string} option.id The id of the reference\n *\n * @returns {UseReferenceResult} The reference record\n */\n\nexport var useReference = function (_a) {\n  var reference = _a.reference,\n      id = _a.id,\n      options = _a.options;\n\n  var _b = useGetManyAggregate(reference, {\n    ids: [id]\n  }, options),\n      data = _b.data,\n      error = _b.error,\n      isLoading = _b.isLoading,\n      isFetching = _b.isFetching,\n      refetch = _b.refetch;\n\n  return {\n    referenceRecord: error ? undefined : data ? data[0] : undefined,\n    refetch: refetch,\n    error: error,\n    isLoading: isLoading,\n    isFetching: isFetching\n  };\n};","map":{"version":3,"names":["useGetManyAggregate","useReference","_a","reference","id","options","_b","ids","data","error","isLoading","isFetching","refetch","referenceRecord","undefined"],"sources":["/Users/evgenijgnedcik/Documents/GitHub/adminPixomnia/node_modules/ra-core/dist/esm/controller/useReference.js"],"sourcesContent":["import { useGetManyAggregate } from '../dataProvider';\n/**\n * @typedef UseReferenceResult\n * @type {Object}\n * @property {boolean} isFetching: boolean indicating if the reference is loading\n * @property {boolean} isLoading: boolean indicating if the reference has loaded at least once\n * @property {Object} referenceRecord: the referenced record.\n */\n/**\n * Fetch reference record, and return it when available\n *\n * The reference prop should be the name of one of the <Resource> components\n * added as <Admin> child.\n *\n * @example\n *\n * const { isLoading, referenceRecord } = useReference({\n *     id: 7,\n *     reference: 'users',\n * });\n *\n * @param {Object} option\n * @param {string} option.reference The linked resource name\n * @param {string} option.id The id of the reference\n *\n * @returns {UseReferenceResult} The reference record\n */\nexport var useReference = function (_a) {\n    var reference = _a.reference, id = _a.id, options = _a.options;\n    var _b = useGetManyAggregate(reference, { ids: [id] }, options), data = _b.data, error = _b.error, isLoading = _b.isLoading, isFetching = _b.isFetching, refetch = _b.refetch;\n    return {\n        referenceRecord: error ? undefined : data ? data[0] : undefined,\n        refetch: refetch,\n        error: error,\n        isLoading: isLoading,\n        isFetching: isFetching,\n    };\n};\n"],"mappings":"AAAA,SAASA,mBAAT,QAAoC,iBAApC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,YAAY,GAAG,UAAUC,EAAV,EAAc;EACpC,IAAIC,SAAS,GAAGD,EAAE,CAACC,SAAnB;EAAA,IAA8BC,EAAE,GAAGF,EAAE,CAACE,EAAtC;EAAA,IAA0CC,OAAO,GAAGH,EAAE,CAACG,OAAvD;;EACA,IAAIC,EAAE,GAAGN,mBAAmB,CAACG,SAAD,EAAY;IAAEI,GAAG,EAAE,CAACH,EAAD;EAAP,CAAZ,EAA2BC,OAA3B,CAA5B;EAAA,IAAiEG,IAAI,GAAGF,EAAE,CAACE,IAA3E;EAAA,IAAiFC,KAAK,GAAGH,EAAE,CAACG,KAA5F;EAAA,IAAmGC,SAAS,GAAGJ,EAAE,CAACI,SAAlH;EAAA,IAA6HC,UAAU,GAAGL,EAAE,CAACK,UAA7I;EAAA,IAAyJC,OAAO,GAAGN,EAAE,CAACM,OAAtK;;EACA,OAAO;IACHC,eAAe,EAAEJ,KAAK,GAAGK,SAAH,GAAeN,IAAI,GAAGA,IAAI,CAAC,CAAD,CAAP,GAAaM,SADnD;IAEHF,OAAO,EAAEA,OAFN;IAGHH,KAAK,EAAEA,KAHJ;IAIHC,SAAS,EAAEA,SAJR;IAKHC,UAAU,EAAEA;EALT,CAAP;AAOH,CAVM"},"metadata":{},"sourceType":"module"}