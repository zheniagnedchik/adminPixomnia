{"ast":null,"code":"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useReferenceArrayInputController, ResourceContextProvider, ChoicesContextProvider } from 'ra-core';\nimport { ReferenceError } from './ReferenceError';\n/**\n * An Input component for fields containing a list of references to another resource.\n * Useful for 'hasMany' relationship.\n *\n * @example\n * The post object has many tags, so the post resource looks like:\n * {\n *    id: 1234,\n *    tag_ids: [ \"1\", \"23\", \"4\" ]\n * }\n *\n * ReferenceArrayInput component fetches the current resources (using\n * `dataProvider.getMany()`) as well as possible resources (using\n * `dataProvider.getList()`) in the reference endpoint. It then\n * delegates rendering to its child component, to which it makes the possible\n * choices available through the ChoicesContext.\n *\n * Use it with a selector component as child, like `<SelectArrayInput>`\n * or <CheckboxGroupInput>.\n *\n * @example\n * export const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <ReferenceArrayInput source=\"tag_ids\" reference=\"tags\">\n *                 <SelectArrayInput optionText=\"name\" />\n *             </ReferenceArrayInput>\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * By default, restricts the possible values to 25. You can extend this limit\n * by setting the `perPage` prop.\n *\n * @example\n * <ReferenceArrayInput\n *      source=\"tag_ids\"\n *      reference=\"tags\"\n *      perPage={100}>\n *     <SelectArrayInput optionText=\"name\" />\n * </ReferenceArrayInput>\n *\n * By default, orders the possible values by id desc. You can change this order\n * by setting the `sort` prop (an object with `field` and `order` properties).\n *\n * @example\n * <ReferenceArrayInput\n *      source=\"tag_ids\"\n *      reference=\"tags\"\n *      sort={{ field: 'name', order: 'ASC' }}>\n *     <SelectArrayInput optionText=\"name\" />\n * </ReferenceArrayInput>\n *\n * Also, you can filter the query used to populate the possible values. Use the\n * `filter` prop for that.\n *\n * @example\n * <ReferenceArrayInput\n *      source=\"tag_ids\"\n *      reference=\"tags\"\n *      filter={{ is_public: true }}>\n *     <SelectArrayInput optionText=\"name\" />\n * </ReferenceArrayInput>\n *\n * The enclosed component may filter results. ReferenceArrayInput create a ChoicesContext which provides\n * a `setFilters` function. You can call this function to filter the results.\n */\n\nexport var ReferenceArrayInput = function (props) {\n  var children = props.children,\n      label = props.label,\n      reference = props.reference;\n\n  if (React.Children.count(children) !== 1) {\n    throw new Error('<ReferenceArrayInput> only accepts a single child (like <Datagrid>)');\n  }\n\n  var controllerProps = useReferenceArrayInputController(props); // This is not a form error but an unrecoverable error from the\n  // useReferenceInputController hook\n\n  if (controllerProps.error) {\n    return React.createElement(ReferenceError, {\n      label: label,\n      error: controllerProps.error\n    });\n  }\n\n  return React.createElement(ResourceContextProvider, {\n    value: reference\n  }, React.createElement(ChoicesContextProvider, {\n    value: controllerProps\n  }, children));\n};\nReferenceArrayInput.propTypes = {\n  children: PropTypes.element.isRequired,\n  filter: PropTypes.object,\n  label: PropTypes.string,\n  page: PropTypes.number,\n  perPage: PropTypes.number,\n  reference: PropTypes.string.isRequired,\n  resource: PropTypes.string,\n  sort: PropTypes.shape({\n    field: PropTypes.string,\n    order: PropTypes.oneOf(['ASC', 'DESC'])\n  }),\n  source: PropTypes.string\n};\nReferenceArrayInput.defaultProps = {\n  filter: {},\n  page: 1,\n  perPage: 25,\n  sort: {\n    field: 'id',\n    order: 'DESC'\n  }\n};","map":{"version":3,"names":["React","PropTypes","useReferenceArrayInputController","ResourceContextProvider","ChoicesContextProvider","ReferenceError","ReferenceArrayInput","props","children","label","reference","Children","count","Error","controllerProps","error","createElement","value","propTypes","element","isRequired","filter","object","string","page","number","perPage","resource","sort","shape","field","order","oneOf","source","defaultProps"],"sources":["/Users/evgenijgnedcik/Documents/GitHub/adminPixomnia/node_modules/ra-ui-materialui/dist/esm/input/ReferenceArrayInput.js"],"sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useReferenceArrayInputController, ResourceContextProvider, ChoicesContextProvider, } from 'ra-core';\nimport { ReferenceError } from './ReferenceError';\n/**\n * An Input component for fields containing a list of references to another resource.\n * Useful for 'hasMany' relationship.\n *\n * @example\n * The post object has many tags, so the post resource looks like:\n * {\n *    id: 1234,\n *    tag_ids: [ \"1\", \"23\", \"4\" ]\n * }\n *\n * ReferenceArrayInput component fetches the current resources (using\n * `dataProvider.getMany()`) as well as possible resources (using\n * `dataProvider.getList()`) in the reference endpoint. It then\n * delegates rendering to its child component, to which it makes the possible\n * choices available through the ChoicesContext.\n *\n * Use it with a selector component as child, like `<SelectArrayInput>`\n * or <CheckboxGroupInput>.\n *\n * @example\n * export const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <ReferenceArrayInput source=\"tag_ids\" reference=\"tags\">\n *                 <SelectArrayInput optionText=\"name\" />\n *             </ReferenceArrayInput>\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * By default, restricts the possible values to 25. You can extend this limit\n * by setting the `perPage` prop.\n *\n * @example\n * <ReferenceArrayInput\n *      source=\"tag_ids\"\n *      reference=\"tags\"\n *      perPage={100}>\n *     <SelectArrayInput optionText=\"name\" />\n * </ReferenceArrayInput>\n *\n * By default, orders the possible values by id desc. You can change this order\n * by setting the `sort` prop (an object with `field` and `order` properties).\n *\n * @example\n * <ReferenceArrayInput\n *      source=\"tag_ids\"\n *      reference=\"tags\"\n *      sort={{ field: 'name', order: 'ASC' }}>\n *     <SelectArrayInput optionText=\"name\" />\n * </ReferenceArrayInput>\n *\n * Also, you can filter the query used to populate the possible values. Use the\n * `filter` prop for that.\n *\n * @example\n * <ReferenceArrayInput\n *      source=\"tag_ids\"\n *      reference=\"tags\"\n *      filter={{ is_public: true }}>\n *     <SelectArrayInput optionText=\"name\" />\n * </ReferenceArrayInput>\n *\n * The enclosed component may filter results. ReferenceArrayInput create a ChoicesContext which provides\n * a `setFilters` function. You can call this function to filter the results.\n */\nexport var ReferenceArrayInput = function (props) {\n    var children = props.children, label = props.label, reference = props.reference;\n    if (React.Children.count(children) !== 1) {\n        throw new Error('<ReferenceArrayInput> only accepts a single child (like <Datagrid>)');\n    }\n    var controllerProps = useReferenceArrayInputController(props);\n    // This is not a form error but an unrecoverable error from the\n    // useReferenceInputController hook\n    if (controllerProps.error) {\n        return React.createElement(ReferenceError, { label: label, error: controllerProps.error });\n    }\n    return (React.createElement(ResourceContextProvider, { value: reference },\n        React.createElement(ChoicesContextProvider, { value: controllerProps }, children)));\n};\nReferenceArrayInput.propTypes = {\n    children: PropTypes.element.isRequired,\n    filter: PropTypes.object,\n    label: PropTypes.string,\n    page: PropTypes.number,\n    perPage: PropTypes.number,\n    reference: PropTypes.string.isRequired,\n    resource: PropTypes.string,\n    sort: PropTypes.shape({\n        field: PropTypes.string,\n        order: PropTypes.oneOf(['ASC', 'DESC']),\n    }),\n    source: PropTypes.string,\n};\nReferenceArrayInput.defaultProps = {\n    filter: {},\n    page: 1,\n    perPage: 25,\n    sort: { field: 'id', order: 'DESC' },\n};\n"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,gCAAT,EAA2CC,uBAA3C,EAAoEC,sBAApE,QAAmG,SAAnG;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,mBAAmB,GAAG,UAAUC,KAAV,EAAiB;EAC9C,IAAIC,QAAQ,GAAGD,KAAK,CAACC,QAArB;EAAA,IAA+BC,KAAK,GAAGF,KAAK,CAACE,KAA7C;EAAA,IAAoDC,SAAS,GAAGH,KAAK,CAACG,SAAtE;;EACA,IAAIV,KAAK,CAACW,QAAN,CAAeC,KAAf,CAAqBJ,QAArB,MAAmC,CAAvC,EAA0C;IACtC,MAAM,IAAIK,KAAJ,CAAU,qEAAV,CAAN;EACH;;EACD,IAAIC,eAAe,GAAGZ,gCAAgC,CAACK,KAAD,CAAtD,CAL8C,CAM9C;EACA;;EACA,IAAIO,eAAe,CAACC,KAApB,EAA2B;IACvB,OAAOf,KAAK,CAACgB,aAAN,CAAoBX,cAApB,EAAoC;MAAEI,KAAK,EAAEA,KAAT;MAAgBM,KAAK,EAAED,eAAe,CAACC;IAAvC,CAApC,CAAP;EACH;;EACD,OAAQf,KAAK,CAACgB,aAAN,CAAoBb,uBAApB,EAA6C;IAAEc,KAAK,EAAEP;EAAT,CAA7C,EACJV,KAAK,CAACgB,aAAN,CAAoBZ,sBAApB,EAA4C;IAAEa,KAAK,EAAEH;EAAT,CAA5C,EAAwEN,QAAxE,CADI,CAAR;AAEH,CAbM;AAcPF,mBAAmB,CAACY,SAApB,GAAgC;EAC5BV,QAAQ,EAAEP,SAAS,CAACkB,OAAV,CAAkBC,UADA;EAE5BC,MAAM,EAAEpB,SAAS,CAACqB,MAFU;EAG5Bb,KAAK,EAAER,SAAS,CAACsB,MAHW;EAI5BC,IAAI,EAAEvB,SAAS,CAACwB,MAJY;EAK5BC,OAAO,EAAEzB,SAAS,CAACwB,MALS;EAM5Bf,SAAS,EAAET,SAAS,CAACsB,MAAV,CAAiBH,UANA;EAO5BO,QAAQ,EAAE1B,SAAS,CAACsB,MAPQ;EAQ5BK,IAAI,EAAE3B,SAAS,CAAC4B,KAAV,CAAgB;IAClBC,KAAK,EAAE7B,SAAS,CAACsB,MADC;IAElBQ,KAAK,EAAE9B,SAAS,CAAC+B,KAAV,CAAgB,CAAC,KAAD,EAAQ,MAAR,CAAhB;EAFW,CAAhB,CARsB;EAY5BC,MAAM,EAAEhC,SAAS,CAACsB;AAZU,CAAhC;AAcAjB,mBAAmB,CAAC4B,YAApB,GAAmC;EAC/Bb,MAAM,EAAE,EADuB;EAE/BG,IAAI,EAAE,CAFyB;EAG/BE,OAAO,EAAE,EAHsB;EAI/BE,IAAI,EAAE;IAAEE,KAAK,EAAE,IAAT;IAAeC,KAAK,EAAE;EAAtB;AAJyB,CAAnC"},"metadata":{},"sourceType":"module"}