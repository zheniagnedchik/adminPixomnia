{"ast":null,"code":"import { useEffect } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport get from 'lodash/get';\nimport { useRecordContext } from '../controller';\n/*\n * This hook updates the input default value whenever the record changes\n * It applies either the record value if it has one or the defaultValue if it was specified\n */\n\nexport var useApplyInputDefaultValues = function (props) {\n  var defaultValue = props.defaultValue,\n      source = props.source;\n  var record = useRecordContext(props);\n\n  var _a = useFormContext(),\n      getValues = _a.getValues,\n      resetField = _a.resetField;\n\n  var recordValue = get(record, source);\n  var formValue = get(getValues(), source);\n  useEffect(function () {\n    if (defaultValue == null) return;\n\n    if (formValue == null && recordValue == null) {\n      // special case for ArrayInput: since we use get(record, source),\n      // if source is like foo.23.bar, this effect will run.\n      // but we only want to set the default value for the subfield bar\n      // if the record actually has a value for foo.23\n      var pathContainsIndex = source.split('.').some(function (pathPart) {\n        return numericRegex.test(pathPart);\n      });\n\n      if (pathContainsIndex) {\n        var parentPath = source.split('.').slice(0, -1).join('.');\n        var parentValue = get(getValues(), parentPath);\n\n        if (parentValue == null) {\n          // the parent is undefined, so we don't want to set the default value\n          return;\n        }\n      }\n\n      resetField(source, {\n        defaultValue: defaultValue\n      });\n    }\n  });\n};\nvar numericRegex = /^\\d+$/;","map":{"version":3,"names":["useEffect","useFormContext","get","useRecordContext","useApplyInputDefaultValues","props","defaultValue","source","record","_a","getValues","resetField","recordValue","formValue","pathContainsIndex","split","some","pathPart","numericRegex","test","parentPath","slice","join","parentValue"],"sources":["/Users/evgenijgnedcik/Documents/GitHub/adminPixomnia/node_modules/ra-core/dist/esm/form/useApplyInputDefaultValues.js"],"sourcesContent":["import { useEffect } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport get from 'lodash/get';\nimport { useRecordContext } from '../controller';\n/*\n * This hook updates the input default value whenever the record changes\n * It applies either the record value if it has one or the defaultValue if it was specified\n */\nexport var useApplyInputDefaultValues = function (props) {\n    var defaultValue = props.defaultValue, source = props.source;\n    var record = useRecordContext(props);\n    var _a = useFormContext(), getValues = _a.getValues, resetField = _a.resetField;\n    var recordValue = get(record, source);\n    var formValue = get(getValues(), source);\n    useEffect(function () {\n        if (defaultValue == null)\n            return;\n        if (formValue == null && recordValue == null) {\n            // special case for ArrayInput: since we use get(record, source),\n            // if source is like foo.23.bar, this effect will run.\n            // but we only want to set the default value for the subfield bar\n            // if the record actually has a value for foo.23\n            var pathContainsIndex = source\n                .split('.')\n                .some(function (pathPart) { return numericRegex.test(pathPart); });\n            if (pathContainsIndex) {\n                var parentPath = source.split('.').slice(0, -1).join('.');\n                var parentValue = get(getValues(), parentPath);\n                if (parentValue == null) {\n                    // the parent is undefined, so we don't want to set the default value\n                    return;\n                }\n            }\n            resetField(source, { defaultValue: defaultValue });\n        }\n    });\n};\nvar numericRegex = /^\\d+$/;\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,cAAT,QAA+B,iBAA/B;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,SAASC,gBAAT,QAAiC,eAAjC;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,0BAA0B,GAAG,UAAUC,KAAV,EAAiB;EACrD,IAAIC,YAAY,GAAGD,KAAK,CAACC,YAAzB;EAAA,IAAuCC,MAAM,GAAGF,KAAK,CAACE,MAAtD;EACA,IAAIC,MAAM,GAAGL,gBAAgB,CAACE,KAAD,CAA7B;;EACA,IAAII,EAAE,GAAGR,cAAc,EAAvB;EAAA,IAA2BS,SAAS,GAAGD,EAAE,CAACC,SAA1C;EAAA,IAAqDC,UAAU,GAAGF,EAAE,CAACE,UAArE;;EACA,IAAIC,WAAW,GAAGV,GAAG,CAACM,MAAD,EAASD,MAAT,CAArB;EACA,IAAIM,SAAS,GAAGX,GAAG,CAACQ,SAAS,EAAV,EAAcH,MAAd,CAAnB;EACAP,SAAS,CAAC,YAAY;IAClB,IAAIM,YAAY,IAAI,IAApB,EACI;;IACJ,IAAIO,SAAS,IAAI,IAAb,IAAqBD,WAAW,IAAI,IAAxC,EAA8C;MAC1C;MACA;MACA;MACA;MACA,IAAIE,iBAAiB,GAAGP,MAAM,CACzBQ,KADmB,CACb,GADa,EAEnBC,IAFmB,CAEd,UAAUC,QAAV,EAAoB;QAAE,OAAOC,YAAY,CAACC,IAAb,CAAkBF,QAAlB,CAAP;MAAqC,CAF7C,CAAxB;;MAGA,IAAIH,iBAAJ,EAAuB;QACnB,IAAIM,UAAU,GAAGb,MAAM,CAACQ,KAAP,CAAa,GAAb,EAAkBM,KAAlB,CAAwB,CAAxB,EAA2B,CAAC,CAA5B,EAA+BC,IAA/B,CAAoC,GAApC,CAAjB;QACA,IAAIC,WAAW,GAAGrB,GAAG,CAACQ,SAAS,EAAV,EAAcU,UAAd,CAArB;;QACA,IAAIG,WAAW,IAAI,IAAnB,EAAyB;UACrB;UACA;QACH;MACJ;;MACDZ,UAAU,CAACJ,MAAD,EAAS;QAAED,YAAY,EAAEA;MAAhB,CAAT,CAAV;IACH;EACJ,CArBQ,CAAT;AAsBH,CA5BM;AA6BP,IAAIY,YAAY,GAAG,OAAnB"},"metadata":{},"sourceType":"module"}