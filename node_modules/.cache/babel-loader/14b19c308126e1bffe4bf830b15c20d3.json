{"ast":null,"code":"import { createContext, useMemo } from 'react';\nimport pick from 'lodash/pick';\n/**\n * Context to store the pagination part of the useListController() result.\n *\n * Use the useListPaginationContext() hook to read the pagination information.\n * That's what List components do in react-admin (e.g. <Pagination>).\n *\n * @typedef {Object} ListPaginationContextValue\n * @prop {boolean}  isLoading boolean that is false until the data is available\n * @prop {integer}  total the total number of results for the current filters, excluding pagination. Useful to build the pagination controls. e.g. 23\n * @prop {integer}  page the current page. Starts at 1\n * @prop {Function} setPage a callback to change the page, e.g. setPage(3)\n * @prop {integer}  perPage the number of results per page. Defaults to 25\n * @prop {Function} setPerPage a callback to change the number of results per page, e.g. setPerPage(25)\n * @prop {Boolean}  hasPreviousPage true if the current page is not the first one\n * @prop {Boolean}  hasNextPage true if the current page is not the last one\n\n * @prop {string}   resource the resource name, deduced from the location. e.g. 'posts'\n *\n * @typedef Props\n * @prop {ListPaginationContextValue} value\n *\n * @param {Props}\n *\n * @see useListController\n * @see useListContext\n *\n * @example\n *\n * import { useListController, ListPaginationContext } from 'ra-core';\n *\n * const List = props => {\n *     const controllerProps = useListController(props);\n *     return (\n *         <ListPaginationContext.Provider value={controllerProps}>\n *             ...\n *         </ListPaginationContext.Provider>\n *     );\n * };\n */\n\nexport var ListPaginationContext = createContext({\n  isLoading: null,\n  page: null,\n  perPage: null,\n  setPage: null,\n  setPerPage: null,\n  hasPreviousPage: null,\n  hasNextPage: null,\n  total: undefined,\n  resource: null\n});\nListPaginationContext.displayName = 'ListPaginationContext';\nexport var usePickPaginationContext = function (context) {\n  return useMemo(function () {\n    return pick(context, ['isLoading', 'hasPreviousPage', 'hasNextPage', 'page', 'perPage', 'setPage', 'setPerPage', 'total', 'resource']);\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [context.isLoading, context.hasPreviousPage, context.hasNextPage, context.page, context.perPage, context.setPage, context.setPerPage, context.total]);\n};","map":{"version":3,"names":["createContext","useMemo","pick","ListPaginationContext","isLoading","page","perPage","setPage","setPerPage","hasPreviousPage","hasNextPage","total","undefined","resource","displayName","usePickPaginationContext","context"],"sources":["/Users/evgenijgnedcik/Documents/GitHub/adminPixomnia/node_modules/ra-core/dist/esm/controller/list/ListPaginationContext.js"],"sourcesContent":["import { createContext, useMemo } from 'react';\nimport pick from 'lodash/pick';\n/**\n * Context to store the pagination part of the useListController() result.\n *\n * Use the useListPaginationContext() hook to read the pagination information.\n * That's what List components do in react-admin (e.g. <Pagination>).\n *\n * @typedef {Object} ListPaginationContextValue\n * @prop {boolean}  isLoading boolean that is false until the data is available\n * @prop {integer}  total the total number of results for the current filters, excluding pagination. Useful to build the pagination controls. e.g. 23\n * @prop {integer}  page the current page. Starts at 1\n * @prop {Function} setPage a callback to change the page, e.g. setPage(3)\n * @prop {integer}  perPage the number of results per page. Defaults to 25\n * @prop {Function} setPerPage a callback to change the number of results per page, e.g. setPerPage(25)\n * @prop {Boolean}  hasPreviousPage true if the current page is not the first one\n * @prop {Boolean}  hasNextPage true if the current page is not the last one\n\n * @prop {string}   resource the resource name, deduced from the location. e.g. 'posts'\n *\n * @typedef Props\n * @prop {ListPaginationContextValue} value\n *\n * @param {Props}\n *\n * @see useListController\n * @see useListContext\n *\n * @example\n *\n * import { useListController, ListPaginationContext } from 'ra-core';\n *\n * const List = props => {\n *     const controllerProps = useListController(props);\n *     return (\n *         <ListPaginationContext.Provider value={controllerProps}>\n *             ...\n *         </ListPaginationContext.Provider>\n *     );\n * };\n */\nexport var ListPaginationContext = createContext({\n    isLoading: null,\n    page: null,\n    perPage: null,\n    setPage: null,\n    setPerPage: null,\n    hasPreviousPage: null,\n    hasNextPage: null,\n    total: undefined,\n    resource: null,\n});\nListPaginationContext.displayName = 'ListPaginationContext';\nexport var usePickPaginationContext = function (context) {\n    return useMemo(function () {\n        return pick(context, [\n            'isLoading',\n            'hasPreviousPage',\n            'hasNextPage',\n            'page',\n            'perPage',\n            'setPage',\n            'setPerPage',\n            'total',\n            'resource',\n        ]);\n    }, \n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n        context.isLoading,\n        context.hasPreviousPage,\n        context.hasNextPage,\n        context.page,\n        context.perPage,\n        context.setPage,\n        context.setPerPage,\n        context.total,\n    ]);\n};\n"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,OAAxB,QAAuC,OAAvC;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,qBAAqB,GAAGH,aAAa,CAAC;EAC7CI,SAAS,EAAE,IADkC;EAE7CC,IAAI,EAAE,IAFuC;EAG7CC,OAAO,EAAE,IAHoC;EAI7CC,OAAO,EAAE,IAJoC;EAK7CC,UAAU,EAAE,IALiC;EAM7CC,eAAe,EAAE,IAN4B;EAO7CC,WAAW,EAAE,IAPgC;EAQ7CC,KAAK,EAAEC,SARsC;EAS7CC,QAAQ,EAAE;AATmC,CAAD,CAAzC;AAWPV,qBAAqB,CAACW,WAAtB,GAAoC,uBAApC;AACA,OAAO,IAAIC,wBAAwB,GAAG,UAAUC,OAAV,EAAmB;EACrD,OAAOf,OAAO,CAAC,YAAY;IACvB,OAAOC,IAAI,CAACc,OAAD,EAAU,CACjB,WADiB,EAEjB,iBAFiB,EAGjB,aAHiB,EAIjB,MAJiB,EAKjB,SALiB,EAMjB,SANiB,EAOjB,YAPiB,EAQjB,OARiB,EASjB,UATiB,CAAV,CAAX;EAWH,CAZa,EAad;EACA,CACIA,OAAO,CAACZ,SADZ,EAEIY,OAAO,CAACP,eAFZ,EAGIO,OAAO,CAACN,WAHZ,EAIIM,OAAO,CAACX,IAJZ,EAKIW,OAAO,CAACV,OALZ,EAMIU,OAAO,CAACT,OANZ,EAOIS,OAAO,CAACR,UAPZ,EAQIQ,OAAO,CAACL,KARZ,CAdc,CAAd;AAwBH,CAzBM"},"metadata":{},"sourceType":"module"}