{"ast":null,"code":"import { useEffect } from 'react';\nimport useGetPermissions from './useGetPermissions';\nimport { useSafeSetState } from '../util/hooks';\nvar emptyParams = {};\n/**\n * Hook for getting user permissions\n *\n * Calls the authProvider.getPermissions() method asynchronously.\n * If the authProvider returns a rejected promise, returns empty permissions.\n *\n * The return value updates according to the request state:\n *\n * - start: { isLoading: true }\n * - success: { permissions: [any], isLoading: false }\n * - error: { error: [error from provider], isLoading: false }\n *\n * Useful to enable features based on user permissions\n *\n * @param {Object} params Any params you want to pass to the authProvider\n *\n * @returns The current auth check state. Destructure as { permissions, error, isLoading }.\n *\n * @example\n *     import { usePermissions } from 'react-admin';\n *\n *     const PostDetail = props => {\n *         const { isLoading, permissions } = usePermissions();\n *         if (!isLoading && permissions == 'editor') {\n *             return <PostEdit {...props} />\n *         } else {\n *             return <PostShow {...props} />\n *         }\n *     };\n */\n\nvar usePermissions = function (params) {\n  if (params === void 0) {\n    params = emptyParams;\n  }\n\n  var _a = useSafeSetState({\n    isLoading: true\n  }),\n      state = _a[0],\n      setState = _a[1];\n\n  var getPermissions = useGetPermissions();\n  useEffect(function () {\n    getPermissions(params).then(function (permissions) {\n      setState({\n        isLoading: false,\n        permissions: permissions\n      });\n    }).catch(function (error) {\n      setState({\n        isLoading: false,\n        error: error\n      });\n    });\n  }, [getPermissions, params, setState]);\n  return state;\n};\n\nexport default usePermissions;","map":{"version":3,"names":["useEffect","useGetPermissions","useSafeSetState","emptyParams","usePermissions","params","_a","isLoading","state","setState","getPermissions","then","permissions","catch","error"],"sources":["/Users/evgenijgnedcik/Documents/GitHub/adminPixomnia/node_modules/ra-core/dist/esm/auth/usePermissions.js"],"sourcesContent":["import { useEffect } from 'react';\nimport useGetPermissions from './useGetPermissions';\nimport { useSafeSetState } from '../util/hooks';\nvar emptyParams = {};\n/**\n * Hook for getting user permissions\n *\n * Calls the authProvider.getPermissions() method asynchronously.\n * If the authProvider returns a rejected promise, returns empty permissions.\n *\n * The return value updates according to the request state:\n *\n * - start: { isLoading: true }\n * - success: { permissions: [any], isLoading: false }\n * - error: { error: [error from provider], isLoading: false }\n *\n * Useful to enable features based on user permissions\n *\n * @param {Object} params Any params you want to pass to the authProvider\n *\n * @returns The current auth check state. Destructure as { permissions, error, isLoading }.\n *\n * @example\n *     import { usePermissions } from 'react-admin';\n *\n *     const PostDetail = props => {\n *         const { isLoading, permissions } = usePermissions();\n *         if (!isLoading && permissions == 'editor') {\n *             return <PostEdit {...props} />\n *         } else {\n *             return <PostShow {...props} />\n *         }\n *     };\n */\nvar usePermissions = function (params) {\n    if (params === void 0) { params = emptyParams; }\n    var _a = useSafeSetState({\n        isLoading: true,\n    }), state = _a[0], setState = _a[1];\n    var getPermissions = useGetPermissions();\n    useEffect(function () {\n        getPermissions(params)\n            .then(function (permissions) {\n            setState({ isLoading: false, permissions: permissions });\n        })\n            .catch(function (error) {\n            setState({\n                isLoading: false,\n                error: error,\n            });\n        });\n    }, [getPermissions, params, setState]);\n    return state;\n};\nexport default usePermissions;\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,SAASC,eAAT,QAAgC,eAAhC;AACA,IAAIC,WAAW,GAAG,EAAlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,cAAc,GAAG,UAAUC,MAAV,EAAkB;EACnC,IAAIA,MAAM,KAAK,KAAK,CAApB,EAAuB;IAAEA,MAAM,GAAGF,WAAT;EAAuB;;EAChD,IAAIG,EAAE,GAAGJ,eAAe,CAAC;IACrBK,SAAS,EAAE;EADU,CAAD,CAAxB;EAAA,IAEIC,KAAK,GAAGF,EAAE,CAAC,CAAD,CAFd;EAAA,IAEmBG,QAAQ,GAAGH,EAAE,CAAC,CAAD,CAFhC;;EAGA,IAAII,cAAc,GAAGT,iBAAiB,EAAtC;EACAD,SAAS,CAAC,YAAY;IAClBU,cAAc,CAACL,MAAD,CAAd,CACKM,IADL,CACU,UAAUC,WAAV,EAAuB;MAC7BH,QAAQ,CAAC;QAAEF,SAAS,EAAE,KAAb;QAAoBK,WAAW,EAAEA;MAAjC,CAAD,CAAR;IACH,CAHD,EAIKC,KAJL,CAIW,UAAUC,KAAV,EAAiB;MACxBL,QAAQ,CAAC;QACLF,SAAS,EAAE,KADN;QAELO,KAAK,EAAEA;MAFF,CAAD,CAAR;IAIH,CATD;EAUH,CAXQ,EAWN,CAACJ,cAAD,EAAiBL,MAAjB,EAAyBI,QAAzB,CAXM,CAAT;EAYA,OAAOD,KAAP;AACH,CAnBD;;AAoBA,eAAeJ,cAAf"},"metadata":{},"sourceType":"module"}