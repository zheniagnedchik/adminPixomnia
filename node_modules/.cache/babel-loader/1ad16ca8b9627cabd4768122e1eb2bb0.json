{"ast":null,"code":"import * as React from 'react';\nimport { useAuthenticated } from './useAuthenticated';\n/**\n * Restrict access to children to authenticated users.\n * Redirects anonymous users to the login page.\n *\n * Use it to decorate your custom page components to require\n * authentication.\n *\n * You can set additional `authParams` at will if your authProvider\n * requires it.\n *\n * @see useAuthenticated\n *\n * @example\n *     import { Authenticated } from 'react-admin';\n *\n *     const CustomRoutes = [\n *         <Route path=\"/foo\" render={() =>\n *             <Authenticated authParams={{ foo: 'bar' }}>\n *                 <Foo />\n *             </Authenticated>\n *         } />\n *     ];\n *     const App = () => (\n *         <Admin customRoutes={customRoutes}>\n *             ...\n *         </Admin>\n *     );\n */\n\nexport var Authenticated = function (props) {\n  var authParams = props.authParams,\n      children = props.children;\n  useAuthenticated({\n    params: authParams\n  }); // render the child even though the useAuthenticated() call isn't finished (optimistic rendering)\n  // the above hook will log out if the authProvider doesn't validate that the user is authenticated\n\n  return React.createElement(React.Fragment, null, children);\n};","map":{"version":3,"names":["React","useAuthenticated","Authenticated","props","authParams","children","params","createElement","Fragment"],"sources":["/Users/evgenijgnedcik/Documents/GitHub/adminPixomnia/node_modules/ra-core/dist/esm/auth/Authenticated.js"],"sourcesContent":["import * as React from 'react';\nimport { useAuthenticated } from './useAuthenticated';\n/**\n * Restrict access to children to authenticated users.\n * Redirects anonymous users to the login page.\n *\n * Use it to decorate your custom page components to require\n * authentication.\n *\n * You can set additional `authParams` at will if your authProvider\n * requires it.\n *\n * @see useAuthenticated\n *\n * @example\n *     import { Authenticated } from 'react-admin';\n *\n *     const CustomRoutes = [\n *         <Route path=\"/foo\" render={() =>\n *             <Authenticated authParams={{ foo: 'bar' }}>\n *                 <Foo />\n *             </Authenticated>\n *         } />\n *     ];\n *     const App = () => (\n *         <Admin customRoutes={customRoutes}>\n *             ...\n *         </Admin>\n *     );\n */\nexport var Authenticated = function (props) {\n    var authParams = props.authParams, children = props.children;\n    useAuthenticated({ params: authParams });\n    // render the child even though the useAuthenticated() call isn't finished (optimistic rendering)\n    // the above hook will log out if the authProvider doesn't validate that the user is authenticated\n    return React.createElement(React.Fragment, null, children);\n};\n"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,aAAa,GAAG,UAAUC,KAAV,EAAiB;EACxC,IAAIC,UAAU,GAAGD,KAAK,CAACC,UAAvB;EAAA,IAAmCC,QAAQ,GAAGF,KAAK,CAACE,QAApD;EACAJ,gBAAgB,CAAC;IAAEK,MAAM,EAAEF;EAAV,CAAD,CAAhB,CAFwC,CAGxC;EACA;;EACA,OAAOJ,KAAK,CAACO,aAAN,CAAoBP,KAAK,CAACQ,QAA1B,EAAoC,IAApC,EAA0CH,QAA1C,CAAP;AACH,CANM"},"metadata":{},"sourceType":"module"}