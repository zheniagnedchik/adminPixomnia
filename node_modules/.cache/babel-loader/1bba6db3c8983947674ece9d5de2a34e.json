{"ast":null,"code":"var _jsxFileName = \"/Users/evgenijgnedcik/Documents/GitHub/adminPixomnia/src/App.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { Admin, Resource, fetchUtils, GET_LIST, CREATE, GET_ONE, UPDATE, defaultTheme, useTheme, DELETE } from \"react-admin\";\nimport SouthAmericaIcon from \"@mui/icons-material/SouthAmerica\";\nimport LocalPrintshopIcon from \"@mui/icons-material/LocalPrintshop\";\nimport RegionList from \"./components/RegionList\";\nimport RegionCreate from \"./components/RegionCreate\";\nimport axios from \"axios\";\nimport PrinterList from \"./components/Printers/PrinterList\";\nimport PrinterCreate from \"./components/Printers/PrinterCreate\";\nimport PlacesList from \"./components/Places/PlacesList\";\nimport PlaceCreate from \"./components/Places/PlacesCreate\";\nimport StorefrontIcon from \"@mui/icons-material/Storefront\";\nimport PeopleAltIcon from \"@mui/icons-material/PeopleAlt\";\nimport EmployeesListList from \"./components/Employees/EmployeesList\";\nimport EmployeesCreate from \"./components/Employees/EmployeesCreate\";\nimport EmployeesEdit from \"./components/Employees/EmployeesEdit\";\nimport PrintersEdit from \"./components/Printers/PrintersEdit\";\nimport ShiftScheduleListList from \"./components/ShiftSchedule/ShiftScheduleList\";\nimport ShiftScheduleListCreate from \"./components/ShiftSchedule/ShiftScheduleCreate\";\nimport WorkHistoryIcon from \"@mui/icons-material/WorkHistory\";\nimport PlacesEdit from \"./components/Places/PlacesEdit\";\nimport InventoryIcon from \"@mui/icons-material/Inventory\";\nimport PrintRoundedIcon from \"@mui/icons-material/PrintRounded\";\nimport AcUnitIcon from \"@mui/icons-material/AcUnit\";\nimport { URI } from \"./URLS\";\nimport { Button } from \"@mui/material\";\nimport MyLayout from \"./components/MyLayout/Layout\";\nimport { getCurrentDate } from \"./getDate\";\nimport InventoryList from \"./components/Inventory/InventoryList\";\nimport OnePrintInventoryList from \"./components/Inventory/OnePrintInventoryList\";\nimport ClosedShiftStatistic from \"./components/ShiftStatistic/ClosedShiftStatistic\";\nimport EmployeeGrid from \"./components/ShiftStatistic/EmployeeGrid\";\nimport AddReactionIcon from \"@mui/icons-material/AddReaction\";\nimport OpenShiftStatistic from \"./components/ShiftStatistic/OpenShiftStatistic\";\nimport { sort } from \"./Utils/sort\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  const setBody = (resource, params) => {\n    switch (resource) {\n      case \"addPlace\":\n        return {\n          place: { ...params.data,\n            printerIds: [],\n            employeeIds: []\n          }\n        };\n\n      case \"addEmployee\":\n        return {\n          employee: { ...params.data\n          }\n        };\n\n      case \"addShiftSchedule\":\n        const param = {\n          placeId: params.data.placeId,\n          employeeId: params.data.employeeId,\n          startTime: getCurrentDate(params.data.startTime),\n          endTime: getCurrentDate(params.data.endTime),\n          softStartInMinutes: params.data.softStartInMinutes,\n          shiftManager: params.data.shiftManager\n        };\n        return param;\n\n      default:\n        return params.data;\n    }\n  };\n\n  const getLink = (resource, params, body) => {\n    const date = getCurrentDate(new Date());\n    const curDate = new Date();\n    const dateInventoryLogs = curDate.setDate(curDate.getDate() - 1);\n    console.log(date);\n\n    switch (resource) {\n      case \"getShiftSchedule\":\n        return `${URI}/${resource}?employeeId=admin@pixomnia.com&placeId=malroze&fromTime=${date}`;\n\n      case \"getRegions\":\n        return `${URI}/getRegions?employeeId=admin@pixomnia.com`;\n\n      case \"getInventoryLogs\":\n        return `${URI}/${resource}?employeeId=admin@pixomnia.com&regionId=TX&fromTime=${new Date(dateInventoryLogs).toISOString()}`;\n\n      case \"getPrinterInfoLogs\":\n        return `${URI}/${resource}?employeeId=admin@pixomnia.com&printerId=rePrinter01&fromTime=${new Date(dateInventoryLogs).toISOString()}`;\n\n      case \"getCloseShiftStatistics\":\n        return `${URI}/${resource}?employeeId=admin@pixomnia.com&regionId=TX&fromTime=${new Date(dateInventoryLogs).toISOString()}`;\n\n      case \"getOpenShiftStatistics\":\n        return `${URI}/${resource}?employeeId=admin@pixomnia.com&regionId=TX`;\n\n      default:\n        return `${URI}/${resource}?${body}`;\n    }\n  };\n\n  const getNewData = (resource, getListData, params) => {\n    let new_data;\n\n    switch (resource) {\n      case \"getPlacesWithInfo\":\n        new_data = getListData.data.map((i, index) => {\n          let printer = i.printerIds.map(it => {\n            return {\n              item: it\n            };\n          });\n          let employee = i.employeeIds.map(it => {\n            return {\n              item: it\n            };\n          });\n          const printFilter = printer.filter(el => el.item.length > 0);\n          const employeeFilter = employee.filter(el => el.item.length > 0);\n          return { ...i,\n            newList: printFilter,\n            id: index,\n            employee: employeeFilter\n          };\n        });\n        return new_data;\n\n      default:\n        console.log(getListData);\n        new_data = getListData.data.map((i, index) => {\n          return { ...i,\n            id: index\n          };\n        });\n        return new_data;\n    }\n  };\n\n  const test = async (type, resource, params) => {\n    const body = \"employeeId=reload&regionId=TX\";\n    console.log(\"type\", type);\n    console.log(\"resource\", resource);\n    console.log(\"params\", params);\n\n    switch (type) {\n      case GET_LIST:\n        const link = getLink(resource, params, body);\n        const getListData = await axios.get(link);\n        const newData = getNewData(resource, getListData, params);\n        let test;\n\n        if (params.pagination.perPage <= newData.length) {\n          test = newData.splice((params.pagination.page - 1) * params.pagination.perPage, params.pagination.perPage);\n        } else {\n          test = [...newData];\n        }\n\n        const sortedList = sort(params.sort.field, params.sort.order, test);\n        return {\n          data: sortedList,\n          total: getListData.data.length\n        };\n\n      case CREATE:\n        const createBody = setBody(resource, params);\n        const create = await axios.post(`${URI}/${resource}`, createBody);\n        const jsonParse = JSON.parse(create.data.responseJson);\n        const createData = {\n          id: 9,\n          ...jsonParse\n        };\n        return {\n          data: createData\n        };\n\n      case GET_ONE:\n        if (resource === \"getPlacesWithInfo\") {\n          console.log(resource);\n          const list = await axios.get(`${URI}/${resource}?${body}`);\n          let g = list.data.map((i, index) => {\n            let printer = i.printerIds.map(it => {\n              return {\n                item: it\n              };\n            });\n            let employee = i.employeeIds.map(it => {\n              return {\n                item: it\n              };\n            });\n            const printFilter = printer.filter(el => el.item.length > 0);\n            const employeeFilter = employee.filter(el => el.item.length > 0);\n            console.log(printFilter);\n            return { ...i,\n              newList: printFilter,\n              id: index,\n              employee: employeeFilter\n            };\n          });\n          const filter = g.filter(item => item.id == params.id);\n          return {\n            data: filter[0]\n          };\n        }\n\n        if (resource === \"getPrinters\") {\n          const curDate = new Date();\n          const dateInventoryLogs = curDate.setDate(curDate.getDate() - 1);\n          const printerList = await axios.get(`${URI}/${resource}?${body}`);\n          const newArray = printerList.data.map((item, index) => {\n            return { ...item,\n              id: index\n            };\n          });\n          const printer = newArray.filter(el => String(el.id) === params.id);\n          const printerLog = await axios.get(`${URI}/${resource}?employeeId=admin@pixomnia.com&printerId=${printer[0].printerId}&fromTime=${new Date(dateInventoryLogs).toISOString()}`);\n          console.log(\"ljhgfd\", printerLog);\n        }\n\n      case UPDATE:\n        const udpList = await axios.get(`${URI}/${resource}?${body}`);\n        let udp = udpList.data.map((i, index) => {\n          let printer = i.printerIds.map(it => {\n            return {\n              item: it\n            };\n          });\n          let employee = i.employeeIds.map(it => {\n            return {\n              item: it\n            };\n          });\n          const printFilters = printer.filter(el => el.item.length > 0);\n          const employeeFilters = employee.filter(el => el.item.length > 0);\n          return { ...i,\n            newList: printFilters,\n            id: index,\n            employee: employeeFilters\n          };\n        });\n        const filters = udp.filter(item => item.id == params.id);\n        const newPrinters = params.data.newList.filter(e => filters[0].newList.findIndex(i => i.item == e.item) === -1);\n        const delPrinters = filters[0].newList.filter(e => params.data.newList.findIndex(i => i.item == e.item) === -1);\n        const newEmployee = params.data.employee.filter(e => filters[0].employee.findIndex(i => i.item == e.item) === -1);\n        const delEmployee = filters[0].employee.filter(e => params.data.employee.findIndex(i => i.item == e.item) === -1);\n\n        if (newPrinters.length > 0) {\n          for (const item of newPrinters) {\n            await axios.post(`${URI}/linkPrinterAndPlace`, {\n              placeId: params.data.placeId,\n              printerId: item.item\n            }).then(data => console.log(data));\n          }\n        }\n\n        if (delPrinters.length > 0) {\n          for (const item of delPrinters) {\n            await axios.post(`${URI}/unlinkPrinterFromPlace`, {\n              placeId: params.data.placeId,\n              printerId: item.item\n            }).then(data => console.log(data));\n          }\n        }\n\n        if (newEmployee.length > 0) {\n          for (const item of newEmployee) {\n            await axios.post(`${URI}/linkEmployeeAndPlace`, {\n              placeId: params.data.placeId,\n              employeeId: item.item\n            }).then(data => console.log(data));\n          }\n        }\n\n        if (delEmployee.length > 0) {\n          for (const item of delEmployee) {\n            await axios.post(`${URI}/unlinkEmployeeFromPlace`, {\n              placeId: params.data.placeId,\n              employeeId: item.item\n            }).then(data => console.log(data));\n          }\n        }\n\n        return {\n          data: params.data\n        };\n\n      case DELETE:\n        console.log(params);\n        axios.get(`${URI}/deleteShift?shiftScheduleId=${params.previousData.shiftScheduleId}`);\n        return {\n          data: params.data\n        };\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Admin, {\n    dataProvider: test,\n    layout: MyLayout,\n    children: [/*#__PURE__*/_jsxDEV(Resource, {\n      name: \"getRegions\",\n      list: RegionList,\n      create: RegionCreate,\n      icon: SouthAmericaIcon,\n      options: {\n        label: \"Regions\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Resource, {\n      name: \"getPrinters\",\n      list: PrinterList,\n      create: PrinterCreate,\n      icon: LocalPrintshopIcon,\n      options: {\n        label: \"Printers\"\n      },\n      show: OnePrintInventoryList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Resource, {\n      name: \"getPlacesWithInfo\",\n      list: PlacesList,\n      create: PlaceCreate,\n      icon: StorefrontIcon,\n      edit: PlacesEdit,\n      options: {\n        label: \"Places\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Resource, {\n      name: \"getEmployees\",\n      list: EmployeesListList,\n      create: EmployeesCreate,\n      edit: EmployeesEdit,\n      icon: PeopleAltIcon,\n      options: {\n        label: \"Employees\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Resource, {\n      name: \"getShiftSchedule\",\n      list: ShiftScheduleListList,\n      create: ShiftScheduleListCreate,\n      icon: WorkHistoryIcon,\n      options: {\n        label: \"Shift\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Resource, {\n      name: \"getInventoryLogs\",\n      list: InventoryList,\n      icon: InventoryIcon,\n      options: {\n        label: \"Inventory\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Resource, {\n      name: \"getCloseShiftStatistics\",\n      list: ClosedShiftStatistic,\n      icon: AcUnitIcon,\n      options: {\n        label: \"Closed shift statistic\"\n      },\n      show: EmployeeGrid\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Resource, {\n      name: \"getOpenShiftStatistics\",\n      list: OpenShiftStatistic,\n      icon: AddReactionIcon,\n      options: {\n        label: \"Open shift statistic\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 286,\n    columnNumber: 5\n  }, this);\n}\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Admin","Resource","fetchUtils","GET_LIST","CREATE","GET_ONE","UPDATE","defaultTheme","useTheme","DELETE","SouthAmericaIcon","LocalPrintshopIcon","RegionList","RegionCreate","axios","PrinterList","PrinterCreate","PlacesList","PlaceCreate","StorefrontIcon","PeopleAltIcon","EmployeesListList","EmployeesCreate","EmployeesEdit","PrintersEdit","ShiftScheduleListList","ShiftScheduleListCreate","WorkHistoryIcon","PlacesEdit","InventoryIcon","PrintRoundedIcon","AcUnitIcon","URI","Button","MyLayout","getCurrentDate","InventoryList","OnePrintInventoryList","ClosedShiftStatistic","EmployeeGrid","AddReactionIcon","OpenShiftStatistic","sort","App","setBody","resource","params","place","data","printerIds","employeeIds","employee","param","placeId","employeeId","startTime","endTime","softStartInMinutes","shiftManager","getLink","body","date","Date","curDate","dateInventoryLogs","setDate","getDate","console","log","toISOString","getNewData","getListData","new_data","map","i","index","printer","it","item","printFilter","filter","el","length","employeeFilter","newList","id","test","type","link","get","newData","pagination","perPage","splice","page","sortedList","field","order","total","createBody","create","post","jsonParse","JSON","parse","responseJson","createData","list","g","printerList","newArray","String","printerLog","printerId","udpList","udp","printFilters","employeeFilters","filters","newPrinters","e","findIndex","delPrinters","newEmployee","delEmployee","then","previousData","shiftScheduleId","label"],"sources":["/Users/evgenijgnedcik/Documents/GitHub/adminPixomnia/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {\n  Admin,\n  Resource,\n  fetchUtils,\n  GET_LIST,\n  CREATE,\n  GET_ONE,\n  UPDATE,\n  defaultTheme,\n  useTheme,\n  DELETE,\n} from \"react-admin\";\nimport SouthAmericaIcon from \"@mui/icons-material/SouthAmerica\";\nimport LocalPrintshopIcon from \"@mui/icons-material/LocalPrintshop\";\nimport RegionList from \"./components/RegionList\";\nimport RegionCreate from \"./components/RegionCreate\";\nimport axios from \"axios\";\nimport PrinterList from \"./components/Printers/PrinterList\";\nimport PrinterCreate from \"./components/Printers/PrinterCreate\";\nimport PlacesList from \"./components/Places/PlacesList\";\nimport PlaceCreate from \"./components/Places/PlacesCreate\";\nimport StorefrontIcon from \"@mui/icons-material/Storefront\";\nimport PeopleAltIcon from \"@mui/icons-material/PeopleAlt\";\nimport EmployeesListList from \"./components/Employees/EmployeesList\";\nimport EmployeesCreate from \"./components/Employees/EmployeesCreate\";\nimport EmployeesEdit from \"./components/Employees/EmployeesEdit\";\nimport PrintersEdit from \"./components/Printers/PrintersEdit\";\nimport ShiftScheduleListList from \"./components/ShiftSchedule/ShiftScheduleList\";\nimport ShiftScheduleListCreate from \"./components/ShiftSchedule/ShiftScheduleCreate\";\nimport WorkHistoryIcon from \"@mui/icons-material/WorkHistory\";\nimport PlacesEdit from \"./components/Places/PlacesEdit\";\nimport InventoryIcon from \"@mui/icons-material/Inventory\";\nimport PrintRoundedIcon from \"@mui/icons-material/PrintRounded\";\nimport AcUnitIcon from \"@mui/icons-material/AcUnit\";\nimport { URI } from \"./URLS\";\n\nimport { Button } from \"@mui/material\";\nimport MyLayout from \"./components/MyLayout/Layout\";\nimport { getCurrentDate } from \"./getDate\";\nimport InventoryList from \"./components/Inventory/InventoryList\";\nimport OnePrintInventoryList from \"./components/Inventory/OnePrintInventoryList\";\nimport ClosedShiftStatistic from \"./components/ShiftStatistic/ClosedShiftStatistic\";\nimport EmployeeGrid from \"./components/ShiftStatistic/EmployeeGrid\";\nimport AddReactionIcon from \"@mui/icons-material/AddReaction\";\nimport OpenShiftStatistic from \"./components/ShiftStatistic/OpenShiftStatistic\";\nimport { sort } from \"./Utils/sort\";\n\nfunction App() {\n  const setBody = (resource, params) => {\n    switch (resource) {\n      case \"addPlace\":\n        return { place: { ...params.data, printerIds: [], employeeIds: [] } };\n      case \"addEmployee\":\n        return { employee: { ...params.data } };\n      case \"addShiftSchedule\":\n        const param = {\n          placeId: params.data.placeId,\n          employeeId: params.data.employeeId,\n          startTime: getCurrentDate(params.data.startTime),\n          endTime: getCurrentDate(params.data.endTime),\n          softStartInMinutes: params.data.softStartInMinutes,\n          shiftManager: params.data.shiftManager,\n        };\n        return param;\n      default:\n        return params.data;\n    }\n  };\n\n  const getLink = (resource, params, body) => {\n    const date = getCurrentDate(new Date());\n    const curDate = new Date();\n    const dateInventoryLogs = curDate.setDate(curDate.getDate() - 1);\n\n    console.log(date);\n    switch (resource) {\n      case \"getShiftSchedule\":\n        return `${URI}/${resource}?employeeId=admin@pixomnia.com&placeId=malroze&fromTime=${date}`;\n      case \"getRegions\":\n        return `${URI}/getRegions?employeeId=admin@pixomnia.com`;\n      case \"getInventoryLogs\":\n        return `${URI}/${resource}?employeeId=admin@pixomnia.com&regionId=TX&fromTime=${new Date(\n          dateInventoryLogs\n        ).toISOString()}`;\n      case \"getPrinterInfoLogs\":\n        return `${URI}/${resource}?employeeId=admin@pixomnia.com&printerId=rePrinter01&fromTime=${new Date(\n          dateInventoryLogs\n        ).toISOString()}`;\n      case \"getCloseShiftStatistics\":\n        return `${URI}/${resource}?employeeId=admin@pixomnia.com&regionId=TX&fromTime=${new Date(\n          dateInventoryLogs\n        ).toISOString()}`;\n      case \"getOpenShiftStatistics\":\n        return `${URI}/${resource}?employeeId=admin@pixomnia.com&regionId=TX`;\n      default:\n        return `${URI}/${resource}?${body}`;\n    }\n  };\n  const getNewData = (resource, getListData, params) => {\n    let new_data;\n    switch (resource) {\n      case \"getPlacesWithInfo\":\n        new_data = getListData.data.map((i, index) => {\n          let printer = i.printerIds.map((it) => {\n            return { item: it };\n          });\n          let employee = i.employeeIds.map((it) => {\n            return { item: it };\n          });\n          const printFilter = printer.filter((el) => el.item.length > 0);\n          const employeeFilter = employee.filter((el) => el.item.length > 0);\n\n          return {\n            ...i,\n            newList: printFilter,\n            id: index,\n            employee: employeeFilter,\n          };\n        });\n        return new_data;\n\n      default:\n        console.log(getListData);\n        new_data = getListData.data.map((i, index) => {\n          return { ...i, id: index };\n        });\n        return new_data;\n    }\n  };\n\n  const test = async (type, resource, params) => {\n    const body = \"employeeId=reload&regionId=TX\";\n    console.log(\"type\", type);\n    console.log(\"resource\", resource);\n    console.log(\"params\", params);\n    switch (type) {\n      case GET_LIST:\n        const link = getLink(resource, params, body);\n        const getListData = await axios.get(link);\n        const newData = getNewData(resource, getListData, params);\n        let test;\n        if (params.pagination.perPage <= newData.length) {\n          test = newData.splice(\n            (params.pagination.page - 1) * params.pagination.perPage,\n            params.pagination.perPage\n          );\n        } else {\n          test = [...newData];\n        }\n\n        const sortedList = sort(params.sort.field, params.sort.order, test);\n        return { data: sortedList, total: getListData.data.length };\n      case CREATE:\n        const createBody = setBody(resource, params);\n        const create = await axios.post(`${URI}/${resource}`, createBody);\n        const jsonParse = JSON.parse(create.data.responseJson);\n        const createData = { id: 9, ...jsonParse };\n        return { data: createData };\n      case GET_ONE:\n        if (resource === \"getPlacesWithInfo\") {\n          console.log(resource);\n          const list = await axios.get(`${URI}/${resource}?${body}`);\n          let g = list.data.map((i, index) => {\n            let printer = i.printerIds.map((it) => {\n              return { item: it };\n            });\n\n            let employee = i.employeeIds.map((it) => {\n              return { item: it };\n            });\n            const printFilter = printer.filter((el) => el.item.length > 0);\n            const employeeFilter = employee.filter((el) => el.item.length > 0);\n            console.log(printFilter);\n            return {\n              ...i,\n              newList: printFilter,\n              id: index,\n              employee: employeeFilter,\n            };\n          });\n          const filter = g.filter((item) => item.id == params.id);\n          return { data: filter[0] };\n        }\n        if (resource === \"getPrinters\") {\n          const curDate = new Date();\n          const dateInventoryLogs = curDate.setDate(curDate.getDate() - 1);\n          const printerList = await axios.get(`${URI}/${resource}?${body}`);\n          const newArray = printerList.data.map((item, index) => {\n            return { ...item, id: index };\n          });\n          const printer = newArray.filter((el) => String(el.id) === params.id);\n          const printerLog = await axios.get(\n            `${URI}/${resource}?employeeId=admin@pixomnia.com&printerId=${\n              printer[0].printerId\n            }&fromTime=${new Date(dateInventoryLogs).toISOString()}`\n          );\n          console.log(\"ljhgfd\", printerLog);\n        }\n\n      case UPDATE:\n        const udpList = await axios.get(`${URI}/${resource}?${body}`);\n        let udp = udpList.data.map((i, index) => {\n          let printer = i.printerIds.map((it) => {\n            return { item: it };\n          });\n\n          let employee = i.employeeIds.map((it) => {\n            return { item: it };\n          });\n          const printFilters = printer.filter((el) => el.item.length > 0);\n          const employeeFilters = employee.filter((el) => el.item.length > 0);\n\n          return {\n            ...i,\n            newList: printFilters,\n            id: index,\n            employee: employeeFilters,\n          };\n        });\n        const filters = udp.filter((item) => item.id == params.id);\n        const newPrinters = params.data.newList.filter(\n          (e) => filters[0].newList.findIndex((i) => i.item == e.item) === -1\n        );\n        const delPrinters = filters[0].newList.filter(\n          (e) => params.data.newList.findIndex((i) => i.item == e.item) === -1\n        );\n        const newEmployee = params.data.employee.filter(\n          (e) => filters[0].employee.findIndex((i) => i.item == e.item) === -1\n        );\n        const delEmployee = filters[0].employee.filter(\n          (e) => params.data.employee.findIndex((i) => i.item == e.item) === -1\n        );\n        if (newPrinters.length > 0) {\n          for (const item of newPrinters) {\n            await axios\n              .post(`${URI}/linkPrinterAndPlace`, {\n                placeId: params.data.placeId,\n                printerId: item.item,\n              })\n              .then((data) => console.log(data));\n          }\n        }\n        if (delPrinters.length > 0) {\n          for (const item of delPrinters) {\n            await axios\n              .post(`${URI}/unlinkPrinterFromPlace`, {\n                placeId: params.data.placeId,\n                printerId: item.item,\n              })\n              .then((data) => console.log(data));\n          }\n        }\n        if (newEmployee.length > 0) {\n          for (const item of newEmployee) {\n            await axios\n              .post(`${URI}/linkEmployeeAndPlace`, {\n                placeId: params.data.placeId,\n                employeeId: item.item,\n              })\n              .then((data) => console.log(data));\n          }\n        }\n        if (delEmployee.length > 0) {\n          for (const item of delEmployee) {\n            await axios\n              .post(`${URI}/unlinkEmployeeFromPlace`, {\n                placeId: params.data.placeId,\n                employeeId: item.item,\n              })\n              .then((data) => console.log(data));\n          }\n        }\n\n        return { data: params.data };\n      case DELETE:\n        console.log(params);\n        axios.get(\n          `${URI}/deleteShift?shiftScheduleId=${params.previousData.shiftScheduleId}`\n        );\n        return { data: params.data };\n    }\n  };\n\n  return (\n    <Admin dataProvider={test} layout={MyLayout}>\n      <Resource\n        name=\"getRegions\"\n        list={RegionList}\n        create={RegionCreate}\n        icon={SouthAmericaIcon}\n        options={{ label: \"Regions\" }}\n      />\n      <Resource\n        name=\"getPrinters\"\n        list={PrinterList}\n        create={PrinterCreate}\n        icon={LocalPrintshopIcon}\n        options={{ label: \"Printers\" }}\n        show={OnePrintInventoryList}\n      />\n      <Resource\n        name=\"getPlacesWithInfo\"\n        list={PlacesList}\n        create={PlaceCreate}\n        icon={StorefrontIcon}\n        edit={PlacesEdit}\n        options={{ label: \"Places\" }}\n      />\n      <Resource\n        name=\"getEmployees\"\n        list={EmployeesListList}\n        create={EmployeesCreate}\n        edit={EmployeesEdit}\n        icon={PeopleAltIcon}\n        options={{ label: \"Employees\" }}\n      />\n      <Resource\n        name=\"getShiftSchedule\"\n        list={ShiftScheduleListList}\n        create={ShiftScheduleListCreate}\n        icon={WorkHistoryIcon}\n        options={{ label: \"Shift\" }}\n      />\n      <Resource\n        name=\"getInventoryLogs\"\n        list={InventoryList}\n        icon={InventoryIcon}\n        options={{ label: \"Inventory\" }}\n      />\n      {/* <Resource\n        name=\"getPrinterInfoLogs\"\n        list={OnePrintInventoryList}\n        icon={PrintRoundedIcon}\n        options={{ label: \"Printer info logs\" }}\n        \n      /> */}\n      <Resource\n        name=\"getCloseShiftStatistics\"\n        list={ClosedShiftStatistic}\n        icon={AcUnitIcon}\n        options={{ label: \"Closed shift statistic\" }}\n        show={EmployeeGrid}\n      />\n      <Resource\n        name=\"getOpenShiftStatistics\"\n        list={OpenShiftStatistic}\n        icon={AddReactionIcon}\n        options={{ label: \"Open shift statistic\" }}\n      />\n    </Admin>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}