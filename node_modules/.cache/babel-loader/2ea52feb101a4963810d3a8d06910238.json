{"ast":null,"code":"import { useEffect } from 'react';\nimport { useCheckAuth } from './useCheckAuth';\nimport { useSafeSetState } from '../util/hooks';\nvar emptyParams = {};\n/**\n * Hook for getting the authentication status\n *\n * Calls the authProvider.checkAuth() method asynchronously.\n *\n * The return value updates according to the authProvider request state:\n *\n * - isLoading: true just after mount, while the authProvider is being called. false once the authProvider has answered.\n * - authenticated: true while loading. then true or false depending on the authProvider response.\n *\n * To avoid rendering a component and force waiting for the authProvider response, use the useAuthState() hook\n * instead of the useAuthenticated() hook.\n *\n * You can render different content depending on the authenticated status.\n *\n * @see useAuthenticated()\n *\n * @param {Object} params Any params you want to pass to the authProvider\n *\n * @returns The current auth check state. Destructure as { authenticated, error, isLoading }.\n *\n * @example\n * import { useAuthState, Loading } from 'react-admin';\n *\n * const MyPage = () => {\n *     const { isLoading, authenticated } = useAuthState();\n *     if (isLoading) {\n *         return <Loading />;\n *     }\n *     if (authenticated) {\n *        return <AuthenticatedContent />;\n *     }\n *     return <AnonymousContent />;\n * };\n */\n\nvar useAuthState = function (params) {\n  if (params === void 0) {\n    params = emptyParams;\n  }\n\n  var _a = useSafeSetState({\n    isLoading: true,\n    authenticated: true // optimistic\n\n  }),\n      state = _a[0],\n      setState = _a[1];\n\n  var checkAuth = useCheckAuth();\n  useEffect(function () {\n    checkAuth(params, false).then(function () {\n      return setState({\n        isLoading: false,\n        authenticated: true\n      });\n    }).catch(function () {\n      return setState({\n        isLoading: false,\n        authenticated: false\n      });\n    });\n  }, [checkAuth, params, setState]);\n  return state;\n};\n\nexport default useAuthState;","map":{"version":3,"names":["useEffect","useCheckAuth","useSafeSetState","emptyParams","useAuthState","params","_a","isLoading","authenticated","state","setState","checkAuth","then","catch"],"sources":["/Users/evgenijgnedcik/Documents/GitHub/adminPixomnia/node_modules/ra-core/dist/esm/auth/useAuthState.js"],"sourcesContent":["import { useEffect } from 'react';\nimport { useCheckAuth } from './useCheckAuth';\nimport { useSafeSetState } from '../util/hooks';\nvar emptyParams = {};\n/**\n * Hook for getting the authentication status\n *\n * Calls the authProvider.checkAuth() method asynchronously.\n *\n * The return value updates according to the authProvider request state:\n *\n * - isLoading: true just after mount, while the authProvider is being called. false once the authProvider has answered.\n * - authenticated: true while loading. then true or false depending on the authProvider response.\n *\n * To avoid rendering a component and force waiting for the authProvider response, use the useAuthState() hook\n * instead of the useAuthenticated() hook.\n *\n * You can render different content depending on the authenticated status.\n *\n * @see useAuthenticated()\n *\n * @param {Object} params Any params you want to pass to the authProvider\n *\n * @returns The current auth check state. Destructure as { authenticated, error, isLoading }.\n *\n * @example\n * import { useAuthState, Loading } from 'react-admin';\n *\n * const MyPage = () => {\n *     const { isLoading, authenticated } = useAuthState();\n *     if (isLoading) {\n *         return <Loading />;\n *     }\n *     if (authenticated) {\n *        return <AuthenticatedContent />;\n *     }\n *     return <AnonymousContent />;\n * };\n */\nvar useAuthState = function (params) {\n    if (params === void 0) { params = emptyParams; }\n    var _a = useSafeSetState({\n        isLoading: true,\n        authenticated: true, // optimistic\n    }), state = _a[0], setState = _a[1];\n    var checkAuth = useCheckAuth();\n    useEffect(function () {\n        checkAuth(params, false)\n            .then(function () { return setState({ isLoading: false, authenticated: true }); })\n            .catch(function () { return setState({ isLoading: false, authenticated: false }); });\n    }, [checkAuth, params, setState]);\n    return state;\n};\nexport default useAuthState;\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,eAAT,QAAgC,eAAhC;AACA,IAAIC,WAAW,GAAG,EAAlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,YAAY,GAAG,UAAUC,MAAV,EAAkB;EACjC,IAAIA,MAAM,KAAK,KAAK,CAApB,EAAuB;IAAEA,MAAM,GAAGF,WAAT;EAAuB;;EAChD,IAAIG,EAAE,GAAGJ,eAAe,CAAC;IACrBK,SAAS,EAAE,IADU;IAErBC,aAAa,EAAE,IAFM,CAEA;;EAFA,CAAD,CAAxB;EAAA,IAGIC,KAAK,GAAGH,EAAE,CAAC,CAAD,CAHd;EAAA,IAGmBI,QAAQ,GAAGJ,EAAE,CAAC,CAAD,CAHhC;;EAIA,IAAIK,SAAS,GAAGV,YAAY,EAA5B;EACAD,SAAS,CAAC,YAAY;IAClBW,SAAS,CAACN,MAAD,EAAS,KAAT,CAAT,CACKO,IADL,CACU,YAAY;MAAE,OAAOF,QAAQ,CAAC;QAAEH,SAAS,EAAE,KAAb;QAAoBC,aAAa,EAAE;MAAnC,CAAD,CAAf;IAA6D,CADrF,EAEKK,KAFL,CAEW,YAAY;MAAE,OAAOH,QAAQ,CAAC;QAAEH,SAAS,EAAE,KAAb;QAAoBC,aAAa,EAAE;MAAnC,CAAD,CAAf;IAA8D,CAFvF;EAGH,CAJQ,EAIN,CAACG,SAAD,EAAYN,MAAZ,EAAoBK,QAApB,CAJM,CAAT;EAKA,OAAOD,KAAP;AACH,CAbD;;AAcA,eAAeL,YAAf"},"metadata":{},"sourceType":"module"}