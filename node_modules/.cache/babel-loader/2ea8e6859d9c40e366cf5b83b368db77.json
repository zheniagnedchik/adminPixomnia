{"ast":null,"code":"import * as React from 'react';\nimport { useEffect } from 'react';\nimport { FormGroupContext } from './FormGroupContext';\nimport { useFormGroups } from './useFormGroups';\n/**\n * This provider allows its input children to register to a specific group.\n * This enables other components in the group to access group properties such as its\n * validation (valid/invalid) or whether its inputs have been updated (dirty/pristine).\n *\n * @example\n * import { Edit, SimpleForm, TextInput, FormGroupContextProvider, useFormGroup } from 'react-admin';\n * import { Accordion, AccordionDetails, AccordionSummary, Typography } from '@mui/material';\n *\n * const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <TextInput source=\"title\" />\n *             <FormGroupContextProvider name=\"options\">\n *                 <Accordion>\n *                     <AccordionSummary\n *                         expandIcon={<ExpandMoreIcon />}\n *                         aria-controls=\"options-content\"\n *                         id=\"options-header\"\n *                     >\n *                         <AccordionSectionTitle name=\"options\">Options</AccordionSectionTitle>\n *                     </AccordionSummary>\n *                     <AccordionDetails id=\"options-content\" aria-labelledby=\"options-header\">\n *                         <TextInput source=\"teaser\" validate={minLength(20)} />\n *                     </AccordionDetails>\n *                 </Accordion>\n *             </FormGroupContextProvider>\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * const AccordionSectionTitle = ({ children, name }) => {\n *     const formGroupState = useFormGroup(name);\n *     return (\n *         <Typography color={formGroupState.invalid && formGroupState.dirty ? 'error' : 'inherit'}>\n *             {children}\n *         </Typography>\n *     );\n * }\n *\n * @param props The component props\n * @param {ReactNode} props.children The form group content\n * @param {String} props.name The form group name\n */\n\nexport var FormGroupContextProvider = function (_a) {\n  var children = _a.children,\n      name = _a.name;\n  var formGroups = useFormGroups();\n  useEffect(function () {\n    if (!formGroups || !formGroups.registerGroup || !formGroups.unregisterGroup) {\n      console.warn(\"The FormGroupContextProvider can only be used inside a FormContext such as provided by the SimpleForm and TabbedForm components\");\n      return;\n    }\n\n    formGroups.registerGroup(name);\n    return function () {\n      formGroups.unregisterGroup(name);\n    };\n  }, [formGroups, name]);\n  return React.createElement(FormGroupContext.Provider, {\n    value: name\n  }, children);\n};","map":{"version":3,"names":["React","useEffect","FormGroupContext","useFormGroups","FormGroupContextProvider","_a","children","name","formGroups","registerGroup","unregisterGroup","console","warn","createElement","Provider","value"],"sources":["/Users/evgenijgnedcik/Documents/GitHub/adminPixomnia/node_modules/ra-core/dist/esm/form/FormGroupContextProvider.js"],"sourcesContent":["import * as React from 'react';\nimport { useEffect } from 'react';\nimport { FormGroupContext } from './FormGroupContext';\nimport { useFormGroups } from './useFormGroups';\n/**\n * This provider allows its input children to register to a specific group.\n * This enables other components in the group to access group properties such as its\n * validation (valid/invalid) or whether its inputs have been updated (dirty/pristine).\n *\n * @example\n * import { Edit, SimpleForm, TextInput, FormGroupContextProvider, useFormGroup } from 'react-admin';\n * import { Accordion, AccordionDetails, AccordionSummary, Typography } from '@mui/material';\n *\n * const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <TextInput source=\"title\" />\n *             <FormGroupContextProvider name=\"options\">\n *                 <Accordion>\n *                     <AccordionSummary\n *                         expandIcon={<ExpandMoreIcon />}\n *                         aria-controls=\"options-content\"\n *                         id=\"options-header\"\n *                     >\n *                         <AccordionSectionTitle name=\"options\">Options</AccordionSectionTitle>\n *                     </AccordionSummary>\n *                     <AccordionDetails id=\"options-content\" aria-labelledby=\"options-header\">\n *                         <TextInput source=\"teaser\" validate={minLength(20)} />\n *                     </AccordionDetails>\n *                 </Accordion>\n *             </FormGroupContextProvider>\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * const AccordionSectionTitle = ({ children, name }) => {\n *     const formGroupState = useFormGroup(name);\n *     return (\n *         <Typography color={formGroupState.invalid && formGroupState.dirty ? 'error' : 'inherit'}>\n *             {children}\n *         </Typography>\n *     );\n * }\n *\n * @param props The component props\n * @param {ReactNode} props.children The form group content\n * @param {String} props.name The form group name\n */\nexport var FormGroupContextProvider = function (_a) {\n    var children = _a.children, name = _a.name;\n    var formGroups = useFormGroups();\n    useEffect(function () {\n        if (!formGroups ||\n            !formGroups.registerGroup ||\n            !formGroups.unregisterGroup) {\n            console.warn(\"The FormGroupContextProvider can only be used inside a FormContext such as provided by the SimpleForm and TabbedForm components\");\n            return;\n        }\n        formGroups.registerGroup(name);\n        return function () {\n            formGroups.unregisterGroup(name);\n        };\n    }, [formGroups, name]);\n    return (React.createElement(FormGroupContext.Provider, { value: name }, children));\n};\n"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,wBAAwB,GAAG,UAAUC,EAAV,EAAc;EAChD,IAAIC,QAAQ,GAAGD,EAAE,CAACC,QAAlB;EAAA,IAA4BC,IAAI,GAAGF,EAAE,CAACE,IAAtC;EACA,IAAIC,UAAU,GAAGL,aAAa,EAA9B;EACAF,SAAS,CAAC,YAAY;IAClB,IAAI,CAACO,UAAD,IACA,CAACA,UAAU,CAACC,aADZ,IAEA,CAACD,UAAU,CAACE,eAFhB,EAEiC;MAC7BC,OAAO,CAACC,IAAR,CAAa,iIAAb;MACA;IACH;;IACDJ,UAAU,CAACC,aAAX,CAAyBF,IAAzB;IACA,OAAO,YAAY;MACfC,UAAU,CAACE,eAAX,CAA2BH,IAA3B;IACH,CAFD;EAGH,CAXQ,EAWN,CAACC,UAAD,EAAaD,IAAb,CAXM,CAAT;EAYA,OAAQP,KAAK,CAACa,aAAN,CAAoBX,gBAAgB,CAACY,QAArC,EAA+C;IAAEC,KAAK,EAAER;EAAT,CAA/C,EAAgED,QAAhE,CAAR;AACH,CAhBM"},"metadata":{},"sourceType":"module"}