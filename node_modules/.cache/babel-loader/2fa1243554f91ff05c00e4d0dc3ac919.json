{"ast":null,"code":"export const sort = (field, order, array) => {\n  switch (field) {\n    case \"clockInTime\":\n      if (order === \"ASC\") {\n        return array.sort((a, b) => new Date(a[field]) - new Date(b[field]));\n      } else {\n        return array.sort((a, b) => new Date(b[field]) - new Date(a[field]));\n      }\n\n    case \"clockOutTime\":\n      if (order === \"ASC\") {\n        return array.sort((a, b) => new Date(a[field]) - new Date(b[field]));\n      } else {\n        return array.sort((a, b) => new Date(b[field]) - new Date(a[field]));\n      }\n\n    case \"startTime\":\n      if (order === \"ASC\") {\n        return array.sort((a, b) => new Date(a[field]) - new Date(b[field]));\n      } else {\n        return array.sort((a, b) => new Date(b[field]) - new Date(a[field]));\n      }\n\n    case \"endTime\":\n      if (order === \"ASC\") {\n        return array.sort((a, b) => new Date(a[field]) - new Date(b[field]));\n      } else {\n        return array.sort((a, b) => new Date(b[field]) - new Date(a[field]));\n      }\n\n    default:\n      if (order === \"ASC\") {\n        return array.sort((a, b) => {\n          if (typeof a[field] === \"string\") {\n            return a[field].localeCompare(b[field]);\n          } else {\n            return a[field] - b[field];\n          }\n        });\n      } else {\n        return array.sort((a, b) => {\n          if (typeof a[field] === \"string\") {\n            return b[field].localeCompare(a[field]);\n          } else {\n            return b[field] - a[field];\n          }\n        });\n      }\n\n  }\n};","map":{"version":3,"names":["sort","field","order","array","a","b","Date","localeCompare"],"sources":["/Users/evgenijgnedcik/Documents/GitHub/adminPixomnia/src/Utils/sort.js"],"sourcesContent":["export const sort = (field, order, array) => {\n  switch (field) {\n    case \"clockInTime\":\n      if (order === \"ASC\") {\n        return array.sort((a, b) => new Date(a[field]) - new Date(b[field]));\n      } else {\n        return array.sort((a, b) => new Date(b[field]) - new Date(a[field]));\n      }\n    case \"clockOutTime\":\n      if (order === \"ASC\") {\n        return array.sort((a, b) => new Date(a[field]) - new Date(b[field]));\n      } else {\n        return array.sort((a, b) => new Date(b[field]) - new Date(a[field]));\n      }\n    case \"startTime\":\n      if (order === \"ASC\") {\n        return array.sort((a, b) => new Date(a[field]) - new Date(b[field]));\n      } else {\n        return array.sort((a, b) => new Date(b[field]) - new Date(a[field]));\n      }\n    case \"endTime\":\n      if (order === \"ASC\") {\n        return array.sort((a, b) => new Date(a[field]) - new Date(b[field]));\n      } else {\n        return array.sort((a, b) => new Date(b[field]) - new Date(a[field]));\n      }\n\n    default:\n      if (order === \"ASC\") {\n        return array.sort((a, b) => {\n          if (typeof a[field] === \"string\") {\n            return a[field].localeCompare(b[field]);\n          } else {\n            return a[field] - b[field];\n          }\n        });\n      } else {\n        return array.sort((a, b) => {\n          if (typeof a[field] === \"string\") {\n            return b[field].localeCompare(a[field]);\n          } else {\n            return b[field] - a[field];\n          }\n        });\n      }\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}