{"ast":null,"code":"var _jsxFileName = \"/Users/evgenijgnedcik/Documents/GitHub/adminPixomnia/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Admin, fetchUtils, GET_LIST, CREATE, GET_ONE, UPDATE, defaultTheme, useTheme, DELETE } from \"react-admin\";\nimport { Resource } from \"@react-admin/ra-rbac\";\nimport SouthAmericaIcon from \"@mui/icons-material/SouthAmerica\";\nimport LocalPrintshopIcon from \"@mui/icons-material/LocalPrintshop\";\nimport RegionList from \"./components/RegionList\";\nimport RegionCreate from \"./components/RegionCreate\";\nimport axios from \"axios\";\nimport PrinterList from \"./components/Printers/PrinterList\";\nimport PrinterCreate from \"./components/Printers/PrinterCreate\";\nimport PlacesList from \"./components/Places/PlacesList\";\nimport PlaceCreate from \"./components/Places/PlacesCreate\";\nimport StorefrontIcon from \"@mui/icons-material/Storefront\";\nimport PeopleAltIcon from \"@mui/icons-material/PeopleAlt\";\nimport EmployeesListList from \"./components/Employees/EmployeesList\";\nimport EmployeesCreate from \"./components/Employees/EmployeesCreate\";\nimport EmployeesEdit from \"./components/Employees/EmployeesEdit\";\nimport PrintersEdit from \"./components/Printers/PrintersEdit\";\nimport ShiftScheduleListList from \"./components/ShiftSchedule/ShiftScheduleList\";\nimport ShiftScheduleListCreate from \"./components/ShiftSchedule/ShiftScheduleCreate\";\nimport WorkHistoryIcon from \"@mui/icons-material/WorkHistory\";\nimport PlacesShow from \"./components/Places/PlacesShow\";\nimport InventoryIcon from \"@mui/icons-material/Inventory\";\nimport PrintRoundedIcon from \"@mui/icons-material/PrintRounded\";\nimport AcUnitIcon from \"@mui/icons-material/AcUnit\";\nimport { StorageUri, URI } from \"./URLS\";\nimport AccessibilityIcon from \"@mui/icons-material/Accessibility\";\nimport LocalShippingIcon from \"@mui/icons-material/LocalShipping\";\nimport { Button } from \"@mui/material\";\nimport MyLayout from \"./components/MyLayout/Layout\";\nimport { getCurrentDate } from \"./getDate\";\nimport InventoryList from \"./components/Inventory/InventoryList\";\nimport OnePrintInventoryList from \"./components/Inventory/OnePrintInventoryList\";\nimport ClosedShiftStatistic from \"./components/ShiftStatistic/ClosedShiftStatistic\";\nimport EmployeeGrid from \"./components/ShiftStatistic/EmployeeGrid\";\nimport AddReactionIcon from \"@mui/icons-material/AddReaction\";\nimport OpenShiftStatistic from \"./components/ShiftStatistic/OpenShiftStatistic\";\nimport { sort } from \"./Utils/sort\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setRegion } from \"./reducers/regionReducer\";\nimport PlacesEdit from \"./components/Places/PlacesEdit\";\nimport CalendarShift from \"./components/ShiftSchedule/Calendar\";\nimport CalendarMonthIcon from \"@mui/icons-material/CalendarMonth\";\nimport PostcardList from \"./components/Postcards/PostcardsList\";\nimport PostcardCreate from \"./components/Postcards/PostcardCreate\";\nimport PostCardEdit from \"./components/Postcards/PostCardEdit\";\nimport ImageIcon from \"@mui/icons-material/Image\";\nimport MyLogin from \"./components/Login/Login\";\nimport authProvider from \"./Utils/authProvider\";\nimport AccessList from \"./components/Access/AcessList\";\nimport AccessCreate from \"./components/Access/AccessCreate\";\nimport AccessEdit from \"./components/Access/AccessEdit\";\nimport StorageList from \"./components/Storage/StorageList\";\nimport StorageCreate from \"./components/Storage/StorageCreate\";\nimport StorageLogList from \"./components/StorageLog/StorageLogList\";\nimport StorageLogCreate from \"./components/StorageLog/StorageLogCreate\";\nimport StorageShow from \"./components/Storage/StorageShow\";\nimport WarehouseIcon from \"@mui/icons-material/Warehouse\";\nimport StorageReport from \"./components/StorageReport/StorageReportList\";\nimport StorageReportCreate from \"./components/StorageReport/StorageReportCreate\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    region\n  } = useSelector(state => state.region);\n\n  const setBody = (resource, params) => {\n    switch (resource) {\n      case \"addPlace\":\n        return {\n          place: { ...params.data,\n            printerIds: [],\n            employeeIds: []\n          }\n        };\n\n      case \"addEmployee\":\n        return {\n          employee: { ...params.data\n          }\n        };\n\n      case \"addShiftSchedule\":\n        const param = {\n          placeId: params.data.placeId,\n          employeeId: params.data.employeeId,\n          startTime: getCurrentDate(params.data.startTime),\n          endTime: getCurrentDate(params.data.endTime),\n          softStartInMinutes: params.data.softStartInMinutes,\n          softEndInMinutes: params.data.softEndInMinutes,\n          shiftManager: params.data.shiftManager\n        };\n        return param;\n\n      case \"uploadPostcard\":\n        var data = new FormData();\n        data.append(\"employeeId\", \"admin@pixomnia\");\n        data.append(\"placeId\", params.data.placeId);\n        data.append(\"note\", params.data.note);\n        data.append(\"file\", params.data.pictures.rawFile);\n        return data;\n\n      case \"addStorage\":\n        return {\n          storage: {\n            storageId: params.data.storageId,\n            regionId: params.data.regionId,\n            type: params.data.type,\n            timeZone: params.data.timeZoneId,\n            note: params.data.note,\n            blackFrames: params.data.blackFrames,\n            media: params.data.media\n          }\n        };\n\n      default:\n        return params.data;\n    }\n  };\n\n  const getLink = (resource, params, body) => {\n    let dateInventoryLogs;\n    const date = getCurrentDate(new Date());\n    const curDate = new Date();\n\n    if (params.filter.day) {\n      dateInventoryLogs = curDate.setDate(curDate.getDate() - params.filter.day);\n    } else {\n      dateInventoryLogs = curDate.setDate(curDate.getDate() - 1);\n    }\n\n    const dateCalendar = curDate.setMonth(curDate.getMonth() - 1);\n    const start = new Date();\n    const newStart = new Date(start.setUTCHours(0, 0, 0, 0)).toISOString(\"en-US\");\n\n    switch (resource) {\n      case \"getShiftSchedule\":\n        if (params.meta.type === \"calendar\") {\n          return `${URI}/${resource}?employeeId=admin@pixomnia.com&placeId=${params.filter.place}&fromTime=${new Date(dateCalendar).toISOString()}`;\n        } else {\n          return `${URI}/${resource}?employeeId=admin@pixomnia.com&placeId=${params.filter.place}&fromTime=${newStart}`;\n        }\n\n      case \"getRegions\":\n        return `${URI}/getRegions?employeeId=admin@pixomnia.com`;\n\n      case \"getInventoryLogs\":\n        return `${URI}/${resource}?employeeId=admin@pixomnia.com&regionId=${params.filter.region ? params.filter.region : \"TX\"}&fromTime=${new Date(dateInventoryLogs).toISOString()}`;\n\n      case \"getPrinterInfoLogs\":\n        return `${URI}/${resource}?employeeId=admin@pixomnia.com&printerId=rePrinter01&fromTime=${new Date(dateInventoryLogs).toISOString()}`;\n\n      case \"getCloseShiftStatistics\":\n        return `${URI}/${resource}?employeeId=admin@pixomnia.com&regionId=${params.filter.region ? params.filter.region : \"TX\"}&fromTime=${new Date(dateInventoryLogs).toISOString()}`;\n\n      case \"getOpenShiftStatistics\":\n        return `${URI}/${resource}?employeeId=admin@pixomnia.com&regionId=${params.filter.region ? params.filter.region : \"TX\"}`;\n\n      case \"getPostcards\":\n        return `${URI}/${resource}?employeeId=admin@pixomnia.com&placeId=${params.filter.place}`;\n\n      case \"getAccess\":\n        return `${URI}/${resource}?employeeId=admin@pixomnia.com`;\n\n      case \"getStorages\":\n        return `${StorageUri}/${resource}?regionId=${params.filter.region}`;\n\n      case \"getStorageLogs\":\n        return `${StorageUri}/${resource}?regionId=${params.filter.region}`;\n\n      case \"getStorageReports\":\n        return `${StorageUri}/${resource}?regionId=${params.filter.region}`;\n\n      default:\n        return `${URI}/${resource}?employeeId=admin@pixomnia&regionId=${params.filter.region ? params.filter.region : \"TX\"}`;\n    }\n  };\n\n  const getNewData = (resource, getListData, params) => {\n    let new_data;\n\n    switch (resource) {\n      case \"getPlacesWithInfo\":\n        new_data = getListData.data.map((i, index) => {\n          let printer = i.printerIds.map(it => {\n            return {\n              item: it\n            };\n          });\n          let employee = i.employeeIds.map(it => {\n            return {\n              item: it\n            };\n          });\n          const printFilter = printer.filter(el => el.item.length > 0);\n          const employeeFilter = employee.filter(el => el.item.length > 0);\n          return { ...i,\n            newList: printFilter,\n            id: i.regionId ? `regid${i.regionId}regid-id${index}` : index,\n            employee: employeeFilter\n          };\n        });\n        return new_data;\n\n      case \"getPostcards\":\n        new_data = getListData.data.map((i, index) => {\n          return { ...i,\n            id: i.placeId ? `regid${i.placeId}regid-id${index}` : index\n          };\n        });\n        return new_data;\n\n      default:\n        new_data = getListData.data.map((i, index) => {\n          return { ...i,\n            id: i.regionId ? `regid${i.regionId}regid-id${index}` : index\n          };\n        });\n        return new_data;\n    }\n  };\n\n  const createPost = async (resource, createBody) => {\n    switch (resource) {\n      case \"uploadPostcard\":\n        const headers = {\n          headers: {\n            \"content-type\": \"multipart/form-data\"\n          }\n        };\n        return await axios.post(`${URI}/${resource}`, createBody, headers);\n\n      case \"addStorage\":\n        return axios.post(`${StorageUri}/${resource}`, createBody);\n\n      case \"addStorageLog\":\n        return await axios.post(`${StorageUri}/${resource}`, createBody);\n\n      case \"generateStorageReport\":\n        return await axios.post(`${StorageUri}/${resource}`, createBody);\n\n      default:\n        return await axios.post(`${URI}/${resource}`, createBody);\n    }\n  };\n\n  const test = async (type, resource, params) => {\n    console.log(type);\n    const body = \"employeeId=admin@pixomnia&regionId=TX\";\n\n    switch (type) {\n      case GET_LIST:\n        const link = getLink(resource, params, body);\n        const getListData = await axios.get(link);\n        console.log(getListData);\n        const newData = getNewData(resource, getListData, params);\n        console.log(newData);\n        let test;\n\n        if (params.pagination.perPage <= newData.length) {\n          test = newData.splice((params.pagination.page - 1) * params.pagination.perPage, params.pagination.perPage);\n        } else {\n          test = [...newData];\n        }\n\n        const sortedList = sort(params.sort.field, params.sort.order, test);\n        console.log(sortedList);\n        return {\n          data: sortedList,\n          total: getListData.data.length\n        };\n\n      case CREATE:\n        const createBody = setBody(resource, params);\n        const create = await createPost(resource, createBody);\n        console.log(create);\n        let jsonParse;\n\n        if (resource === \"addStorage\" || resource === \"addStorageLog\") {\n          jsonParse = create.data;\n        } else {\n          jsonParse = JSON.parse(create.data.responseJson);\n        }\n\n        const createData = {\n          id: 9,\n          ...jsonParse\n        };\n        return {\n          data: createData\n        };\n\n      case GET_ONE:\n        console.log(params);\n\n        if (resource === \"getStorages\") {\n          const listStorages = await axios.get(`${StorageUri}/${resource}`);\n          const newListStorage = listStorages.data.map((item, index) => {\n            return { ...item,\n              id: `regidLAregid-id${index}`\n            };\n          });\n          const filterAccess = newListStorage.filter(el => el.id === params.id);\n          console.log(\"dfojkdhv\");\n          console.log(filterAccess);\n          const storage = await axios.get(`${StorageUri}/getStorage?storageId=${filterAccess[0].storageId}`);\n\n          if (storage) {\n            console.log(\"storage\", storage);\n            return {\n              data: { ...storage,\n                id: params.id\n              }\n            };\n          }\n        }\n\n        if (resource === \"getAccess\") {\n          console.log(\"kjhgfdghjkl\");\n          const listAccess = await axios.get(`${URI}/${resource}?employeeId=admin@pixomnia`);\n          const newListAccess = listAccess.data.map((item, index) => {\n            return { ...item,\n              id: index\n            };\n          });\n          console.log(newListAccess);\n          console.log(params);\n          const filterAccess = newListAccess.filter(el => el.id === Number(params.id));\n          console.log(filterAccess);\n          return {\n            data: filterAccess[0]\n          };\n        }\n\n        if (resource === \"getPostcards\") {\n          const regionStr = params.id.substring(params.id.indexOf(\"regid\") + 5, params.id.lastIndexOf(\"regid-\"));\n          const list = await axios.get(`${URI}/${resource}?employeeId=admin@pixomnia&placeId=${regionStr}`);\n          const newList = list.data.map((item, index) => {\n            return { ...item,\n              id: `regid${item.placeId}regid-id${index}`\n            };\n          });\n          const filter = newList.filter(el => el.id === params.id);\n          return {\n            data: filter[0]\n          };\n        }\n\n        if (resource === \"getPlacesWithInfo\") {\n          const regionStr = params.id.substring(params.id.indexOf(\"regid\") + 5, params.id.lastIndexOf(\"regid-\"));\n          await dispatch(setRegion(regionStr));\n          const list = await axios.get(`${URI}/${resource}?employeeId=admin@pixomnia&regionId=${regionStr}`);\n          let g = list.data.map((i, index) => {\n            let printer = i.printerIds.map(it => {\n              return {\n                item: it\n              };\n            });\n            let employee = i.employeeIds.map(it => {\n              return {\n                item: it\n              };\n            });\n            const printFilter = printer.filter(el => el.item.length > 0);\n            const employeeFilter = employee.filter(el => el.item.length > 0);\n            return { ...i,\n              newList: printFilter,\n              id: `regid${i.regionId}regid-id${index}`,\n              employee: employeeFilter\n            };\n          });\n          const filter = g.filter(item => item.id == params.id);\n          return await {\n            data: filter[0]\n          };\n        }\n\n        if (resource === \"getPrinters\") {\n          const regionStr = params.id.substring(params.id.indexOf(\"regid\") + 5, params.id.lastIndexOf(\"regid-\"));\n          const curDate = new Date();\n          const dateInventoryLogs = curDate.setDate(curDate.getDate() - 1);\n          const printerList = await axios.get(`${URI}/${resource}?employeeId=admin@pixomnia&regionId=${regionStr}`);\n          const newArray = printerList.data.map((item, index) => {\n            return { ...item,\n              id: `regid${item.regionId}regid-id${index}`\n            };\n          });\n          const printer = newArray.filter(el => String(el.id) === params.id);\n          const printerLog = await axios.get(`${URI}/getPrinterInfoLogs?employeeId=admin@pixomnia.com&printerId=${printer[0].printerId}&fromTime=${new Date(dateInventoryLogs).toISOString()}`);\n          let id = printerLog.data.map((item, index) => {\n            return { ...item,\n              id: index\n            };\n          });\n          const printers = {\n            id: 0,\n            printer: id\n          };\n          return {\n            data: printers\n          };\n        }\n\n        if (resource === \"getEmployees\") {\n          const regionStr = params.id.substring(params.id.indexOf(\"regid\") + 5, params.id.lastIndexOf(\"regid-\"));\n          const employee = await axios.get(`${URI}/${resource}?employeeId=admin@pixomnia&regionId=${regionStr}`);\n          const newArray = employee.data.map((item, index) => {\n            return { ...item,\n              id: `regid${item.regionId}regid-id${index}`\n            };\n          });\n          const filterArray = newArray.filter(el => el.id == params.id);\n          return {\n            data: filterArray[0]\n          };\n        }\n\n      case UPDATE:\n        if (resource === \"getAccess\") {\n          axios.post(`${URI}/updateAccess`, params.data);\n        }\n\n        if (resource === \"getPostcards\") {\n          axios.post(`${URI}/updatePostcard`, {\n            placeId: params.data.placeId,\n            status: params.data.status,\n            postcardId: params.data.postcardId,\n            note: params.data.note\n          });\n        }\n\n        if (resource == \"getEmployees\") {\n          axios.post(`${URI}/updateEmployee`, {\n            employee: {\n              canUseImport: params.data.canUseImport,\n              email: params.data.email,\n              firstName: params.data.firstName,\n              lastName: params.data.lastName,\n              regionId: params.data.regionId\n            }\n          });\n        }\n\n        if (resource === \"getPlacesWithInfo\") {\n          if (params.meta) {\n            axios.post(`${URI}/updatePlace`, {\n              place: {\n                placeId: params.data.placeId,\n                name: params.data.name,\n                tierId: params.data.tierId,\n                hourTarget: params.data.hourTarget,\n                latitude: params.data.latitude,\n                longitude: params.data.longitude,\n                radius: params.data.radius,\n                timeZoneId: params.data.timeZoneId,\n                printerIds: params.data.printerIds,\n                employeeIds: params.data.employeeIds\n              }\n            });\n          }\n\n          const regionStr = params.id.substring(params.id.indexOf(\"regid\") + 5, params.id.lastIndexOf(\"regid-\"));\n          const udpList = await axios.get(`${URI}/${resource}?employeeId=admin@pixomnia&regionId=${regionStr}`);\n          let udp = udpList.data.map((i, index) => {\n            let printer = i.printerIds.map(it => {\n              return {\n                item: it\n              };\n            });\n            let employee = i.employeeIds.map(it => {\n              return {\n                item: it\n              };\n            });\n            const printFilters = printer.filter(el => el.item.length > 0);\n            const employeeFilters = employee.filter(el => el.item.length > 0);\n            return { ...i,\n              newList: printFilters,\n              id: `regid${i.regionId}regid-id${index}`,\n              employee: employeeFilters\n            };\n          });\n          const filters = udp.filter(item => item.id == params.id);\n          const newPrinters = params.data.newList.filter(e => filters[0].newList.findIndex(i => i.item == e.item) === -1);\n          const delPrinters = filters[0].newList.filter(e => params.data.newList.findIndex(i => i.item == e.item) === -1);\n          const newEmployee = params.data.employee.filter(e => filters[0].employee.findIndex(i => i.item == e.item) === -1);\n          const delEmployee = filters[0].employee.filter(e => params.data.employee.findIndex(i => i.item == e.item) === -1);\n\n          if (newPrinters.length > 0) {\n            for (const item of newPrinters) {\n              await axios.post(`${URI}/linkPrinterAndPlace`, {\n                placeId: params.data.placeId,\n                printerId: item.item\n              }).then(data => console.log(data));\n            }\n          }\n\n          if (delPrinters.length > 0) {\n            for (const item of delPrinters) {\n              await axios.post(`${URI}/unlinkPrinterFromPlace`, {\n                placeId: params.data.placeId,\n                printerId: item.item\n              }).then(data => console.log(data));\n            }\n          }\n\n          if (newEmployee.length > 0) {\n            for (const item of newEmployee) {\n              await axios.post(`${URI}/linkEmployeeAndPlace`, {\n                placeId: params.data.placeId,\n                employeeId: item.item\n              }).then(data => console.log(data));\n            }\n          }\n\n          if (delEmployee.length > 0) {\n            for (const item of delEmployee) {\n              await axios.post(`${URI}/unlinkEmployeeFromPlace`, {\n                placeId: params.data.placeId,\n                employeeId: item.item\n              }).then(data => console.log(data));\n            }\n          }\n        }\n\n        return {\n          data: params.previousData\n        };\n\n      case DELETE:\n        if (resource === \"getPostcards\") {\n          axios.get(`${URI}/deletePostcard?placeId=${params.previousData.placeId}&postcardId=${params.previousData.postcardId}`);\n        } else {\n          axios.get(`${URI}/deleteShift?shiftScheduleId=${params.previousData.shiftScheduleId}`);\n        }\n\n        return {\n          data: params.data\n        };\n    }\n  };\n\n  const testProvider = (type, resource, params) => {\n    console.log(type);\n    console.log(resource);\n    console.log(params);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Admin, {\n      dataProvider: test,\n      layout: MyLayout,\n      loginPage: MyLogin,\n      authProvider: authProvider,\n      requireAuth: true,\n      children: [/*#__PURE__*/_jsxDEV(Resource, {\n        name: \"getRegions\",\n        list: RegionList,\n        create: RegionCreate,\n        icon: SouthAmericaIcon,\n        options: {\n          label: \"Regions\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 558,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Resource, {\n        name: \"getPrinters\",\n        list: PrinterList,\n        create: PrinterCreate,\n        icon: LocalPrintshopIcon,\n        options: {\n          label: \"Printers\"\n        },\n        show: OnePrintInventoryList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 565,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Resource, {\n        name: \"getPlacesWithInfo\",\n        list: PlacesList,\n        create: PlaceCreate,\n        show: PlacesShow,\n        icon: StorefrontIcon,\n        edit: PlacesEdit,\n        options: {\n          label: \"Places\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 573,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Resource, {\n        name: \"getEmployees\",\n        list: EmployeesListList,\n        create: EmployeesCreate,\n        edit: EmployeesEdit,\n        icon: PeopleAltIcon,\n        options: {\n          label: \"Employees\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 582,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Resource, {\n        name: \"getShiftSchedule\",\n        list: ShiftScheduleListList,\n        create: ShiftScheduleListCreate,\n        icon: WorkHistoryIcon,\n        options: {\n          label: \"Schedule\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 590,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Resource, {\n        name: \"getInventoryLogs\",\n        list: InventoryList,\n        icon: InventoryIcon,\n        options: {\n          label: \"Inventory\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 597,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Resource, {\n        name: \"getCloseShiftStatistics\",\n        list: ClosedShiftStatistic,\n        icon: AcUnitIcon,\n        options: {\n          label: \"Closed shift statistic\"\n        },\n        show: EmployeeGrid\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 603,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Resource, {\n        name: \"getOpenShiftStatistics\",\n        list: OpenShiftStatistic,\n        icon: AddReactionIcon,\n        options: {\n          label: \"Open shift statistic\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 610,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Resource, {\n        name: \"Schedulecalendar\",\n        list: CalendarShift,\n        options: {\n          label: \"Schedule calendar\"\n        },\n        icon: CalendarMonthIcon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 616,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Resource, {\n        name: \"getPostcards\",\n        list: PostcardList,\n        edit: PostCardEdit,\n        options: {\n          label: \"Postcards\"\n        },\n        create: PostcardCreate,\n        icon: ImageIcon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 622,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Resource, {\n        name: \"getAccess\",\n        list: AccessList,\n        create: AccessCreate,\n        edit: AccessEdit,\n        options: {\n          label: \"Access\"\n        },\n        icon: AccessibilityIcon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 630,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Resource, {\n        name: \"getStorages\",\n        list: StorageList,\n        create: StorageCreate,\n        show: StorageShow,\n        options: {\n          label: \"Storage\"\n        },\n        icon: WarehouseIcon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 638,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Resource, {\n        name: \"getStorageLogs\",\n        list: StorageLogList,\n        create: StorageLogCreate,\n        options: {\n          label: \"Storage log\"\n        },\n        icon: LocalShippingIcon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 646,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Resource, {\n        name: \"getStorageReports\",\n        list: StorageReport,\n        create: StorageReportCreate,\n        options: {\n          label: \"Storage log\"\n        },\n        icon: LocalShippingIcon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 653,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 551,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 550,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"qq8040jub0osAxvoiPJA+LBY8No=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Admin","fetchUtils","GET_LIST","CREATE","GET_ONE","UPDATE","defaultTheme","useTheme","DELETE","Resource","SouthAmericaIcon","LocalPrintshopIcon","RegionList","RegionCreate","axios","PrinterList","PrinterCreate","PlacesList","PlaceCreate","StorefrontIcon","PeopleAltIcon","EmployeesListList","EmployeesCreate","EmployeesEdit","PrintersEdit","ShiftScheduleListList","ShiftScheduleListCreate","WorkHistoryIcon","PlacesShow","InventoryIcon","PrintRoundedIcon","AcUnitIcon","StorageUri","URI","AccessibilityIcon","LocalShippingIcon","Button","MyLayout","getCurrentDate","InventoryList","OnePrintInventoryList","ClosedShiftStatistic","EmployeeGrid","AddReactionIcon","OpenShiftStatistic","sort","useDispatch","useSelector","setRegion","PlacesEdit","CalendarShift","CalendarMonthIcon","PostcardList","PostcardCreate","PostCardEdit","ImageIcon","MyLogin","authProvider","AccessList","AccessCreate","AccessEdit","StorageList","StorageCreate","StorageLogList","StorageLogCreate","StorageShow","WarehouseIcon","StorageReport","StorageReportCreate","App","dispatch","region","state","setBody","resource","params","place","data","printerIds","employeeIds","employee","param","placeId","employeeId","startTime","endTime","softStartInMinutes","softEndInMinutes","shiftManager","FormData","append","note","pictures","rawFile","storage","storageId","regionId","type","timeZone","timeZoneId","blackFrames","media","getLink","body","dateInventoryLogs","date","Date","curDate","filter","day","setDate","getDate","dateCalendar","setMonth","getMonth","start","newStart","setUTCHours","toISOString","meta","getNewData","getListData","new_data","map","i","index","printer","it","item","printFilter","el","length","employeeFilter","newList","id","createPost","createBody","headers","post","test","console","log","link","get","newData","pagination","perPage","splice","page","sortedList","field","order","total","create","jsonParse","JSON","parse","responseJson","createData","listStorages","newListStorage","filterAccess","listAccess","newListAccess","Number","regionStr","substring","indexOf","lastIndexOf","list","g","printerList","newArray","String","printerLog","printerId","printers","filterArray","status","postcardId","canUseImport","email","firstName","lastName","name","tierId","hourTarget","latitude","longitude","radius","udpList","udp","printFilters","employeeFilters","filters","newPrinters","e","findIndex","delPrinters","newEmployee","delEmployee","then","previousData","shiftScheduleId","testProvider","label"],"sources":["/Users/evgenijgnedcik/Documents/GitHub/adminPixomnia/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {\n  Admin,\n  fetchUtils,\n  GET_LIST,\n  CREATE,\n  GET_ONE,\n  UPDATE,\n  defaultTheme,\n  useTheme,\n  DELETE,\n} from \"react-admin\";\nimport { Resource } from \"@react-admin/ra-rbac\";\nimport SouthAmericaIcon from \"@mui/icons-material/SouthAmerica\";\nimport LocalPrintshopIcon from \"@mui/icons-material/LocalPrintshop\";\nimport RegionList from \"./components/RegionList\";\nimport RegionCreate from \"./components/RegionCreate\";\nimport axios from \"axios\";\nimport PrinterList from \"./components/Printers/PrinterList\";\nimport PrinterCreate from \"./components/Printers/PrinterCreate\";\nimport PlacesList from \"./components/Places/PlacesList\";\nimport PlaceCreate from \"./components/Places/PlacesCreate\";\nimport StorefrontIcon from \"@mui/icons-material/Storefront\";\nimport PeopleAltIcon from \"@mui/icons-material/PeopleAlt\";\nimport EmployeesListList from \"./components/Employees/EmployeesList\";\nimport EmployeesCreate from \"./components/Employees/EmployeesCreate\";\nimport EmployeesEdit from \"./components/Employees/EmployeesEdit\";\nimport PrintersEdit from \"./components/Printers/PrintersEdit\";\nimport ShiftScheduleListList from \"./components/ShiftSchedule/ShiftScheduleList\";\nimport ShiftScheduleListCreate from \"./components/ShiftSchedule/ShiftScheduleCreate\";\nimport WorkHistoryIcon from \"@mui/icons-material/WorkHistory\";\nimport PlacesShow from \"./components/Places/PlacesShow\";\nimport InventoryIcon from \"@mui/icons-material/Inventory\";\nimport PrintRoundedIcon from \"@mui/icons-material/PrintRounded\";\nimport AcUnitIcon from \"@mui/icons-material/AcUnit\";\nimport { StorageUri, URI } from \"./URLS\";\nimport AccessibilityIcon from \"@mui/icons-material/Accessibility\";\nimport LocalShippingIcon from \"@mui/icons-material/LocalShipping\";\n\nimport { Button } from \"@mui/material\";\nimport MyLayout from \"./components/MyLayout/Layout\";\nimport { getCurrentDate } from \"./getDate\";\nimport InventoryList from \"./components/Inventory/InventoryList\";\nimport OnePrintInventoryList from \"./components/Inventory/OnePrintInventoryList\";\nimport ClosedShiftStatistic from \"./components/ShiftStatistic/ClosedShiftStatistic\";\nimport EmployeeGrid from \"./components/ShiftStatistic/EmployeeGrid\";\nimport AddReactionIcon from \"@mui/icons-material/AddReaction\";\nimport OpenShiftStatistic from \"./components/ShiftStatistic/OpenShiftStatistic\";\nimport { sort } from \"./Utils/sort\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setRegion } from \"./reducers/regionReducer\";\nimport PlacesEdit from \"./components/Places/PlacesEdit\";\nimport CalendarShift from \"./components/ShiftSchedule/Calendar\";\nimport CalendarMonthIcon from \"@mui/icons-material/CalendarMonth\";\nimport PostcardList from \"./components/Postcards/PostcardsList\";\nimport PostcardCreate from \"./components/Postcards/PostcardCreate\";\nimport PostCardEdit from \"./components/Postcards/PostCardEdit\";\nimport ImageIcon from \"@mui/icons-material/Image\";\nimport MyLogin from \"./components/Login/Login\";\nimport authProvider from \"./Utils/authProvider\";\nimport AccessList from \"./components/Access/AcessList\";\nimport AccessCreate from \"./components/Access/AccessCreate\";\nimport AccessEdit from \"./components/Access/AccessEdit\";\nimport StorageList from \"./components/Storage/StorageList\";\nimport StorageCreate from \"./components/Storage/StorageCreate\";\nimport StorageLogList from \"./components/StorageLog/StorageLogList\";\nimport StorageLogCreate from \"./components/StorageLog/StorageLogCreate\";\nimport StorageShow from \"./components/Storage/StorageShow\";\nimport WarehouseIcon from \"@mui/icons-material/Warehouse\";\nimport StorageReport from \"./components/StorageReport/StorageReportList\";\nimport StorageReportCreate from \"./components/StorageReport/StorageReportCreate\";\n\nfunction App() {\n  const dispatch = useDispatch();\n  const { region } = useSelector((state) => state.region);\n\n  const setBody = (resource, params) => {\n    switch (resource) {\n      case \"addPlace\":\n        return { place: { ...params.data, printerIds: [], employeeIds: [] } };\n      case \"addEmployee\":\n        return { employee: { ...params.data } };\n      case \"addShiftSchedule\":\n        const param = {\n          placeId: params.data.placeId,\n          employeeId: params.data.employeeId,\n          startTime: getCurrentDate(params.data.startTime),\n          endTime: getCurrentDate(params.data.endTime),\n          softStartInMinutes: params.data.softStartInMinutes,\n          softEndInMinutes: params.data.softEndInMinutes,\n          shiftManager: params.data.shiftManager,\n        };\n        return param;\n      case \"uploadPostcard\":\n        var data = new FormData();\n        data.append(\"employeeId\", \"admin@pixomnia\");\n        data.append(\"placeId\", params.data.placeId);\n        data.append(\"note\", params.data.note);\n        data.append(\"file\", params.data.pictures.rawFile);\n        return data;\n      case \"addStorage\":\n        return {\n          storage: {\n            storageId: params.data.storageId,\n            regionId: params.data.regionId,\n            type: params.data.type,\n            timeZone: params.data.timeZoneId,\n            note: params.data.note,\n            blackFrames: params.data.blackFrames,\n            media: params.data.media,\n          },\n        };\n      default:\n        return params.data;\n    }\n  };\n\n  const getLink = (resource, params, body) => {\n    let dateInventoryLogs;\n    const date = getCurrentDate(new Date());\n    const curDate = new Date();\n    if (params.filter.day) {\n      dateInventoryLogs = curDate.setDate(\n        curDate.getDate() - params.filter.day\n      );\n    } else {\n      dateInventoryLogs = curDate.setDate(curDate.getDate() - 1);\n    }\n    const dateCalendar = curDate.setMonth(curDate.getMonth() - 1);\n    const start = new Date();\n    const newStart = new Date(start.setUTCHours(0, 0, 0, 0)).toISOString(\n      \"en-US\"\n    );\n\n    switch (resource) {\n      case \"getShiftSchedule\":\n        if (params.meta.type === \"calendar\") {\n          return `${URI}/${resource}?employeeId=admin@pixomnia.com&placeId=${\n            params.filter.place\n          }&fromTime=${new Date(dateCalendar).toISOString()}`;\n        } else {\n          return `${URI}/${resource}?employeeId=admin@pixomnia.com&placeId=${params.filter.place}&fromTime=${newStart}`;\n        }\n\n      case \"getRegions\":\n        return `${URI}/getRegions?employeeId=admin@pixomnia.com`;\n      case \"getInventoryLogs\":\n        return `${URI}/${resource}?employeeId=admin@pixomnia.com&regionId=${\n          params.filter.region ? params.filter.region : \"TX\"\n        }&fromTime=${new Date(dateInventoryLogs).toISOString()}`;\n      case \"getPrinterInfoLogs\":\n        return `${URI}/${resource}?employeeId=admin@pixomnia.com&printerId=rePrinter01&fromTime=${new Date(\n          dateInventoryLogs\n        ).toISOString()}`;\n      case \"getCloseShiftStatistics\":\n        return `${URI}/${resource}?employeeId=admin@pixomnia.com&regionId=${\n          params.filter.region ? params.filter.region : \"TX\"\n        }&fromTime=${new Date(dateInventoryLogs).toISOString()}`;\n      case \"getOpenShiftStatistics\":\n        return `${URI}/${resource}?employeeId=admin@pixomnia.com&regionId=${\n          params.filter.region ? params.filter.region : \"TX\"\n        }`;\n      case \"getPostcards\":\n        return `${URI}/${resource}?employeeId=admin@pixomnia.com&placeId=${params.filter.place}`;\n      case \"getAccess\":\n        return `${URI}/${resource}?employeeId=admin@pixomnia.com`;\n      case \"getStorages\":\n        return `${StorageUri}/${resource}?regionId=${params.filter.region}`;\n      case \"getStorageLogs\":\n        return `${StorageUri}/${resource}?regionId=${params.filter.region}`;\n      case \"getStorageReports\":\n        return `${StorageUri}/${resource}?regionId=${params.filter.region}`;\n      default:\n        return `${URI}/${resource}?employeeId=admin@pixomnia&regionId=${\n          params.filter.region ? params.filter.region : \"TX\"\n        }`;\n    }\n  };\n  const getNewData = (resource, getListData, params) => {\n    let new_data;\n    switch (resource) {\n      case \"getPlacesWithInfo\":\n        new_data = getListData.data.map((i, index) => {\n          let printer = i.printerIds.map((it) => {\n            return { item: it };\n          });\n          let employee = i.employeeIds.map((it) => {\n            return { item: it };\n          });\n          const printFilter = printer.filter((el) => el.item.length > 0);\n          const employeeFilter = employee.filter((el) => el.item.length > 0);\n\n          return {\n            ...i,\n            newList: printFilter,\n            id: i.regionId ? `regid${i.regionId}regid-id${index}` : index,\n            employee: employeeFilter,\n          };\n        });\n\n        return new_data;\n      case \"getPostcards\":\n        new_data = getListData.data.map((i, index) => {\n          return {\n            ...i,\n            id: i.placeId ? `regid${i.placeId}regid-id${index}` : index,\n          };\n        });\n\n        return new_data;\n\n      default:\n        new_data = getListData.data.map((i, index) => {\n          return {\n            ...i,\n            id: i.regionId ? `regid${i.regionId}regid-id${index}` : index,\n          };\n        });\n\n        return new_data;\n    }\n  };\n  const createPost = async (resource, createBody) => {\n    switch (resource) {\n      case \"uploadPostcard\":\n        const headers = {\n          headers: { \"content-type\": \"multipart/form-data\" },\n        };\n        return await axios.post(`${URI}/${resource}`, createBody, headers);\n      case \"addStorage\":\n        return axios.post(`${StorageUri}/${resource}`, createBody);\n      case \"addStorageLog\":\n        return await axios.post(`${StorageUri}/${resource}`, createBody);\n      case \"generateStorageReport\":\n        return await axios.post(`${StorageUri}/${resource}`, createBody);\n      default:\n        return await axios.post(`${URI}/${resource}`, createBody);\n    }\n  };\n  const test = async (type, resource, params) => {\n    console.log(type);\n    const body = \"employeeId=admin@pixomnia&regionId=TX\";\n\n    switch (type) {\n      case GET_LIST:\n        const link = getLink(resource, params, body);\n        const getListData = await axios.get(link);\n        console.log(getListData);\n        const newData = getNewData(resource, getListData, params);\n        console.log(newData);\n        let test;\n        if (params.pagination.perPage <= newData.length) {\n          test = newData.splice(\n            (params.pagination.page - 1) * params.pagination.perPage,\n            params.pagination.perPage\n          );\n        } else {\n          test = [...newData];\n        }\n\n        const sortedList = sort(params.sort.field, params.sort.order, test);\n        console.log(sortedList);\n        return { data: sortedList, total: getListData.data.length };\n      case CREATE:\n        const createBody = setBody(resource, params);\n        const create = await createPost(resource, createBody);\n        console.log(create);\n        let jsonParse;\n        if (resource === \"addStorage\" || resource === \"addStorageLog\") {\n          jsonParse = create.data;\n        } else {\n          jsonParse = JSON.parse(create.data.responseJson);\n        }\n        const createData = { id: 9, ...jsonParse };\n        return { data: createData };\n      case GET_ONE:\n        console.log(params);\n        if (resource === \"getStorages\") {\n          const listStorages = await axios.get(`${StorageUri}/${resource}`);\n          const newListStorage = listStorages.data.map((item, index) => {\n            return { ...item, id: `regidLAregid-id${index}` };\n          });\n          const filterAccess = newListStorage.filter(\n            (el) => el.id === params.id\n          );\n          console.log(\"dfojkdhv\");\n          console.log(filterAccess);\n          const storage = await axios.get(\n            `${StorageUri}/getStorage?storageId=${filterAccess[0].storageId}`\n          );\n\n          if (storage) {\n            console.log(\"storage\", storage);\n            return { data: { ...storage, id: params.id } };\n          }\n        }\n        if (resource === \"getAccess\") {\n          console.log(\"kjhgfdghjkl\");\n          const listAccess = await axios.get(\n            `${URI}/${resource}?employeeId=admin@pixomnia`\n          );\n\n          const newListAccess = listAccess.data.map((item, index) => {\n            return { ...item, id: index };\n          });\n          console.log(newListAccess);\n          console.log(params);\n          const filterAccess = newListAccess.filter(\n            (el) => el.id === Number(params.id)\n          );\n          console.log(filterAccess);\n          return { data: filterAccess[0] };\n        }\n        if (resource === \"getPostcards\") {\n          const regionStr = params.id.substring(\n            params.id.indexOf(\"regid\") + 5,\n            params.id.lastIndexOf(\"regid-\")\n          );\n\n          const list = await axios.get(\n            `${URI}/${resource}?employeeId=admin@pixomnia&placeId=${regionStr}`\n          );\n          const newList = list.data.map((item, index) => {\n            return { ...item, id: `regid${item.placeId}regid-id${index}` };\n          });\n          const filter = newList.filter((el) => el.id === params.id);\n\n          return { data: filter[0] };\n        }\n        if (resource === \"getPlacesWithInfo\") {\n          const regionStr = params.id.substring(\n            params.id.indexOf(\"regid\") + 5,\n            params.id.lastIndexOf(\"regid-\")\n          );\n          await dispatch(setRegion(regionStr));\n          const list = await axios.get(\n            `${URI}/${resource}?employeeId=admin@pixomnia&regionId=${regionStr}`\n          );\n          let g = list.data.map((i, index) => {\n            let printer = i.printerIds.map((it) => {\n              return { item: it };\n            });\n\n            let employee = i.employeeIds.map((it) => {\n              return { item: it };\n            });\n            const printFilter = printer.filter((el) => el.item.length > 0);\n            const employeeFilter = employee.filter((el) => el.item.length > 0);\n\n            return {\n              ...i,\n              newList: printFilter,\n              id: `regid${i.regionId}regid-id${index}`,\n              employee: employeeFilter,\n            };\n          });\n          const filter = g.filter((item) => item.id == params.id);\n\n          return await { data: filter[0] };\n        }\n        if (resource === \"getPrinters\") {\n          const regionStr = params.id.substring(\n            params.id.indexOf(\"regid\") + 5,\n            params.id.lastIndexOf(\"regid-\")\n          );\n\n          const curDate = new Date();\n          const dateInventoryLogs = curDate.setDate(curDate.getDate() - 1);\n          const printerList = await axios.get(\n            `${URI}/${resource}?employeeId=admin@pixomnia&regionId=${regionStr}`\n          );\n\n          const newArray = printerList.data.map((item, index) => {\n            return { ...item, id: `regid${item.regionId}regid-id${index}` };\n          });\n\n          const printer = newArray.filter((el) => String(el.id) === params.id);\n\n          const printerLog = await axios.get(\n            `${URI}/getPrinterInfoLogs?employeeId=admin@pixomnia.com&printerId=${\n              printer[0].printerId\n            }&fromTime=${new Date(dateInventoryLogs).toISOString()}`\n          );\n          let id = printerLog.data.map((item, index) => {\n            return { ...item, id: index };\n          });\n          const printers = { id: 0, printer: id };\n          return { data: printers };\n        }\n        if (resource === \"getEmployees\") {\n          const regionStr = params.id.substring(\n            params.id.indexOf(\"regid\") + 5,\n            params.id.lastIndexOf(\"regid-\")\n          );\n          const employee = await axios.get(\n            `${URI}/${resource}?employeeId=admin@pixomnia&regionId=${regionStr}`\n          );\n          const newArray = employee.data.map((item, index) => {\n            return { ...item, id: `regid${item.regionId}regid-id${index}` };\n          });\n\n          const filterArray = newArray.filter((el) => el.id == params.id);\n          return { data: filterArray[0] };\n        }\n\n      case UPDATE:\n        if (resource === \"getAccess\") {\n          axios.post(`${URI}/updateAccess`, params.data);\n        }\n        if (resource === \"getPostcards\") {\n          axios.post(`${URI}/updatePostcard`, {\n            placeId: params.data.placeId,\n            status: params.data.status,\n            postcardId: params.data.postcardId,\n            note: params.data.note,\n          });\n        }\n        if (resource == \"getEmployees\") {\n          axios.post(`${URI}/updateEmployee`, {\n            employee: {\n              canUseImport: params.data.canUseImport,\n              email: params.data.email,\n              firstName: params.data.firstName,\n              lastName: params.data.lastName,\n              regionId: params.data.regionId,\n            },\n          });\n        }\n        if (resource === \"getPlacesWithInfo\") {\n          if (params.meta) {\n            axios.post(`${URI}/updatePlace`, {\n              place: {\n                placeId: params.data.placeId,\n                name: params.data.name,\n                tierId: params.data.tierId,\n                hourTarget: params.data.hourTarget,\n                latitude: params.data.latitude,\n                longitude: params.data.longitude,\n                radius: params.data.radius,\n                timeZoneId: params.data.timeZoneId,\n                printerIds: params.data.printerIds,\n                employeeIds: params.data.employeeIds,\n              },\n            });\n          }\n          const regionStr = params.id.substring(\n            params.id.indexOf(\"regid\") + 5,\n            params.id.lastIndexOf(\"regid-\")\n          );\n          const udpList = await axios.get(\n            `${URI}/${resource}?employeeId=admin@pixomnia&regionId=${regionStr}`\n          );\n          let udp = udpList.data.map((i, index) => {\n            let printer = i.printerIds.map((it) => {\n              return { item: it };\n            });\n\n            let employee = i.employeeIds.map((it) => {\n              return { item: it };\n            });\n            const printFilters = printer.filter((el) => el.item.length > 0);\n            const employeeFilters = employee.filter((el) => el.item.length > 0);\n\n            return {\n              ...i,\n              newList: printFilters,\n              id: `regid${i.regionId}regid-id${index}`,\n              employee: employeeFilters,\n            };\n          });\n\n          const filters = udp.filter((item) => item.id == params.id);\n\n          const newPrinters = params.data.newList.filter(\n            (e) => filters[0].newList.findIndex((i) => i.item == e.item) === -1\n          );\n          const delPrinters = filters[0].newList.filter(\n            (e) => params.data.newList.findIndex((i) => i.item == e.item) === -1\n          );\n          const newEmployee = params.data.employee.filter(\n            (e) => filters[0].employee.findIndex((i) => i.item == e.item) === -1\n          );\n          const delEmployee = filters[0].employee.filter(\n            (e) =>\n              params.data.employee.findIndex((i) => i.item == e.item) === -1\n          );\n          if (newPrinters.length > 0) {\n            for (const item of newPrinters) {\n              await axios\n                .post(`${URI}/linkPrinterAndPlace`, {\n                  placeId: params.data.placeId,\n                  printerId: item.item,\n                })\n                .then((data) => console.log(data));\n            }\n          }\n          if (delPrinters.length > 0) {\n            for (const item of delPrinters) {\n              await axios\n                .post(`${URI}/unlinkPrinterFromPlace`, {\n                  placeId: params.data.placeId,\n                  printerId: item.item,\n                })\n                .then((data) => console.log(data));\n            }\n          }\n          if (newEmployee.length > 0) {\n            for (const item of newEmployee) {\n              await axios\n                .post(`${URI}/linkEmployeeAndPlace`, {\n                  placeId: params.data.placeId,\n                  employeeId: item.item,\n                })\n                .then((data) => console.log(data));\n            }\n          }\n          if (delEmployee.length > 0) {\n            for (const item of delEmployee) {\n              await axios\n                .post(`${URI}/unlinkEmployeeFromPlace`, {\n                  placeId: params.data.placeId,\n                  employeeId: item.item,\n                })\n                .then((data) => console.log(data));\n            }\n          }\n        }\n        return { data: params.previousData };\n\n      case DELETE:\n        if (resource === \"getPostcards\") {\n          axios.get(\n            `${URI}/deletePostcard?placeId=${params.previousData.placeId}&postcardId=${params.previousData.postcardId}`\n          );\n        } else {\n          axios.get(\n            `${URI}/deleteShift?shiftScheduleId=${params.previousData.shiftScheduleId}`\n          );\n        }\n\n        return { data: params.data };\n    }\n  };\n  const testProvider = (type, resource, params) => {\n    console.log(type);\n    console.log(resource);\n    console.log(params);\n  };\n  return (\n    <div>\n      <Admin\n        dataProvider={test}\n        layout={MyLayout}\n        loginPage={MyLogin}\n        authProvider={authProvider}\n        requireAuth\n      >\n        <Resource\n          name=\"getRegions\"\n          list={RegionList}\n          create={RegionCreate}\n          icon={SouthAmericaIcon}\n          options={{ label: \"Regions\" }}\n        />\n        <Resource\n          name=\"getPrinters\"\n          list={PrinterList}\n          create={PrinterCreate}\n          icon={LocalPrintshopIcon}\n          options={{ label: \"Printers\" }}\n          show={OnePrintInventoryList}\n        />\n        <Resource\n          name=\"getPlacesWithInfo\"\n          list={PlacesList}\n          create={PlaceCreate}\n          show={PlacesShow}\n          icon={StorefrontIcon}\n          edit={PlacesEdit}\n          options={{ label: \"Places\" }}\n        />\n        <Resource\n          name=\"getEmployees\"\n          list={EmployeesListList}\n          create={EmployeesCreate}\n          edit={EmployeesEdit}\n          icon={PeopleAltIcon}\n          options={{ label: \"Employees\" }}\n        />\n        <Resource\n          name=\"getShiftSchedule\"\n          list={ShiftScheduleListList}\n          create={ShiftScheduleListCreate}\n          icon={WorkHistoryIcon}\n          options={{ label: \"Schedule\" }}\n        />\n        <Resource\n          name=\"getInventoryLogs\"\n          list={InventoryList}\n          icon={InventoryIcon}\n          options={{ label: \"Inventory\" }}\n        />\n        <Resource\n          name=\"getCloseShiftStatistics\"\n          list={ClosedShiftStatistic}\n          icon={AcUnitIcon}\n          options={{ label: \"Closed shift statistic\" }}\n          show={EmployeeGrid}\n        />\n        <Resource\n          name=\"getOpenShiftStatistics\"\n          list={OpenShiftStatistic}\n          icon={AddReactionIcon}\n          options={{ label: \"Open shift statistic\" }}\n        />\n        <Resource\n          name=\"Schedulecalendar\"\n          list={CalendarShift}\n          options={{ label: \"Schedule calendar\" }}\n          icon={CalendarMonthIcon}\n        />\n        <Resource\n          name=\"getPostcards\"\n          list={PostcardList}\n          edit={PostCardEdit}\n          options={{ label: \"Postcards\" }}\n          create={PostcardCreate}\n          icon={ImageIcon}\n        />\n        <Resource\n          name=\"getAccess\"\n          list={AccessList}\n          create={AccessCreate}\n          edit={AccessEdit}\n          options={{ label: \"Access\" }}\n          icon={AccessibilityIcon}\n        />\n        <Resource\n          name=\"getStorages\"\n          list={StorageList}\n          create={StorageCreate}\n          show={StorageShow}\n          options={{ label: \"Storage\" }}\n          icon={WarehouseIcon}\n        />\n        <Resource\n          name=\"getStorageLogs\"\n          list={StorageLogList}\n          create={StorageLogCreate}\n          options={{ label: \"Storage log\" }}\n          icon={LocalShippingIcon}\n        />\n        <Resource\n          name=\"getStorageReports\"\n          list={StorageReport}\n          create={StorageReportCreate}\n          options={{ label: \"Storage log\" }}\n          icon={LocalShippingIcon}\n        />\n      </Admin>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}