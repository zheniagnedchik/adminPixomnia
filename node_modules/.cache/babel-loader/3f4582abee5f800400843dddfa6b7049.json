{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { useQuery, useQueryClient, hashQueryKey } from 'react-query';\nimport { useDataProvider } from './useDataProvider';\n/**\n * Call the dataProvider.getMany() method and return the resolved result\n * as well as the loading state.\n *\n * The return value updates according to the request state:\n *\n * - start: { isLoading: true, refetch }\n * - success: { data: [data from store], isLoading: false, refetch }\n * - error: { error: [error from response], isLoading: false, refetch }\n *\n * This hook will return the cached result when called a second time\n * with the same parameters, until the response arrives.\n *\n * @param {string} resource The resource name, e.g. 'posts'\n * @param {Params} params The getMany parameters { ids, meta }\n * @param {Object} options Options object to pass to the queryClient.\n * May include side effects to be executed upon success or failure, e.g. { onSuccess: () => { refresh(); } }\n *\n * @typedef Params\n * @prop params.ids The ids to get, e.g. [123, 456, 789]\n * @prop params.meta Optional meta parameters\n *\n * @returns The current request state. Destructure as { data, error, isLoading, refetch }.\n *\n * @example\n *\n * import { useGetMany } from 'react-admin';\n *\n * const PostTags = ({ post }) => {\n *     const { data, isLoading, error } = useGetMany(\n *         'tags',\n *         { ids: post.tags },\n *     );\n *     if (isLoading) { return <Loading />; }\n *     if (error) { return <p>ERROR</p>; }\n *     return <ul>{data.map(tag =>\n *         <li key={tag.id}>{tag.name}</li>\n *     )}</ul>;\n * };\n */\n\nexport var useGetMany = function (resource, params, options) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  var ids = params.ids,\n      meta = params.meta;\n  var dataProvider = useDataProvider();\n  var queryClient = useQueryClient();\n  var queryCache = queryClient.getQueryCache();\n  return useQuery([resource, 'getMany', {\n    ids: ids.map(function (id) {\n      return String(id);\n    }),\n    meta: meta\n  }], function () {\n    if (!ids || ids.length === 0) {\n      // no need to call the dataProvider\n      return Promise.resolve([]);\n    }\n\n    return dataProvider.getMany(resource, {\n      ids: ids,\n      meta: meta\n    }).then(function (_a) {\n      var data = _a.data;\n      return data;\n    });\n  }, __assign({\n    placeholderData: function () {\n      var records = ids.map(function (id) {\n        var _a, _b;\n\n        var queryHash = hashQueryKey([resource, 'getOne', {\n          id: String(id),\n          meta: meta\n        }]);\n        return (_b = (_a = queryCache.get(queryHash)) === null || _a === void 0 ? void 0 : _a.state) === null || _b === void 0 ? void 0 : _b.data;\n      });\n\n      if (records.some(function (record) {\n        return record === undefined;\n      })) {\n        return undefined;\n      } else {\n        return records;\n      }\n    },\n    onSuccess: function (data) {\n      // optimistically populate the getOne cache\n      data.forEach(function (record) {\n        queryClient.setQueryData([resource, 'getOne', {\n          id: String(record.id),\n          meta: meta\n        }], function (oldRecord) {\n          return oldRecord !== null && oldRecord !== void 0 ? oldRecord : record;\n        });\n      });\n    },\n    retry: false\n  }, options));\n};","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","useQuery","useQueryClient","hashQueryKey","useDataProvider","useGetMany","resource","params","options","ids","meta","dataProvider","queryClient","queryCache","getQueryCache","map","id","String","Promise","resolve","getMany","then","_a","data","placeholderData","records","_b","queryHash","get","state","some","record","undefined","onSuccess","forEach","setQueryData","oldRecord","retry"],"sources":["/Users/evgenijgnedcik/Documents/GitHub/adminPixomnia/node_modules/ra-core/dist/esm/dataProvider/useGetMany.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { useQuery, useQueryClient, hashQueryKey, } from 'react-query';\nimport { useDataProvider } from './useDataProvider';\n/**\n * Call the dataProvider.getMany() method and return the resolved result\n * as well as the loading state.\n *\n * The return value updates according to the request state:\n *\n * - start: { isLoading: true, refetch }\n * - success: { data: [data from store], isLoading: false, refetch }\n * - error: { error: [error from response], isLoading: false, refetch }\n *\n * This hook will return the cached result when called a second time\n * with the same parameters, until the response arrives.\n *\n * @param {string} resource The resource name, e.g. 'posts'\n * @param {Params} params The getMany parameters { ids, meta }\n * @param {Object} options Options object to pass to the queryClient.\n * May include side effects to be executed upon success or failure, e.g. { onSuccess: () => { refresh(); } }\n *\n * @typedef Params\n * @prop params.ids The ids to get, e.g. [123, 456, 789]\n * @prop params.meta Optional meta parameters\n *\n * @returns The current request state. Destructure as { data, error, isLoading, refetch }.\n *\n * @example\n *\n * import { useGetMany } from 'react-admin';\n *\n * const PostTags = ({ post }) => {\n *     const { data, isLoading, error } = useGetMany(\n *         'tags',\n *         { ids: post.tags },\n *     );\n *     if (isLoading) { return <Loading />; }\n *     if (error) { return <p>ERROR</p>; }\n *     return <ul>{data.map(tag =>\n *         <li key={tag.id}>{tag.name}</li>\n *     )}</ul>;\n * };\n */\nexport var useGetMany = function (resource, params, options) {\n    if (params === void 0) { params = {}; }\n    var ids = params.ids, meta = params.meta;\n    var dataProvider = useDataProvider();\n    var queryClient = useQueryClient();\n    var queryCache = queryClient.getQueryCache();\n    return useQuery([resource, 'getMany', { ids: ids.map(function (id) { return String(id); }), meta: meta }], function () {\n        if (!ids || ids.length === 0) {\n            // no need to call the dataProvider\n            return Promise.resolve([]);\n        }\n        return dataProvider\n            .getMany(resource, { ids: ids, meta: meta })\n            .then(function (_a) {\n            var data = _a.data;\n            return data;\n        });\n    }, __assign({ placeholderData: function () {\n            var records = ids.map(function (id) {\n                var _a, _b;\n                var queryHash = hashQueryKey([\n                    resource,\n                    'getOne',\n                    { id: String(id), meta: meta },\n                ]);\n                return (_b = (_a = queryCache.get(queryHash)) === null || _a === void 0 ? void 0 : _a.state) === null || _b === void 0 ? void 0 : _b.data;\n            });\n            if (records.some(function (record) { return record === undefined; })) {\n                return undefined;\n            }\n            else {\n                return records;\n            }\n        }, onSuccess: function (data) {\n            // optimistically populate the getOne cache\n            data.forEach(function (record) {\n                queryClient.setQueryData([resource, 'getOne', { id: String(record.id), meta: meta }], function (oldRecord) { return oldRecord !== null && oldRecord !== void 0 ? oldRecord : record; });\n            });\n        }, retry: false }, options));\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}