{"ast":null,"code":"var _jsxFileName = \"/Users/evgenijgnedcik/Documents/GitHub/adminPixomnia/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Admin, Resource, fetchUtils, GET_LIST, CREATE, GET_ONE, UPDATE, defaultTheme, useTheme, DELETE } from \"react-admin\";\nimport SouthAmericaIcon from \"@mui/icons-material/SouthAmerica\";\nimport LocalPrintshopIcon from \"@mui/icons-material/LocalPrintshop\";\nimport RegionList from \"./components/RegionList\";\nimport RegionCreate from \"./components/RegionCreate\";\nimport axios from \"axios\";\nimport PrinterList from \"./components/Printers/PrinterList\";\nimport PrinterCreate from \"./components/Printers/PrinterCreate\";\nimport PlacesList from \"./components/Places/PlacesList\";\nimport PlaceCreate from \"./components/Places/PlacesCreate\";\nimport StorefrontIcon from \"@mui/icons-material/Storefront\";\nimport PeopleAltIcon from \"@mui/icons-material/PeopleAlt\";\nimport EmployeesListList from \"./components/Employees/EmployeesList\";\nimport EmployeesCreate from \"./components/Employees/EmployeesCreate\";\nimport EmployeesEdit from \"./components/Employees/EmployeesEdit\";\nimport PrintersEdit from \"./components/Printers/PrintersEdit\";\nimport ShiftScheduleListList from \"./components/ShiftSchedule/ShiftScheduleList\";\nimport ShiftScheduleListCreate from \"./components/ShiftSchedule/ShiftScheduleCreate\";\nimport WorkHistoryIcon from \"@mui/icons-material/WorkHistory\";\nimport PlacesShow from \"./components/Places/PlacesShow\";\nimport InventoryIcon from \"@mui/icons-material/Inventory\";\nimport PrintRoundedIcon from \"@mui/icons-material/PrintRounded\";\nimport AcUnitIcon from \"@mui/icons-material/AcUnit\";\nimport { URI } from \"./URLS\";\nimport { Button } from \"@mui/material\";\nimport MyLayout from \"./components/MyLayout/Layout\";\nimport { getCurrentDate } from \"./getDate\";\nimport InventoryList from \"./components/Inventory/InventoryList\";\nimport OnePrintInventoryList from \"./components/Inventory/OnePrintInventoryList\";\nimport ClosedShiftStatistic from \"./components/ShiftStatistic/ClosedShiftStatistic\";\nimport EmployeeGrid from \"./components/ShiftStatistic/EmployeeGrid\";\nimport AddReactionIcon from \"@mui/icons-material/AddReaction\";\nimport OpenShiftStatistic from \"./components/ShiftStatistic/OpenShiftStatistic\";\nimport { sort } from \"./Utils/sort\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setRegion } from \"./reducers/regionReducer\";\nimport PlacesEdit from \"./components/Places/PlacesEdit\";\nimport CalendarShift from \"./components/ShiftSchedule/Calendar\";\nimport CalendarMonthIcon from \"@mui/icons-material/CalendarMonth\";\nimport PostcardList from \"./components/Postcards/PostcardsList\";\nimport PostcardCreate from \"./components/Postcards/PostcardCreate\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    region\n  } = useSelector(state => state.region);\n\n  const setBody = (resource, params) => {\n    switch (resource) {\n      case \"addPlace\":\n        return {\n          place: { ...params.data,\n            printerIds: [],\n            employeeIds: []\n          }\n        };\n\n      case \"addEmployee\":\n        return {\n          employee: { ...params.data\n          }\n        };\n\n      case \"addShiftSchedule\":\n        const param = {\n          placeId: params.data.placeId,\n          employeeId: params.data.employeeId,\n          startTime: getCurrentDate(params.data.startTime),\n          endTime: getCurrentDate(params.data.endTime),\n          softStartInMinutes: params.data.softStartInMinutes,\n          softEndInMinutes: params.data.softEndInMinutes,\n          shiftManager: params.data.shiftManager\n        };\n        return param;\n\n      case \"uploadPostcard\":\n        console.log(params);\n        var data = new FormData();\n        data.append(\"employeeId\", \"admin@pixomnia\");\n        data.append(\"note\", params.data.note);\n        data.append(\"file\", {\n          uri: params.data.pictures.src,\n          name: \"userProfile.jpg\",\n          type: \"image/jpg\"\n        });\n        return data;\n\n      default:\n        return params.data;\n    }\n  };\n\n  const getLink = (resource, params, body) => {\n    let dateInventoryLogs;\n    const date = getCurrentDate(new Date());\n    const curDate = new Date();\n\n    if (params.filter.day) {\n      dateInventoryLogs = curDate.setDate(curDate.getDate() - params.filter.day);\n    } else {\n      dateInventoryLogs = curDate.setDate(curDate.getDate() - 1);\n    }\n\n    console.log(\"lfkkdfl\", params);\n    console.log(date);\n\n    switch (resource) {\n      case \"getShiftSchedule\":\n        return `${URI}/${resource}?employeeId=admin@pixomnia.com&placeId=${params.filter.place}&fromTime=${date}`;\n\n      case \"getRegions\":\n        return `${URI}/getRegions?employeeId=admin@pixomnia.com`;\n\n      case \"getInventoryLogs\":\n        return `${URI}/${resource}?employeeId=admin@pixomnia.com&regionId=${params.filter.region ? params.filter.region : \"TX\"}&fromTime=${new Date(dateInventoryLogs).toISOString()}`;\n\n      case \"getPrinterInfoLogs\":\n        return `${URI}/${resource}?employeeId=admin@pixomnia.com&printerId=rePrinter01&fromTime=${new Date(dateInventoryLogs).toISOString()}`;\n\n      case \"getCloseShiftStatistics\":\n        return `${URI}/${resource}?employeeId=admin@pixomnia.com&regionId=${params.filter.region ? params.filter.region : \"TX\"}&fromTime=${new Date(dateInventoryLogs).toISOString()}`;\n\n      case \"getOpenShiftStatistics\":\n        return `${URI}/${resource}?employeeId=admin@pixomnia.com&regionId=${params.filter.region ? params.filter.region : \"TX\"}`;\n\n      case \"getPostcards\":\n        return `${URI}/${resource}?employeeId=admin@pixomnia.com&placeId=malroze`;\n        return;\n\n      default:\n        return `${URI}/${resource}?employeeId=admin@pixomnia&regionId=${params.filter.region ? params.filter.region : \"TX\"}`;\n    }\n  };\n\n  const getNewData = (resource, getListData, params) => {\n    let new_data;\n\n    switch (resource) {\n      case \"getPlacesWithInfo\":\n        new_data = getListData.data.map((i, index) => {\n          let printer = i.printerIds.map(it => {\n            return {\n              item: it\n            };\n          });\n          let employee = i.employeeIds.map(it => {\n            return {\n              item: it\n            };\n          });\n          const printFilter = printer.filter(el => el.item.length > 0);\n          const employeeFilter = employee.filter(el => el.item.length > 0);\n          return { ...i,\n            newList: printFilter,\n            id: i.regionId ? `regid${i.regionId}regid-id${index}` : index,\n            employee: employeeFilter\n          };\n        });\n        console.log(\"newData\", new_data);\n        return new_data;\n\n      default:\n        console.log(getListData);\n        new_data = getListData.data.map((i, index) => {\n          return { ...i,\n            id: i.regionId ? `regid${i.regionId}regid-id${index}` : index\n          };\n        });\n        console.log(\"newData\", new_data);\n        return new_data;\n    }\n  };\n\n  const test = async (type, resource, params) => {\n    const body = \"employeeId=admin@pixomnia&regionId=TX\";\n    console.log(\"type\", type);\n    console.log(\"resource\", resource);\n    console.log(\"params\", params);\n\n    switch (type) {\n      case GET_LIST:\n        const link = getLink(resource, params, body);\n        const getListData = await axios.get(link);\n        const newData = getNewData(resource, getListData, params);\n        let test;\n\n        if (params.pagination.perPage <= newData.length) {\n          test = newData.splice((params.pagination.page - 1) * params.pagination.perPage, params.pagination.perPage);\n        } else {\n          test = [...newData];\n        }\n\n        console.log(test);\n        const sortedList = sort(params.sort.field, params.sort.order, test);\n        return {\n          data: sortedList,\n          total: getListData.data.length\n        };\n\n      case CREATE:\n        let create;\n        const createBody = setBody(resource, params);\n\n        if (resource === \"uploadPostcard\") {\n          const headers = {\n            headers: {\n              \"content-type\": \"multipart/form-data\"\n            }\n          };\n          create = await axios.post(`${URI}/${resource}`, createBody, headers);\n        } else {\n          create = await axios.post(`${URI}/${resource}`, createBody);\n        }\n\n        const jsonParse = JSON.parse(create.data.responseJson);\n        const createData = {\n          id: 9,\n          ...jsonParse\n        };\n        return {\n          data: createData\n        };\n\n      case GET_ONE:\n        if (resource === \"getPlacesWithInfo\") {\n          const regionStr = params.id.substring(params.id.indexOf(\"regid\") + 5, params.id.lastIndexOf(\"regid-\"));\n          await dispatch(setRegion(regionStr));\n          const list = await axios.get(`${URI}/${resource}?employeeId=admin@pixomnia&regionId=${regionStr}`);\n          let g = list.data.map((i, index) => {\n            let printer = i.printerIds.map(it => {\n              return {\n                item: it\n              };\n            });\n            let employee = i.employeeIds.map(it => {\n              return {\n                item: it\n              };\n            });\n            const printFilter = printer.filter(el => el.item.length > 0);\n            const employeeFilter = employee.filter(el => el.item.length > 0);\n            console.log(printFilter);\n            return { ...i,\n              newList: printFilter,\n              id: `regid${i.regionId}regid-id${index}`,\n              employee: employeeFilter\n            };\n          });\n          const filter = g.filter(item => item.id == params.id);\n          console.log(\"g\", g);\n          return await {\n            data: filter[0]\n          };\n        }\n\n        if (resource === \"getPrinters\") {\n          const regionStr = params.id.substring(params.id.indexOf(\"regid\") + 5, params.id.lastIndexOf(\"regid-\"));\n          console.log(\"regionstr\", regionStr);\n          const curDate = new Date();\n          const dateInventoryLogs = curDate.setDate(curDate.getDate() - 1);\n          const printerList = await axios.get(`${URI}/${resource}?employeeId=admin@pixomnia&regionId=${regionStr}`);\n          console.log(\"printerList\", printerList);\n          const newArray = printerList.data.map((item, index) => {\n            return { ...item,\n              id: `regid${item.regionId}regid-id${index}`\n            };\n          });\n          console.log(newArray);\n          const printer = newArray.filter(el => String(el.id) === params.id);\n          console.log(printer);\n          const printerLog = await axios.get(`${URI}/getPrinterInfoLogs?employeeId=admin@pixomnia.com&printerId=${printer[0].printerId}&fromTime=${new Date(dateInventoryLogs).toISOString()}`);\n          let id = printerLog.data.map((item, index) => {\n            return { ...item,\n              id: index\n            };\n          });\n          const printers = {\n            id: 0,\n            printer: id\n          };\n          return {\n            data: printers\n          };\n        }\n\n        if (resource === \"getEmployees\") {\n          console.log(\"resource\", resource);\n          console.log(\"params\", params);\n          const regionStr = params.id.substring(params.id.indexOf(\"regid\") + 5, params.id.lastIndexOf(\"regid-\"));\n          const employee = await axios.get(`${URI}/${resource}?employeeId=admin@pixomnia&regionId=${regionStr}`);\n          const newArray = employee.data.map((item, index) => {\n            return { ...item,\n              id: `regid${item.regionId}regid-id${index}`\n            };\n          });\n          console.log(\"array\", newArray);\n          const filterArray = newArray.filter(el => el.id == params.id);\n          return {\n            data: filterArray[0]\n          };\n        }\n\n      case UPDATE:\n        if (resource == \"getEmployees\") {\n          axios.post(`${URI}/updateEmployee`, {\n            employee: {\n              canUseImport: params.data.canUseImport,\n              email: params.data.email,\n              firstName: params.data.firstName,\n              lastName: params.data.lastName,\n              regionId: params.data.regionId\n            }\n          });\n        } else {\n          if (params.meta) {\n            axios.post(`${URI}/updatePlace`, {\n              place: {\n                placeId: params.data.placeId,\n                name: params.data.name,\n                tierId: params.data.tierId,\n                hourTarget: params.data.hourTarget,\n                latitude: params.data.latitude,\n                longitude: params.data.longitude,\n                radius: params.data.radius,\n                timeZoneId: params.data.timeZoneId,\n                printerIds: params.data.printerIds,\n                employeeIds: params.data.employeeIds\n              }\n            });\n          }\n\n          const regionStr = params.id.substring(params.id.indexOf(\"regid\") + 5, params.id.lastIndexOf(\"regid-\"));\n          const udpList = await axios.get(`${URI}/${resource}?employeeId=admin@pixomnia&regionId=${regionStr}`);\n          let udp = udpList.data.map((i, index) => {\n            let printer = i.printerIds.map(it => {\n              return {\n                item: it\n              };\n            });\n            let employee = i.employeeIds.map(it => {\n              return {\n                item: it\n              };\n            });\n            const printFilters = printer.filter(el => el.item.length > 0);\n            const employeeFilters = employee.filter(el => el.item.length > 0);\n            return { ...i,\n              newList: printFilters,\n              id: `regid${i.regionId}regid-id${index}`,\n              employee: employeeFilters\n            };\n          });\n          console.log(udp);\n          const filters = udp.filter(item => item.id == params.id);\n          console.log(filters);\n          console.log(\"params\", params);\n          const newPrinters = params.data.newList.filter(e => filters[0].newList.findIndex(i => i.item == e.item) === -1);\n          const delPrinters = filters[0].newList.filter(e => params.data.newList.findIndex(i => i.item == e.item) === -1);\n          const newEmployee = params.data.employee.filter(e => filters[0].employee.findIndex(i => i.item == e.item) === -1);\n          const delEmployee = filters[0].employee.filter(e => params.data.employee.findIndex(i => i.item == e.item) === -1);\n\n          if (newPrinters.length > 0) {\n            for (const item of newPrinters) {\n              await axios.post(`${URI}/linkPrinterAndPlace`, {\n                placeId: params.data.placeId,\n                printerId: item.item\n              }).then(data => console.log(data));\n            }\n          }\n\n          if (delPrinters.length > 0) {\n            for (const item of delPrinters) {\n              await axios.post(`${URI}/unlinkPrinterFromPlace`, {\n                placeId: params.data.placeId,\n                printerId: item.item\n              }).then(data => console.log(data));\n            }\n          }\n\n          if (newEmployee.length > 0) {\n            for (const item of newEmployee) {\n              await axios.post(`${URI}/linkEmployeeAndPlace`, {\n                placeId: params.data.placeId,\n                employeeId: item.item\n              }).then(data => console.log(data));\n            }\n          }\n\n          if (delEmployee.length > 0) {\n            for (const item of delEmployee) {\n              await axios.post(`${URI}/unlinkEmployeeFromPlace`, {\n                placeId: params.data.placeId,\n                employeeId: item.item\n              }).then(data => console.log(data));\n            }\n          }\n        }\n\n        return {\n          data: params.data\n        };\n\n      case DELETE:\n        console.log(params);\n        axios.get(`${URI}/deleteShift?shiftScheduleId=${params.previousData.shiftScheduleId}`);\n        return {\n          data: params.data\n        };\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Admin, {\n      dataProvider: test,\n      layout: MyLayout,\n      children: [/*#__PURE__*/_jsxDEV(Resource, {\n        name: \"getRegions\",\n        list: RegionList,\n        create: RegionCreate,\n        icon: SouthAmericaIcon,\n        options: {\n          label: \"Regions\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Resource, {\n        name: \"getPrinters\",\n        list: PrinterList,\n        create: PrinterCreate,\n        icon: LocalPrintshopIcon,\n        options: {\n          label: \"Printers\"\n        },\n        show: OnePrintInventoryList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Resource, {\n        name: \"getPlacesWithInfo\",\n        list: PlacesList,\n        create: PlaceCreate,\n        show: PlacesShow,\n        icon: StorefrontIcon,\n        edit: PlacesEdit,\n        options: {\n          label: \"Places\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Resource, {\n        name: \"getEmployees\",\n        list: EmployeesListList,\n        create: EmployeesCreate,\n        edit: EmployeesEdit,\n        icon: PeopleAltIcon,\n        options: {\n          label: \"Employees\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Resource, {\n        name: \"getShiftSchedule\",\n        list: ShiftScheduleListList,\n        create: ShiftScheduleListCreate,\n        icon: WorkHistoryIcon,\n        options: {\n          label: \"Schedule\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Resource, {\n        name: \"getInventoryLogs\",\n        list: InventoryList,\n        icon: InventoryIcon,\n        options: {\n          label: \"Inventory\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Resource, {\n        name: \"getCloseShiftStatistics\",\n        list: ClosedShiftStatistic,\n        icon: AcUnitIcon,\n        options: {\n          label: \"Closed shift statistic\"\n        },\n        show: EmployeeGrid\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Resource, {\n        name: \"getOpenShiftStatistics\",\n        list: OpenShiftStatistic,\n        icon: AddReactionIcon,\n        options: {\n          label: \"Open shift statistic\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 470,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Resource, {\n        name: \"Schedulecalendar\",\n        list: CalendarShift,\n        options: {\n          label: \"Schedule calendar\"\n        } // create={ShiftScheduleListCreate}\n        ,\n        icon: CalendarMonthIcon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 476,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Resource, {\n        name: \"getPostcards\",\n        list: PostcardList,\n        options: {\n          label: \"Postcards\"\n        },\n        create: PostcardCreate,\n        icon: CalendarMonthIcon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 483,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 417,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 416,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"qq8040jub0osAxvoiPJA+LBY8No=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Admin","Resource","fetchUtils","GET_LIST","CREATE","GET_ONE","UPDATE","defaultTheme","useTheme","DELETE","SouthAmericaIcon","LocalPrintshopIcon","RegionList","RegionCreate","axios","PrinterList","PrinterCreate","PlacesList","PlaceCreate","StorefrontIcon","PeopleAltIcon","EmployeesListList","EmployeesCreate","EmployeesEdit","PrintersEdit","ShiftScheduleListList","ShiftScheduleListCreate","WorkHistoryIcon","PlacesShow","InventoryIcon","PrintRoundedIcon","AcUnitIcon","URI","Button","MyLayout","getCurrentDate","InventoryList","OnePrintInventoryList","ClosedShiftStatistic","EmployeeGrid","AddReactionIcon","OpenShiftStatistic","sort","useDispatch","useSelector","setRegion","PlacesEdit","CalendarShift","CalendarMonthIcon","PostcardList","PostcardCreate","App","dispatch","region","state","setBody","resource","params","place","data","printerIds","employeeIds","employee","param","placeId","employeeId","startTime","endTime","softStartInMinutes","softEndInMinutes","shiftManager","console","log","FormData","append","note","uri","pictures","src","name","type","getLink","body","dateInventoryLogs","date","Date","curDate","filter","day","setDate","getDate","toISOString","getNewData","getListData","new_data","map","i","index","printer","it","item","printFilter","el","length","employeeFilter","newList","id","regionId","test","link","get","newData","pagination","perPage","splice","page","sortedList","field","order","total","create","createBody","headers","post","jsonParse","JSON","parse","responseJson","createData","regionStr","substring","indexOf","lastIndexOf","list","g","printerList","newArray","String","printerLog","printerId","printers","filterArray","canUseImport","email","firstName","lastName","meta","tierId","hourTarget","latitude","longitude","radius","timeZoneId","udpList","udp","printFilters","employeeFilters","filters","newPrinters","e","findIndex","delPrinters","newEmployee","delEmployee","then","previousData","shiftScheduleId","label"],"sources":["/Users/evgenijgnedcik/Documents/GitHub/adminPixomnia/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {\n  Admin,\n  Resource,\n  fetchUtils,\n  GET_LIST,\n  CREATE,\n  GET_ONE,\n  UPDATE,\n  defaultTheme,\n  useTheme,\n  DELETE,\n} from \"react-admin\";\nimport SouthAmericaIcon from \"@mui/icons-material/SouthAmerica\";\nimport LocalPrintshopIcon from \"@mui/icons-material/LocalPrintshop\";\nimport RegionList from \"./components/RegionList\";\nimport RegionCreate from \"./components/RegionCreate\";\nimport axios from \"axios\";\nimport PrinterList from \"./components/Printers/PrinterList\";\nimport PrinterCreate from \"./components/Printers/PrinterCreate\";\nimport PlacesList from \"./components/Places/PlacesList\";\nimport PlaceCreate from \"./components/Places/PlacesCreate\";\nimport StorefrontIcon from \"@mui/icons-material/Storefront\";\nimport PeopleAltIcon from \"@mui/icons-material/PeopleAlt\";\nimport EmployeesListList from \"./components/Employees/EmployeesList\";\nimport EmployeesCreate from \"./components/Employees/EmployeesCreate\";\nimport EmployeesEdit from \"./components/Employees/EmployeesEdit\";\nimport PrintersEdit from \"./components/Printers/PrintersEdit\";\nimport ShiftScheduleListList from \"./components/ShiftSchedule/ShiftScheduleList\";\nimport ShiftScheduleListCreate from \"./components/ShiftSchedule/ShiftScheduleCreate\";\nimport WorkHistoryIcon from \"@mui/icons-material/WorkHistory\";\nimport PlacesShow from \"./components/Places/PlacesShow\";\nimport InventoryIcon from \"@mui/icons-material/Inventory\";\nimport PrintRoundedIcon from \"@mui/icons-material/PrintRounded\";\nimport AcUnitIcon from \"@mui/icons-material/AcUnit\";\nimport { URI } from \"./URLS\";\n\nimport { Button } from \"@mui/material\";\nimport MyLayout from \"./components/MyLayout/Layout\";\nimport { getCurrentDate } from \"./getDate\";\nimport InventoryList from \"./components/Inventory/InventoryList\";\nimport OnePrintInventoryList from \"./components/Inventory/OnePrintInventoryList\";\nimport ClosedShiftStatistic from \"./components/ShiftStatistic/ClosedShiftStatistic\";\nimport EmployeeGrid from \"./components/ShiftStatistic/EmployeeGrid\";\nimport AddReactionIcon from \"@mui/icons-material/AddReaction\";\nimport OpenShiftStatistic from \"./components/ShiftStatistic/OpenShiftStatistic\";\nimport { sort } from \"./Utils/sort\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setRegion } from \"./reducers/regionReducer\";\nimport PlacesEdit from \"./components/Places/PlacesEdit\";\nimport CalendarShift from \"./components/ShiftSchedule/Calendar\";\nimport CalendarMonthIcon from \"@mui/icons-material/CalendarMonth\";\nimport PostcardList from \"./components/Postcards/PostcardsList\";\nimport PostcardCreate from \"./components/Postcards/PostcardCreate\";\n\nfunction App() {\n  const dispatch = useDispatch();\n  const { region } = useSelector((state) => state.region);\n\n  const setBody = (resource, params) => {\n    switch (resource) {\n      case \"addPlace\":\n        return { place: { ...params.data, printerIds: [], employeeIds: [] } };\n      case \"addEmployee\":\n        return { employee: { ...params.data } };\n      case \"addShiftSchedule\":\n        const param = {\n          placeId: params.data.placeId,\n          employeeId: params.data.employeeId,\n          startTime: getCurrentDate(params.data.startTime),\n          endTime: getCurrentDate(params.data.endTime),\n          softStartInMinutes: params.data.softStartInMinutes,\n          softEndInMinutes: params.data.softEndInMinutes,\n          shiftManager: params.data.shiftManager,\n        };\n        return param;\n      case \"uploadPostcard\":\n        console.log(params);\n        var data = new FormData();\n        data.append(\"employeeId\", \"admin@pixomnia\");\n        data.append(\"note\", params.data.note);\n        data.append(\"file\", {\n          uri: params.data.pictures.src,\n          name: \"userProfile.jpg\",\n          type: \"image/jpg\",\n        });\n        return data;\n      default:\n        return params.data;\n    }\n  };\n\n  const getLink = (resource, params, body) => {\n    let dateInventoryLogs;\n    const date = getCurrentDate(new Date());\n    const curDate = new Date();\n    if (params.filter.day) {\n      dateInventoryLogs = curDate.setDate(\n        curDate.getDate() - params.filter.day\n      );\n    } else {\n      dateInventoryLogs = curDate.setDate(curDate.getDate() - 1);\n    }\n\n    console.log(\"lfkkdfl\", params);\n\n    console.log(date);\n    switch (resource) {\n      case \"getShiftSchedule\":\n        return `${URI}/${resource}?employeeId=admin@pixomnia.com&placeId=${params.filter.place}&fromTime=${date}`;\n      case \"getRegions\":\n        return `${URI}/getRegions?employeeId=admin@pixomnia.com`;\n      case \"getInventoryLogs\":\n        return `${URI}/${resource}?employeeId=admin@pixomnia.com&regionId=${\n          params.filter.region ? params.filter.region : \"TX\"\n        }&fromTime=${new Date(dateInventoryLogs).toISOString()}`;\n      case \"getPrinterInfoLogs\":\n        return `${URI}/${resource}?employeeId=admin@pixomnia.com&printerId=rePrinter01&fromTime=${new Date(\n          dateInventoryLogs\n        ).toISOString()}`;\n      case \"getCloseShiftStatistics\":\n        return `${URI}/${resource}?employeeId=admin@pixomnia.com&regionId=${\n          params.filter.region ? params.filter.region : \"TX\"\n        }&fromTime=${new Date(dateInventoryLogs).toISOString()}`;\n      case \"getOpenShiftStatistics\":\n        return `${URI}/${resource}?employeeId=admin@pixomnia.com&regionId=${\n          params.filter.region ? params.filter.region : \"TX\"\n        }`;\n      case \"getPostcards\":\n        return `${URI}/${resource}?employeeId=admin@pixomnia.com&placeId=malroze`;\n        return;\n      default:\n        return `${URI}/${resource}?employeeId=admin@pixomnia&regionId=${\n          params.filter.region ? params.filter.region : \"TX\"\n        }`;\n    }\n  };\n  const getNewData = (resource, getListData, params) => {\n    let new_data;\n    switch (resource) {\n      case \"getPlacesWithInfo\":\n        new_data = getListData.data.map((i, index) => {\n          let printer = i.printerIds.map((it) => {\n            return { item: it };\n          });\n          let employee = i.employeeIds.map((it) => {\n            return { item: it };\n          });\n          const printFilter = printer.filter((el) => el.item.length > 0);\n          const employeeFilter = employee.filter((el) => el.item.length > 0);\n\n          return {\n            ...i,\n            newList: printFilter,\n            id: i.regionId ? `regid${i.regionId}regid-id${index}` : index,\n            employee: employeeFilter,\n          };\n        });\n        console.log(\"newData\", new_data);\n        return new_data;\n\n      default:\n        console.log(getListData);\n        new_data = getListData.data.map((i, index) => {\n          return {\n            ...i,\n            id: i.regionId ? `regid${i.regionId}regid-id${index}` : index,\n          };\n        });\n        console.log(\"newData\", new_data);\n        return new_data;\n    }\n  };\n\n  const test = async (type, resource, params) => {\n    const body = \"employeeId=admin@pixomnia&regionId=TX\";\n    console.log(\"type\", type);\n    console.log(\"resource\", resource);\n    console.log(\"params\", params);\n    switch (type) {\n      case GET_LIST:\n        const link = getLink(resource, params, body);\n        const getListData = await axios.get(link);\n        const newData = getNewData(resource, getListData, params);\n        let test;\n        if (params.pagination.perPage <= newData.length) {\n          test = newData.splice(\n            (params.pagination.page - 1) * params.pagination.perPage,\n            params.pagination.perPage\n          );\n        } else {\n          test = [...newData];\n        }\n        console.log(test);\n        const sortedList = sort(params.sort.field, params.sort.order, test);\n        return { data: sortedList, total: getListData.data.length };\n      case CREATE:\n        let create;\n\n        const createBody = setBody(resource, params);\n        if (resource === \"uploadPostcard\") {\n          const headers = {\n            headers: { \"content-type\": \"multipart/form-data\" },\n          };\n          create = await axios.post(`${URI}/${resource}`, createBody, headers);\n        } else {\n          create = await axios.post(`${URI}/${resource}`, createBody);\n        }\n\n        const jsonParse = JSON.parse(create.data.responseJson);\n        const createData = { id: 9, ...jsonParse };\n        return { data: createData };\n      case GET_ONE:\n        if (resource === \"getPlacesWithInfo\") {\n          const regionStr = params.id.substring(\n            params.id.indexOf(\"regid\") + 5,\n            params.id.lastIndexOf(\"regid-\")\n          );\n          await dispatch(setRegion(regionStr));\n          const list = await axios.get(\n            `${URI}/${resource}?employeeId=admin@pixomnia&regionId=${regionStr}`\n          );\n          let g = list.data.map((i, index) => {\n            let printer = i.printerIds.map((it) => {\n              return { item: it };\n            });\n\n            let employee = i.employeeIds.map((it) => {\n              return { item: it };\n            });\n            const printFilter = printer.filter((el) => el.item.length > 0);\n            const employeeFilter = employee.filter((el) => el.item.length > 0);\n            console.log(printFilter);\n            return {\n              ...i,\n              newList: printFilter,\n              id: `regid${i.regionId}regid-id${index}`,\n              employee: employeeFilter,\n            };\n          });\n          const filter = g.filter((item) => item.id == params.id);\n          console.log(\"g\", g);\n          return await { data: filter[0] };\n        }\n        if (resource === \"getPrinters\") {\n          const regionStr = params.id.substring(\n            params.id.indexOf(\"regid\") + 5,\n            params.id.lastIndexOf(\"regid-\")\n          );\n          console.log(\"regionstr\", regionStr);\n          const curDate = new Date();\n          const dateInventoryLogs = curDate.setDate(curDate.getDate() - 1);\n          const printerList = await axios.get(\n            `${URI}/${resource}?employeeId=admin@pixomnia&regionId=${regionStr}`\n          );\n          console.log(\"printerList\", printerList);\n          const newArray = printerList.data.map((item, index) => {\n            return { ...item, id: `regid${item.regionId}regid-id${index}` };\n          });\n          console.log(newArray);\n\n          const printer = newArray.filter((el) => String(el.id) === params.id);\n          console.log(printer);\n          const printerLog = await axios.get(\n            `${URI}/getPrinterInfoLogs?employeeId=admin@pixomnia.com&printerId=${\n              printer[0].printerId\n            }&fromTime=${new Date(dateInventoryLogs).toISOString()}`\n          );\n          let id = printerLog.data.map((item, index) => {\n            return { ...item, id: index };\n          });\n          const printers = { id: 0, printer: id };\n          return { data: printers };\n        }\n        if (resource === \"getEmployees\") {\n          console.log(\"resource\", resource);\n          console.log(\"params\", params);\n          const regionStr = params.id.substring(\n            params.id.indexOf(\"regid\") + 5,\n            params.id.lastIndexOf(\"regid-\")\n          );\n          const employee = await axios.get(\n            `${URI}/${resource}?employeeId=admin@pixomnia&regionId=${regionStr}`\n          );\n          const newArray = employee.data.map((item, index) => {\n            return { ...item, id: `regid${item.regionId}regid-id${index}` };\n          });\n          console.log(\"array\", newArray);\n          const filterArray = newArray.filter((el) => el.id == params.id);\n          return { data: filterArray[0] };\n        }\n\n      case UPDATE:\n        if (resource == \"getEmployees\") {\n          axios.post(`${URI}/updateEmployee`, {\n            employee: {\n              canUseImport: params.data.canUseImport,\n              email: params.data.email,\n              firstName: params.data.firstName,\n              lastName: params.data.lastName,\n              regionId: params.data.regionId,\n            },\n          });\n        } else {\n          if (params.meta) {\n            axios.post(`${URI}/updatePlace`, {\n              place: {\n                placeId: params.data.placeId,\n                name: params.data.name,\n                tierId: params.data.tierId,\n                hourTarget: params.data.hourTarget,\n                latitude: params.data.latitude,\n                longitude: params.data.longitude,\n                radius: params.data.radius,\n                timeZoneId: params.data.timeZoneId,\n                printerIds: params.data.printerIds,\n                employeeIds: params.data.employeeIds,\n              },\n            });\n          }\n          const regionStr = params.id.substring(\n            params.id.indexOf(\"regid\") + 5,\n            params.id.lastIndexOf(\"regid-\")\n          );\n          const udpList = await axios.get(\n            `${URI}/${resource}?employeeId=admin@pixomnia&regionId=${regionStr}`\n          );\n          let udp = udpList.data.map((i, index) => {\n            let printer = i.printerIds.map((it) => {\n              return { item: it };\n            });\n\n            let employee = i.employeeIds.map((it) => {\n              return { item: it };\n            });\n            const printFilters = printer.filter((el) => el.item.length > 0);\n            const employeeFilters = employee.filter((el) => el.item.length > 0);\n\n            return {\n              ...i,\n              newList: printFilters,\n              id: `regid${i.regionId}regid-id${index}`,\n              employee: employeeFilters,\n            };\n          });\n          console.log(udp);\n          const filters = udp.filter((item) => item.id == params.id);\n          console.log(filters);\n          console.log(\"params\", params);\n          const newPrinters = params.data.newList.filter(\n            (e) => filters[0].newList.findIndex((i) => i.item == e.item) === -1\n          );\n          const delPrinters = filters[0].newList.filter(\n            (e) => params.data.newList.findIndex((i) => i.item == e.item) === -1\n          );\n          const newEmployee = params.data.employee.filter(\n            (e) => filters[0].employee.findIndex((i) => i.item == e.item) === -1\n          );\n          const delEmployee = filters[0].employee.filter(\n            (e) =>\n              params.data.employee.findIndex((i) => i.item == e.item) === -1\n          );\n          if (newPrinters.length > 0) {\n            for (const item of newPrinters) {\n              await axios\n                .post(`${URI}/linkPrinterAndPlace`, {\n                  placeId: params.data.placeId,\n                  printerId: item.item,\n                })\n                .then((data) => console.log(data));\n            }\n          }\n          if (delPrinters.length > 0) {\n            for (const item of delPrinters) {\n              await axios\n                .post(`${URI}/unlinkPrinterFromPlace`, {\n                  placeId: params.data.placeId,\n                  printerId: item.item,\n                })\n                .then((data) => console.log(data));\n            }\n          }\n          if (newEmployee.length > 0) {\n            for (const item of newEmployee) {\n              await axios\n                .post(`${URI}/linkEmployeeAndPlace`, {\n                  placeId: params.data.placeId,\n                  employeeId: item.item,\n                })\n                .then((data) => console.log(data));\n            }\n          }\n          if (delEmployee.length > 0) {\n            for (const item of delEmployee) {\n              await axios\n                .post(`${URI}/unlinkEmployeeFromPlace`, {\n                  placeId: params.data.placeId,\n                  employeeId: item.item,\n                })\n                .then((data) => console.log(data));\n            }\n          }\n        }\n        return { data: params.data };\n\n      case DELETE:\n        console.log(params);\n        axios.get(\n          `${URI}/deleteShift?shiftScheduleId=${params.previousData.shiftScheduleId}`\n        );\n        return { data: params.data };\n    }\n  };\n\n  return (\n    <div>\n      <Admin dataProvider={test} layout={MyLayout}>\n        <Resource\n          name=\"getRegions\"\n          list={RegionList}\n          create={RegionCreate}\n          icon={SouthAmericaIcon}\n          options={{ label: \"Regions\" }}\n        />\n        <Resource\n          name=\"getPrinters\"\n          list={PrinterList}\n          create={PrinterCreate}\n          icon={LocalPrintshopIcon}\n          options={{ label: \"Printers\" }}\n          show={OnePrintInventoryList}\n        />\n        <Resource\n          name=\"getPlacesWithInfo\"\n          list={PlacesList}\n          create={PlaceCreate}\n          show={PlacesShow}\n          icon={StorefrontIcon}\n          edit={PlacesEdit}\n          options={{ label: \"Places\" }}\n        />\n        <Resource\n          name=\"getEmployees\"\n          list={EmployeesListList}\n          create={EmployeesCreate}\n          edit={EmployeesEdit}\n          icon={PeopleAltIcon}\n          options={{ label: \"Employees\" }}\n        />\n        <Resource\n          name=\"getShiftSchedule\"\n          list={ShiftScheduleListList}\n          create={ShiftScheduleListCreate}\n          icon={WorkHistoryIcon}\n          options={{ label: \"Schedule\" }}\n        />\n        <Resource\n          name=\"getInventoryLogs\"\n          list={InventoryList}\n          icon={InventoryIcon}\n          options={{ label: \"Inventory\" }}\n        />\n        <Resource\n          name=\"getCloseShiftStatistics\"\n          list={ClosedShiftStatistic}\n          icon={AcUnitIcon}\n          options={{ label: \"Closed shift statistic\" }}\n          show={EmployeeGrid}\n        />\n        <Resource\n          name=\"getOpenShiftStatistics\"\n          list={OpenShiftStatistic}\n          icon={AddReactionIcon}\n          options={{ label: \"Open shift statistic\" }}\n        />\n        <Resource\n          name=\"Schedulecalendar\"\n          list={CalendarShift}\n          options={{ label: \"Schedule calendar\" }}\n          // create={ShiftScheduleListCreate}\n          icon={CalendarMonthIcon}\n        />\n        <Resource\n          name=\"getPostcards\"\n          list={PostcardList}\n          options={{ label: \"Postcards\" }}\n          create={PostcardCreate}\n          icon={CalendarMonthIcon}\n        />\n      </Admin>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}