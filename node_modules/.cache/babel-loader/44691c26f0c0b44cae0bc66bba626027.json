{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport { useEffect } from 'react';\nimport clsx from 'clsx';\nimport { useEditor, EditorContent } from '@tiptap/react';\nimport StarterKit from '@tiptap/starter-kit';\nimport Underline from '@tiptap/extension-underline';\nimport Link from '@tiptap/extension-link';\nimport TextAlign from '@tiptap/extension-text-align';\nimport Image from '@tiptap/extension-image';\nimport TextStyle from '@tiptap/extension-text-style';\nimport { Color } from '@tiptap/extension-color';\nimport Highlight from '@tiptap/extension-highlight';\nimport { FormHelperText } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport { useInput, useResourceContext } from 'ra-core';\nimport { InputHelperText, Labeled } from 'ra-ui-materialui';\nimport { TiptapEditorProvider } from './TiptapEditorProvider';\nimport { RichTextInputToolbar } from './RichTextInputToolbar';\n/**\n * A rich text editor for the react-admin that is accessible and supports translations. Based on [Tiptap](https://www.tiptap.dev/).\n * @param props The input props. Accept all common react-admin input props.\n * @param {EditorOptions} props.editorOptions The options to pass to the Tiptap editor.\n * @param {ReactNode} props.toolbar The toolbar containing the editors commands.\n *\n * @example <caption>Customizing the editors options</caption>\n * import { RichTextInput, RichTextInputToolbar } from 'ra-input-rich-text';\n * const MyRichTextInput = (props) => (\n *     <RichTextInput\n *         toolbar={<RichTextInputToolbar size=\"large\" />}\n *         label=\"Body\"\n *         source=\"body\"\n *         {...props}\n *     />\n * );\n *\n * @example <caption>Customizing the toolbar size</caption>\n * import { RichTextInput, RichTextInputToolbar } from 'ra-input-rich-text';\n * const MyRichTextInput = (props) => (\n *     <RichTextInput\n *         toolbar={<RichTextInputToolbar size=\"large\" />}\n *         label=\"Body\"\n *         source=\"body\"\n *         {...props}\n *     />\n * );\n *\n * @example <caption>Customizing the toolbar commands</caption>\n * import { RichTextInput, RichTextInputToolbar } from 'ra-input-rich-text';\n * const MyRichTextInput = ({ size, ...props }) => (\n *     <RichTextInput\n *         toolbar={(\n *             <RichTextInputToolbar>\n *                 <LevelSelect size={size} />\n *                 <FormatButtons size={size} />\n *                 <ColorButtons size={size} />\n *                 <ListButtons size={size} />\n *                 <LinkButtons size={size} />\n *                 <ImageButtons size={size} />\n *                 <QuoteButtons size={size} />\n *                 <ClearButtons size={size} />\n *             </RichTextInputToolbar>\n *         )}\n *         label=\"Body\"\n *         source=\"body\"\n *         {...props}\n *     />\n * );\n */\n\nexport var RichTextInput = function (props) {\n  var className = props.className,\n      _a = props.defaultValue,\n      defaultValue = _a === void 0 ? '' : _a,\n      _b = props.disabled,\n      disabled = _b === void 0 ? false : _b,\n      _c = props.editorOptions,\n      editorOptions = _c === void 0 ? DefaultEditorOptions : _c,\n      fullWidth = props.fullWidth,\n      helperText = props.helperText,\n      label = props.label,\n      _d = props.readOnly,\n      readOnly = _d === void 0 ? false : _d,\n      source = props.source,\n      toolbar = props.toolbar;\n  var resource = useResourceContext(props);\n\n  var _e = useInput(__assign(__assign({}, props), {\n    source: source,\n    defaultValue: defaultValue\n  })),\n      id = _e.id,\n      field = _e.field,\n      isRequired = _e.isRequired,\n      fieldState = _e.fieldState,\n      isSubmitted = _e.formState.isSubmitted;\n\n  var editor = useEditor(__assign(__assign({}, editorOptions), {\n    editable: !disabled && !readOnly,\n    content: field.value,\n    editorProps: {\n      attributes: {\n        id: id\n      }\n    }\n  }));\n  var error = fieldState.error,\n      invalid = fieldState.invalid,\n      isTouched = fieldState.isTouched;\n  useEffect(function () {\n    if (!editor) return;\n    editor.setOptions({\n      editable: !disabled && !readOnly,\n      editorProps: {\n        attributes: {\n          id: id\n        }\n      }\n    });\n  }, [disabled, editor, readOnly, id]);\n  useEffect(function () {\n    if (!editor) {\n      return;\n    }\n\n    var handleEditorUpdate = function () {\n      if (editor.isEmpty) {\n        field.onChange('');\n        field.onBlur();\n        return;\n      }\n\n      var html = editor.getHTML();\n      field.onChange(html);\n      field.onBlur();\n    };\n\n    editor.on('update', handleEditorUpdate);\n    return function () {\n      editor.off('update', handleEditorUpdate);\n    };\n  }, [editor, field]);\n  return React.createElement(Labeled, {\n    isRequired: isRequired,\n    label: label,\n    id: \"\".concat(id, \"-label\"),\n    color: (fieldState === null || fieldState === void 0 ? void 0 : fieldState.invalid) ? 'error' : undefined,\n    source: source,\n    resource: resource,\n    fullWidth: fullWidth\n  }, React.createElement(RichTextInputContent, {\n    className: clsx('ra-input', \"ra-input-\".concat(source), className),\n    editor: editor,\n    error: error,\n    helperText: helperText,\n    id: id,\n    isTouched: isTouched,\n    isSubmitted: isSubmitted,\n    invalid: invalid,\n    toolbar: toolbar || React.createElement(RichTextInputToolbar, null)\n  }));\n};\n/**\n * Extracted in a separate component so that we can remove fullWidth from the props injected by Labeled\n * and avoid warnings about unknown props on Root.\n */\n\nvar RichTextInputContent = function (_a) {\n  var className = _a.className,\n      editor = _a.editor,\n      error = _a.error,\n      fullWidth = _a.fullWidth,\n      helperText = _a.helperText,\n      id = _a.id,\n      isTouched = _a.isTouched,\n      isSubmitted = _a.isSubmitted,\n      invalid = _a.invalid,\n      toolbar = _a.toolbar;\n  return React.createElement(Root, {\n    className: className\n  }, React.createElement(TiptapEditorProvider, {\n    value: editor\n  }, toolbar, React.createElement(EditorContent, {\n    \"aria-labelledby\": \"\".concat(id, \"-label\"),\n    className: classes.editorContent,\n    editor: editor\n  })), React.createElement(FormHelperText, {\n    className: (isTouched || isSubmitted) && invalid ? 'ra-rich-text-input-error' : '',\n    error: (isTouched || isSubmitted) && invalid\n  }, React.createElement(InputHelperText, {\n    touched: isTouched || isSubmitted,\n    error: error === null || error === void 0 ? void 0 : error.message,\n    helperText: helperText\n  })));\n};\n\nexport var DefaultEditorOptions = {\n  extensions: [StarterKit, Underline, Link, TextAlign.configure({\n    types: ['heading', 'paragraph']\n  }), Image.configure({\n    inline: true\n  }), TextStyle, Color, Highlight.configure({\n    multicolor: true\n  })]\n};\nvar PREFIX = 'RaRichTextInput';\nvar classes = {\n  editorContent: \"\".concat(PREFIX, \"-editorContent\")\n};\nvar Root = styled('div', {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var _b;\n\n  var theme = _a.theme;\n  return _b = {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center'\n  }, _b[\"& .\".concat(classes.editorContent)] = {\n    width: '100%',\n    '& .ProseMirror': {\n      backgroundColor: theme.palette.background.default,\n      borderColor: theme.palette.mode === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)',\n      borderRadius: theme.shape.borderRadius,\n      borderStyle: 'solid',\n      borderWidth: '1px',\n      padding: theme.spacing(1),\n      '&[contenteditable=\"false\"], &[contenteditable=\"false\"]:hover, &[contenteditable=\"false\"]:focus': {\n        backgroundColor: theme.palette.action.disabledBackground\n      },\n      '&:hover': {\n        backgroundColor: theme.palette.action.hover\n      },\n      '&:focus': {\n        backgroundColor: theme.palette.background.default\n      },\n      '& p': {\n        margin: '0 0 1em 0',\n        '&:last-child': {\n          marginBottom: 0\n        }\n      }\n    }\n  }, _b;\n});","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","React","useEffect","clsx","useEditor","EditorContent","StarterKit","Underline","Link","TextAlign","Image","TextStyle","Color","Highlight","FormHelperText","styled","useInput","useResourceContext","InputHelperText","Labeled","TiptapEditorProvider","RichTextInputToolbar","RichTextInput","props","className","_a","defaultValue","_b","disabled","_c","editorOptions","DefaultEditorOptions","fullWidth","helperText","label","_d","readOnly","source","toolbar","resource","_e","id","field","isRequired","fieldState","isSubmitted","formState","editor","editable","content","value","editorProps","attributes","error","invalid","isTouched","setOptions","handleEditorUpdate","isEmpty","onChange","onBlur","html","getHTML","on","off","createElement","concat","color","undefined","RichTextInputContent","Root","classes","editorContent","touched","message","extensions","configure","types","inline","multicolor","PREFIX","name","overridesResolver","styles","root","theme","display","flexDirection","alignItems","width","backgroundColor","palette","background","default","borderColor","mode","borderRadius","shape","borderStyle","borderWidth","padding","spacing","action","disabledBackground","hover","margin","marginBottom"],"sources":["/Users/evgenijgnedcik/Documents/GitHub/adminPixomnia/node_modules/ra-input-rich-text/dist/esm/RichTextInput.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport * as React from 'react';\nimport { useEffect } from 'react';\nimport clsx from 'clsx';\nimport { useEditor, EditorContent } from '@tiptap/react';\nimport StarterKit from '@tiptap/starter-kit';\nimport Underline from '@tiptap/extension-underline';\nimport Link from '@tiptap/extension-link';\nimport TextAlign from '@tiptap/extension-text-align';\nimport Image from '@tiptap/extension-image';\nimport TextStyle from '@tiptap/extension-text-style';\nimport { Color } from '@tiptap/extension-color';\nimport Highlight from '@tiptap/extension-highlight';\nimport { FormHelperText } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport { useInput, useResourceContext } from 'ra-core';\nimport { InputHelperText, Labeled, } from 'ra-ui-materialui';\nimport { TiptapEditorProvider } from './TiptapEditorProvider';\nimport { RichTextInputToolbar } from './RichTextInputToolbar';\n/**\n * A rich text editor for the react-admin that is accessible and supports translations. Based on [Tiptap](https://www.tiptap.dev/).\n * @param props The input props. Accept all common react-admin input props.\n * @param {EditorOptions} props.editorOptions The options to pass to the Tiptap editor.\n * @param {ReactNode} props.toolbar The toolbar containing the editors commands.\n *\n * @example <caption>Customizing the editors options</caption>\n * import { RichTextInput, RichTextInputToolbar } from 'ra-input-rich-text';\n * const MyRichTextInput = (props) => (\n *     <RichTextInput\n *         toolbar={<RichTextInputToolbar size=\"large\" />}\n *         label=\"Body\"\n *         source=\"body\"\n *         {...props}\n *     />\n * );\n *\n * @example <caption>Customizing the toolbar size</caption>\n * import { RichTextInput, RichTextInputToolbar } from 'ra-input-rich-text';\n * const MyRichTextInput = (props) => (\n *     <RichTextInput\n *         toolbar={<RichTextInputToolbar size=\"large\" />}\n *         label=\"Body\"\n *         source=\"body\"\n *         {...props}\n *     />\n * );\n *\n * @example <caption>Customizing the toolbar commands</caption>\n * import { RichTextInput, RichTextInputToolbar } from 'ra-input-rich-text';\n * const MyRichTextInput = ({ size, ...props }) => (\n *     <RichTextInput\n *         toolbar={(\n *             <RichTextInputToolbar>\n *                 <LevelSelect size={size} />\n *                 <FormatButtons size={size} />\n *                 <ColorButtons size={size} />\n *                 <ListButtons size={size} />\n *                 <LinkButtons size={size} />\n *                 <ImageButtons size={size} />\n *                 <QuoteButtons size={size} />\n *                 <ClearButtons size={size} />\n *             </RichTextInputToolbar>\n *         )}\n *         label=\"Body\"\n *         source=\"body\"\n *         {...props}\n *     />\n * );\n */\nexport var RichTextInput = function (props) {\n    var className = props.className, _a = props.defaultValue, defaultValue = _a === void 0 ? '' : _a, _b = props.disabled, disabled = _b === void 0 ? false : _b, _c = props.editorOptions, editorOptions = _c === void 0 ? DefaultEditorOptions : _c, fullWidth = props.fullWidth, helperText = props.helperText, label = props.label, _d = props.readOnly, readOnly = _d === void 0 ? false : _d, source = props.source, toolbar = props.toolbar;\n    var resource = useResourceContext(props);\n    var _e = useInput(__assign(__assign({}, props), { source: source, defaultValue: defaultValue })), id = _e.id, field = _e.field, isRequired = _e.isRequired, fieldState = _e.fieldState, isSubmitted = _e.formState.isSubmitted;\n    var editor = useEditor(__assign(__assign({}, editorOptions), { editable: !disabled && !readOnly, content: field.value, editorProps: {\n            attributes: {\n                id: id,\n            },\n        } }));\n    var error = fieldState.error, invalid = fieldState.invalid, isTouched = fieldState.isTouched;\n    useEffect(function () {\n        if (!editor)\n            return;\n        editor.setOptions({\n            editable: !disabled && !readOnly,\n            editorProps: {\n                attributes: {\n                    id: id,\n                },\n            },\n        });\n    }, [disabled, editor, readOnly, id]);\n    useEffect(function () {\n        if (!editor) {\n            return;\n        }\n        var handleEditorUpdate = function () {\n            if (editor.isEmpty) {\n                field.onChange('');\n                field.onBlur();\n                return;\n            }\n            var html = editor.getHTML();\n            field.onChange(html);\n            field.onBlur();\n        };\n        editor.on('update', handleEditorUpdate);\n        return function () {\n            editor.off('update', handleEditorUpdate);\n        };\n    }, [editor, field]);\n    return (React.createElement(Labeled, { isRequired: isRequired, label: label, id: \"\".concat(id, \"-label\"), color: (fieldState === null || fieldState === void 0 ? void 0 : fieldState.invalid) ? 'error' : undefined, source: source, resource: resource, fullWidth: fullWidth },\n        React.createElement(RichTextInputContent, { className: clsx('ra-input', \"ra-input-\".concat(source), className), editor: editor, error: error, helperText: helperText, id: id, isTouched: isTouched, isSubmitted: isSubmitted, invalid: invalid, toolbar: toolbar || React.createElement(RichTextInputToolbar, null) })));\n};\n/**\n * Extracted in a separate component so that we can remove fullWidth from the props injected by Labeled\n * and avoid warnings about unknown props on Root.\n */\nvar RichTextInputContent = function (_a) {\n    var className = _a.className, editor = _a.editor, error = _a.error, fullWidth = _a.fullWidth, helperText = _a.helperText, id = _a.id, isTouched = _a.isTouched, isSubmitted = _a.isSubmitted, invalid = _a.invalid, toolbar = _a.toolbar;\n    return (React.createElement(Root, { className: className },\n        React.createElement(TiptapEditorProvider, { value: editor },\n            toolbar,\n            React.createElement(EditorContent, { \"aria-labelledby\": \"\".concat(id, \"-label\"), className: classes.editorContent, editor: editor })),\n        React.createElement(FormHelperText, { className: (isTouched || isSubmitted) && invalid\n                ? 'ra-rich-text-input-error'\n                : '', error: (isTouched || isSubmitted) && invalid },\n            React.createElement(InputHelperText, { touched: isTouched || isSubmitted, error: error === null || error === void 0 ? void 0 : error.message, helperText: helperText }))));\n};\nexport var DefaultEditorOptions = {\n    extensions: [\n        StarterKit,\n        Underline,\n        Link,\n        TextAlign.configure({\n            types: ['heading', 'paragraph'],\n        }),\n        Image.configure({\n            inline: true,\n        }),\n        TextStyle,\n        Color,\n        Highlight.configure({ multicolor: true }),\n    ],\n};\nvar PREFIX = 'RaRichTextInput';\nvar classes = {\n    editorContent: \"\".concat(PREFIX, \"-editorContent\"),\n};\nvar Root = styled('div', {\n    name: PREFIX,\n    overridesResolver: function (props, styles) { return styles.root; },\n})(function (_a) {\n    var _b;\n    var theme = _a.theme;\n    return (_b = {\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center'\n        },\n        _b[\"& .\".concat(classes.editorContent)] = {\n            width: '100%',\n            '& .ProseMirror': {\n                backgroundColor: theme.palette.background.default,\n                borderColor: theme.palette.mode === 'light'\n                    ? 'rgba(0, 0, 0, 0.23)'\n                    : 'rgba(255, 255, 255, 0.23)',\n                borderRadius: theme.shape.borderRadius,\n                borderStyle: 'solid',\n                borderWidth: '1px',\n                padding: theme.spacing(1),\n                '&[contenteditable=\"false\"], &[contenteditable=\"false\"]:hover, &[contenteditable=\"false\"]:focus': {\n                    backgroundColor: theme.palette.action.disabledBackground,\n                },\n                '&:hover': {\n                    backgroundColor: theme.palette.action.hover,\n                },\n                '&:focus': {\n                    backgroundColor: theme.palette.background.default,\n                },\n                '& p': {\n                    margin: '0 0 1em 0',\n                    '&:last-child': {\n                        marginBottom: 0,\n                    },\n                },\n            },\n        },\n        _b);\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}