{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { ListContextProvider, useListContext, useReferenceArrayFieldController, ResourceContextProvider, useRecordContext } from 'ra-core';\nimport { fieldPropTypes } from './types';\nimport { LinearProgress } from '../layout';\nimport { styled } from '@mui/material/styles';\n/**\n * A container component that fetches records from another resource specified\n * by an array of *ids* in current record.\n *\n * You must define the fields to be passed to the iterator component as children.\n *\n * @example Display all the products of the current order as datagrid\n * // order = {\n * //   id: 123,\n * //   product_ids: [456, 457, 458],\n * // }\n * <ReferenceArrayField label=\"Products\" reference=\"products\" source=\"product_ids\">\n *     <Datagrid>\n *         <TextField source=\"id\" />\n *         <TextField source=\"description\" />\n *         <NumberField source=\"price\" options={{ style: 'currency', currency: 'USD' }} />\n *         <EditButton />\n *     </Datagrid>\n * </ReferenceArrayField>\n *\n * @example Display all the categories of the current product as a list of chips\n * // product = {\n * //   id: 456,\n * //   category_ids: [11, 22, 33],\n * // }\n * <ReferenceArrayField label=\"Categories\" reference=\"categories\" source=\"category_ids\">\n *     <SingleFieldList>\n *         <ChipField source=\"name\" />\n *     </SingleFieldList>\n * </ReferenceArrayField>\n *\n * By default, restricts the displayed values to 1000. You can extend this limit\n * by setting the `perPage` prop.\n *\n * @example\n * <ReferenceArrayField perPage={10} reference=\"categories\" source=\"category_ids\">\n *    ...\n * </ReferenceArrayField>\n *\n * By default, the field displays the results in the order in which they are referenced\n * (i.e. in the order of the list of ids). You can change this order\n * by setting the `sort` prop (an object with `field` and `order` properties).\n *\n * @example\n * <ReferenceArrayField sort={{ field: 'name', order: 'ASC' }} reference=\"categories\" source=\"category_ids\">\n *    ...\n * </ReferenceArrayField>\n *\n * Also, you can filter the results to display only a subset of values. Use the\n * `filter` prop for that.\n *\n * @example\n * <ReferenceArrayField filter={{ is_published: true }} reference=\"categories\" source=\"category_ids\">\n *    ...\n * </ReferenceArrayField>\n */\n\nexport var ReferenceArrayField = function (props) {\n  var filter = props.filter,\n      _a = props.page,\n      page = _a === void 0 ? 1 : _a,\n      perPage = props.perPage,\n      reference = props.reference,\n      resource = props.resource,\n      sort = props.sort,\n      source = props.source;\n  var record = useRecordContext(props);\n  var controllerProps = useReferenceArrayFieldController({\n    filter: filter,\n    page: page,\n    perPage: perPage,\n    record: record,\n    reference: reference,\n    resource: resource,\n    sort: sort,\n    source: source\n  });\n  return React.createElement(ResourceContextProvider, {\n    value: reference\n  }, React.createElement(ListContextProvider, {\n    value: controllerProps\n  }, React.createElement(PureReferenceArrayFieldView, __assign({}, props))));\n};\nReferenceArrayField.propTypes = __assign(__assign({}, fieldPropTypes), {\n  className: PropTypes.string,\n  children: PropTypes.node.isRequired,\n  label: fieldPropTypes.label,\n  record: PropTypes.any,\n  reference: PropTypes.string.isRequired,\n  resource: PropTypes.string,\n  sortBy: PropTypes.string,\n  sortByOrder: fieldPropTypes.sortByOrder,\n  source: PropTypes.string.isRequired\n});\nexport var ReferenceArrayFieldView = function (props) {\n  var children = props.children,\n      pagination = props.pagination,\n      className = props.className,\n      sx = props.sx;\n\n  var _a = useListContext(props),\n      isLoading = _a.isLoading,\n      total = _a.total;\n\n  return React.createElement(Root, {\n    className: className,\n    sx: sx\n  }, isLoading ? React.createElement(LinearProgress, {\n    className: ReferenceArrayFieldClasses.progress\n  }) : React.createElement(\"span\", null, children, pagination && total !== undefined ? pagination : null));\n};\nReferenceArrayFieldView.propTypes = {\n  className: PropTypes.string,\n  children: PropTypes.node.isRequired,\n  reference: PropTypes.string.isRequired\n};\nvar PREFIX = 'RaReferenceArrayField';\nexport var ReferenceArrayFieldClasses = {\n  progress: \"\".concat(PREFIX, \"-progress\")\n};\nvar Root = styled('div', {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var _b;\n\n  var theme = _a.theme;\n  return _b = {}, _b[\"& .\".concat(ReferenceArrayFieldClasses.progress)] = {\n    marginTop: theme.spacing(2)\n  }, _b;\n});\nvar PureReferenceArrayFieldView = memo(ReferenceArrayFieldView);","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","React","memo","PropTypes","ListContextProvider","useListContext","useReferenceArrayFieldController","ResourceContextProvider","useRecordContext","fieldPropTypes","LinearProgress","styled","ReferenceArrayField","props","filter","_a","page","perPage","reference","resource","sort","source","record","controllerProps","createElement","value","PureReferenceArrayFieldView","propTypes","className","string","children","node","isRequired","label","any","sortBy","sortByOrder","ReferenceArrayFieldView","pagination","sx","isLoading","total","Root","ReferenceArrayFieldClasses","progress","undefined","PREFIX","concat","name","overridesResolver","styles","root","_b","theme","marginTop","spacing"],"sources":["/Users/evgenijgnedcik/Documents/GitHub/adminPixomnia/node_modules/ra-ui-materialui/dist/esm/field/ReferenceArrayField.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport * as React from 'react';\nimport { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { ListContextProvider, useListContext, useReferenceArrayFieldController, ResourceContextProvider, useRecordContext, } from 'ra-core';\nimport { fieldPropTypes } from './types';\nimport { LinearProgress } from '../layout';\nimport { styled } from '@mui/material/styles';\n/**\n * A container component that fetches records from another resource specified\n * by an array of *ids* in current record.\n *\n * You must define the fields to be passed to the iterator component as children.\n *\n * @example Display all the products of the current order as datagrid\n * // order = {\n * //   id: 123,\n * //   product_ids: [456, 457, 458],\n * // }\n * <ReferenceArrayField label=\"Products\" reference=\"products\" source=\"product_ids\">\n *     <Datagrid>\n *         <TextField source=\"id\" />\n *         <TextField source=\"description\" />\n *         <NumberField source=\"price\" options={{ style: 'currency', currency: 'USD' }} />\n *         <EditButton />\n *     </Datagrid>\n * </ReferenceArrayField>\n *\n * @example Display all the categories of the current product as a list of chips\n * // product = {\n * //   id: 456,\n * //   category_ids: [11, 22, 33],\n * // }\n * <ReferenceArrayField label=\"Categories\" reference=\"categories\" source=\"category_ids\">\n *     <SingleFieldList>\n *         <ChipField source=\"name\" />\n *     </SingleFieldList>\n * </ReferenceArrayField>\n *\n * By default, restricts the displayed values to 1000. You can extend this limit\n * by setting the `perPage` prop.\n *\n * @example\n * <ReferenceArrayField perPage={10} reference=\"categories\" source=\"category_ids\">\n *    ...\n * </ReferenceArrayField>\n *\n * By default, the field displays the results in the order in which they are referenced\n * (i.e. in the order of the list of ids). You can change this order\n * by setting the `sort` prop (an object with `field` and `order` properties).\n *\n * @example\n * <ReferenceArrayField sort={{ field: 'name', order: 'ASC' }} reference=\"categories\" source=\"category_ids\">\n *    ...\n * </ReferenceArrayField>\n *\n * Also, you can filter the results to display only a subset of values. Use the\n * `filter` prop for that.\n *\n * @example\n * <ReferenceArrayField filter={{ is_published: true }} reference=\"categories\" source=\"category_ids\">\n *    ...\n * </ReferenceArrayField>\n */\nexport var ReferenceArrayField = function (props) {\n    var filter = props.filter, _a = props.page, page = _a === void 0 ? 1 : _a, perPage = props.perPage, reference = props.reference, resource = props.resource, sort = props.sort, source = props.source;\n    var record = useRecordContext(props);\n    var controllerProps = useReferenceArrayFieldController({\n        filter: filter,\n        page: page,\n        perPage: perPage,\n        record: record,\n        reference: reference,\n        resource: resource,\n        sort: sort,\n        source: source,\n    });\n    return (React.createElement(ResourceContextProvider, { value: reference },\n        React.createElement(ListContextProvider, { value: controllerProps },\n            React.createElement(PureReferenceArrayFieldView, __assign({}, props)))));\n};\nReferenceArrayField.propTypes = __assign(__assign({}, fieldPropTypes), { className: PropTypes.string, children: PropTypes.node.isRequired, label: fieldPropTypes.label, record: PropTypes.any, reference: PropTypes.string.isRequired, resource: PropTypes.string, sortBy: PropTypes.string, sortByOrder: fieldPropTypes.sortByOrder, source: PropTypes.string.isRequired });\nexport var ReferenceArrayFieldView = function (props) {\n    var children = props.children, pagination = props.pagination, className = props.className, sx = props.sx;\n    var _a = useListContext(props), isLoading = _a.isLoading, total = _a.total;\n    return (React.createElement(Root, { className: className, sx: sx }, isLoading ? (React.createElement(LinearProgress, { className: ReferenceArrayFieldClasses.progress })) : (React.createElement(\"span\", null,\n        children,\n        pagination && total !== undefined ? pagination : null))));\n};\nReferenceArrayFieldView.propTypes = {\n    className: PropTypes.string,\n    children: PropTypes.node.isRequired,\n    reference: PropTypes.string.isRequired,\n};\nvar PREFIX = 'RaReferenceArrayField';\nexport var ReferenceArrayFieldClasses = {\n    progress: \"\".concat(PREFIX, \"-progress\"),\n};\nvar Root = styled('div', {\n    name: PREFIX,\n    overridesResolver: function (props, styles) { return styles.root; },\n})(function (_a) {\n    var _b;\n    var theme = _a.theme;\n    return (_b = {},\n        _b[\"& .\".concat(ReferenceArrayFieldClasses.progress)] = {\n            marginTop: theme.spacing(2),\n        },\n        _b);\n});\nvar PureReferenceArrayFieldView = memo(ReferenceArrayFieldView);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}