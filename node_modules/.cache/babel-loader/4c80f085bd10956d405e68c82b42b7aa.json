{"ast":null,"code":"import React, { Children } from 'react';\nimport PropTypes from 'prop-types';\nimport { ChoicesContextProvider, useReferenceInputController, ResourceContextProvider } from 'ra-core';\nimport { ReferenceError } from './ReferenceError';\n/**\n * An Input component for choosing a reference record. Useful for foreign keys.\n *\n * This component fetches the possible values in the reference resource\n * (using `dataProvider.getList()`), then delegates rendering\n * to a subcomponent, to which it passes the possible choices\n * as the `choices` attribute.\n *\n * Use it with a selector component as child, like `<AutocompleteInput>`,\n * `<SelectInput>`, or `<RadioButtonGroupInput>`.\n *\n * @example\n * export const CommentEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <ReferenceInput label=\"Post\" source=\"post_id\" reference=\"posts\">\n *                 <AutocompleteInput optionText=\"title\" />\n *             </ReferenceInput>\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * @example\n * export const CommentEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <ReferenceInput label=\"Post\" source=\"post_id\" reference=\"posts\">\n *                 <SelectInput optionText=\"title\" />\n *             </ReferenceInput>\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * By default, restricts the possible values to 25. You can extend this limit\n * by setting the `perPage` prop.\n *\n * @example\n * <ReferenceInput\n *      source=\"post_id\"\n *      reference=\"posts\"\n *      perPage={100}>\n *     <SelectInput optionText=\"title\" />\n * </ReferenceInput>\n *\n * By default, orders the possible values by id desc. You can change this order\n * by setting the `sort` prop (an object with `field` and `order` properties).\n *\n * @example\n * <ReferenceInput\n *      source=\"post_id\"\n *      reference=\"posts\"\n *      sort={{ field: 'title', order: 'ASC' }}>\n *     <SelectInput optionText=\"title\" />\n * </ReferenceInput>\n *\n * Also, you can filter the query used to populate the possible values. Use the\n * `filter` prop for that.\n *\n * @example\n * <ReferenceInput\n *      source=\"post_id\"\n *      reference=\"posts\"\n *      filter={{ is_published: true }}>\n *     <SelectInput optionText=\"title\" />\n * </ReferenceInput>\n *\n * The enclosed component may filter results. ReferenceInput create a ChoicesContext which provides\n * a `setFilters` function. You can call this function to filter the results.\n */\n\nexport var ReferenceInput = function (props) {\n  var children = props.children,\n      label = props.label,\n      reference = props.reference;\n  var controllerProps = useReferenceInputController(props);\n\n  if (Children.count(children) !== 1) {\n    throw new Error('<ReferenceInput> only accepts a single child');\n  } // This is not a form error but an unrecoverable error from the\n  // useReferenceInputController hook\n\n\n  if (controllerProps.error) {\n    return React.createElement(ReferenceError, {\n      label: label,\n      error: controllerProps.error\n    });\n  }\n\n  return React.createElement(ResourceContextProvider, {\n    value: reference\n  }, React.createElement(ChoicesContextProvider, {\n    value: controllerProps\n  }, children));\n};\nReferenceInput.propTypes = {\n  children: PropTypes.element.isRequired,\n  filter: PropTypes.object,\n  label: PropTypes.string,\n  page: PropTypes.number,\n  perPage: PropTypes.number,\n  record: PropTypes.object,\n  reference: PropTypes.string.isRequired,\n  resource: PropTypes.string,\n  sort: PropTypes.shape({\n    field: PropTypes.string,\n    order: PropTypes.oneOf(['ASC', 'DESC'])\n  }),\n  source: PropTypes.string\n};\nReferenceInput.defaultProps = {\n  filter: {},\n  page: 1,\n  perPage: 25,\n  sort: {\n    field: 'id',\n    order: 'DESC'\n  }\n};","map":{"version":3,"names":["React","Children","PropTypes","ChoicesContextProvider","useReferenceInputController","ResourceContextProvider","ReferenceError","ReferenceInput","props","children","label","reference","controllerProps","count","Error","error","createElement","value","propTypes","element","isRequired","filter","object","string","page","number","perPage","record","resource","sort","shape","field","order","oneOf","source","defaultProps"],"sources":["/Users/evgenijgnedcik/Documents/GitHub/adminPixomnia/node_modules/ra-ui-materialui/dist/esm/input/ReferenceInput.js"],"sourcesContent":["import React, { Children } from 'react';\nimport PropTypes from 'prop-types';\nimport { ChoicesContextProvider, useReferenceInputController, ResourceContextProvider, } from 'ra-core';\nimport { ReferenceError } from './ReferenceError';\n/**\n * An Input component for choosing a reference record. Useful for foreign keys.\n *\n * This component fetches the possible values in the reference resource\n * (using `dataProvider.getList()`), then delegates rendering\n * to a subcomponent, to which it passes the possible choices\n * as the `choices` attribute.\n *\n * Use it with a selector component as child, like `<AutocompleteInput>`,\n * `<SelectInput>`, or `<RadioButtonGroupInput>`.\n *\n * @example\n * export const CommentEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <ReferenceInput label=\"Post\" source=\"post_id\" reference=\"posts\">\n *                 <AutocompleteInput optionText=\"title\" />\n *             </ReferenceInput>\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * @example\n * export const CommentEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <ReferenceInput label=\"Post\" source=\"post_id\" reference=\"posts\">\n *                 <SelectInput optionText=\"title\" />\n *             </ReferenceInput>\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * By default, restricts the possible values to 25. You can extend this limit\n * by setting the `perPage` prop.\n *\n * @example\n * <ReferenceInput\n *      source=\"post_id\"\n *      reference=\"posts\"\n *      perPage={100}>\n *     <SelectInput optionText=\"title\" />\n * </ReferenceInput>\n *\n * By default, orders the possible values by id desc. You can change this order\n * by setting the `sort` prop (an object with `field` and `order` properties).\n *\n * @example\n * <ReferenceInput\n *      source=\"post_id\"\n *      reference=\"posts\"\n *      sort={{ field: 'title', order: 'ASC' }}>\n *     <SelectInput optionText=\"title\" />\n * </ReferenceInput>\n *\n * Also, you can filter the query used to populate the possible values. Use the\n * `filter` prop for that.\n *\n * @example\n * <ReferenceInput\n *      source=\"post_id\"\n *      reference=\"posts\"\n *      filter={{ is_published: true }}>\n *     <SelectInput optionText=\"title\" />\n * </ReferenceInput>\n *\n * The enclosed component may filter results. ReferenceInput create a ChoicesContext which provides\n * a `setFilters` function. You can call this function to filter the results.\n */\nexport var ReferenceInput = function (props) {\n    var children = props.children, label = props.label, reference = props.reference;\n    var controllerProps = useReferenceInputController(props);\n    if (Children.count(children) !== 1) {\n        throw new Error('<ReferenceInput> only accepts a single child');\n    }\n    // This is not a form error but an unrecoverable error from the\n    // useReferenceInputController hook\n    if (controllerProps.error) {\n        return React.createElement(ReferenceError, { label: label, error: controllerProps.error });\n    }\n    return (React.createElement(ResourceContextProvider, { value: reference },\n        React.createElement(ChoicesContextProvider, { value: controllerProps }, children)));\n};\nReferenceInput.propTypes = {\n    children: PropTypes.element.isRequired,\n    filter: PropTypes.object,\n    label: PropTypes.string,\n    page: PropTypes.number,\n    perPage: PropTypes.number,\n    record: PropTypes.object,\n    reference: PropTypes.string.isRequired,\n    resource: PropTypes.string,\n    sort: PropTypes.shape({\n        field: PropTypes.string,\n        order: PropTypes.oneOf(['ASC', 'DESC']),\n    }),\n    source: PropTypes.string,\n};\nReferenceInput.defaultProps = {\n    filter: {},\n    page: 1,\n    perPage: 25,\n    sort: { field: 'id', order: 'DESC' },\n};\n"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,sBAAT,EAAiCC,2BAAjC,EAA8DC,uBAA9D,QAA8F,SAA9F;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,cAAc,GAAG,UAAUC,KAAV,EAAiB;EACzC,IAAIC,QAAQ,GAAGD,KAAK,CAACC,QAArB;EAAA,IAA+BC,KAAK,GAAGF,KAAK,CAACE,KAA7C;EAAA,IAAoDC,SAAS,GAAGH,KAAK,CAACG,SAAtE;EACA,IAAIC,eAAe,GAAGR,2BAA2B,CAACI,KAAD,CAAjD;;EACA,IAAIP,QAAQ,CAACY,KAAT,CAAeJ,QAAf,MAA6B,CAAjC,EAAoC;IAChC,MAAM,IAAIK,KAAJ,CAAU,8CAAV,CAAN;EACH,CALwC,CAMzC;EACA;;;EACA,IAAIF,eAAe,CAACG,KAApB,EAA2B;IACvB,OAAOf,KAAK,CAACgB,aAAN,CAAoBV,cAApB,EAAoC;MAAEI,KAAK,EAAEA,KAAT;MAAgBK,KAAK,EAAEH,eAAe,CAACG;IAAvC,CAApC,CAAP;EACH;;EACD,OAAQf,KAAK,CAACgB,aAAN,CAAoBX,uBAApB,EAA6C;IAAEY,KAAK,EAAEN;EAAT,CAA7C,EACJX,KAAK,CAACgB,aAAN,CAAoBb,sBAApB,EAA4C;IAAEc,KAAK,EAAEL;EAAT,CAA5C,EAAwEH,QAAxE,CADI,CAAR;AAEH,CAbM;AAcPF,cAAc,CAACW,SAAf,GAA2B;EACvBT,QAAQ,EAAEP,SAAS,CAACiB,OAAV,CAAkBC,UADL;EAEvBC,MAAM,EAAEnB,SAAS,CAACoB,MAFK;EAGvBZ,KAAK,EAAER,SAAS,CAACqB,MAHM;EAIvBC,IAAI,EAAEtB,SAAS,CAACuB,MAJO;EAKvBC,OAAO,EAAExB,SAAS,CAACuB,MALI;EAMvBE,MAAM,EAAEzB,SAAS,CAACoB,MANK;EAOvBX,SAAS,EAAET,SAAS,CAACqB,MAAV,CAAiBH,UAPL;EAQvBQ,QAAQ,EAAE1B,SAAS,CAACqB,MARG;EASvBM,IAAI,EAAE3B,SAAS,CAAC4B,KAAV,CAAgB;IAClBC,KAAK,EAAE7B,SAAS,CAACqB,MADC;IAElBS,KAAK,EAAE9B,SAAS,CAAC+B,KAAV,CAAgB,CAAC,KAAD,EAAQ,MAAR,CAAhB;EAFW,CAAhB,CATiB;EAavBC,MAAM,EAAEhC,SAAS,CAACqB;AAbK,CAA3B;AAeAhB,cAAc,CAAC4B,YAAf,GAA8B;EAC1Bd,MAAM,EAAE,EADkB;EAE1BG,IAAI,EAAE,CAFoB;EAG1BE,OAAO,EAAE,EAHiB;EAI1BG,IAAI,EAAE;IAAEE,KAAK,EAAE,IAAT;IAAeC,KAAK,EAAE;EAAtB;AAJoB,CAA9B"},"metadata":{},"sourceType":"module"}