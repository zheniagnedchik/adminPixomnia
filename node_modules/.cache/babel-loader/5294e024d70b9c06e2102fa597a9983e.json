{"ast":null,"code":"import { defaultDataProvider } from './defaultDataProvider';\n/**\n * Combine multiple data providers into one.\n *\n * @param dataProviderMatcher A function that returns a data provider for a given resource.\n *\n * @example\n * const dataProvider = combineDataProviders(resource => {\n *    switch(resource) {\n *       case 'posts':\n *       case 'comments':\n *          return dataProvider1;\n *       case 'users':\n *          return dataProvider2;\n *       default:\n *         throw new Error('Unknown resource');\n *    }\n * });\n */\n\nexport var combineDataProviders = function (dataProviderMatcher) {\n  return new Proxy(defaultDataProvider, {\n    get: function (target, name) {\n      return function (resource, params) {\n        if (typeof name === 'symbol' || name === 'then') {\n          return;\n        }\n\n        return dataProviderMatcher(resource)[name](resource, params);\n      };\n    }\n  });\n};","map":{"version":3,"names":["defaultDataProvider","combineDataProviders","dataProviderMatcher","Proxy","get","target","name","resource","params"],"sources":["/Users/evgenijgnedcik/Documents/GitHub/adminPixomnia/node_modules/ra-core/dist/esm/dataProvider/combineDataProviders.js"],"sourcesContent":["import { defaultDataProvider } from './defaultDataProvider';\n/**\n * Combine multiple data providers into one.\n *\n * @param dataProviderMatcher A function that returns a data provider for a given resource.\n *\n * @example\n * const dataProvider = combineDataProviders(resource => {\n *    switch(resource) {\n *       case 'posts':\n *       case 'comments':\n *          return dataProvider1;\n *       case 'users':\n *          return dataProvider2;\n *       default:\n *         throw new Error('Unknown resource');\n *    }\n * });\n */\nexport var combineDataProviders = function (dataProviderMatcher) {\n    return new Proxy(defaultDataProvider, {\n        get: function (target, name) {\n            return function (resource, params) {\n                if (typeof name === 'symbol' || name === 'then') {\n                    return;\n                }\n                return dataProviderMatcher(resource)[name](resource, params);\n            };\n        },\n    });\n};\n"],"mappings":"AAAA,SAASA,mBAAT,QAAoC,uBAApC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,oBAAoB,GAAG,UAAUC,mBAAV,EAA+B;EAC7D,OAAO,IAAIC,KAAJ,CAAUH,mBAAV,EAA+B;IAClCI,GAAG,EAAE,UAAUC,MAAV,EAAkBC,IAAlB,EAAwB;MACzB,OAAO,UAAUC,QAAV,EAAoBC,MAApB,EAA4B;QAC/B,IAAI,OAAOF,IAAP,KAAgB,QAAhB,IAA4BA,IAAI,KAAK,MAAzC,EAAiD;UAC7C;QACH;;QACD,OAAOJ,mBAAmB,CAACK,QAAD,CAAnB,CAA8BD,IAA9B,EAAoCC,QAApC,EAA8CC,MAA9C,CAAP;MACH,CALD;IAMH;EARiC,CAA/B,CAAP;AAUH,CAXM"},"metadata":{},"sourceType":"module"}