{"ast":null,"code":"import { Node, mergeAttributes, textblockTypeInputRule } from '@tiptap/core';\nconst Heading = Node.create({\n  name: 'heading',\n\n  addOptions() {\n    return {\n      levels: [1, 2, 3, 4, 5, 6],\n      HTMLAttributes: {}\n    };\n  },\n\n  content: 'inline*',\n  group: 'block',\n  defining: true,\n\n  addAttributes() {\n    return {\n      level: {\n        default: 1,\n        rendered: false\n      }\n    };\n  },\n\n  parseHTML() {\n    return this.options.levels.map(level => ({\n      tag: `h${level}`,\n      attrs: {\n        level\n      }\n    }));\n  },\n\n  renderHTML(_ref) {\n    let {\n      node,\n      HTMLAttributes\n    } = _ref;\n    const hasLevel = this.options.levels.includes(node.attrs.level);\n    const level = hasLevel ? node.attrs.level : this.options.levels[0];\n    return [`h${level}`, mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n\n  addCommands() {\n    return {\n      setHeading: attributes => _ref2 => {\n        let {\n          commands\n        } = _ref2;\n\n        if (!this.options.levels.includes(attributes.level)) {\n          return false;\n        }\n\n        return commands.setNode(this.name, attributes);\n      },\n      toggleHeading: attributes => _ref3 => {\n        let {\n          commands\n        } = _ref3;\n\n        if (!this.options.levels.includes(attributes.level)) {\n          return false;\n        }\n\n        return commands.toggleNode(this.name, 'paragraph', attributes);\n      }\n    };\n  },\n\n  addKeyboardShortcuts() {\n    return this.options.levels.reduce((items, level) => ({ ...items,\n      ...{\n        [`Mod-Alt-${level}`]: () => this.editor.commands.toggleHeading({\n          level\n        })\n      }\n    }), {});\n  },\n\n  addInputRules() {\n    return this.options.levels.map(level => {\n      return textblockTypeInputRule({\n        find: new RegExp(`^(#{1,${level}})\\\\s$`),\n        type: this.type,\n        getAttributes: {\n          level\n        }\n      });\n    });\n  }\n\n});\nexport { Heading, Heading as default };","map":{"version":3,"mappings":";AAwBa,aAAO,GAAGA,IAAI,CAACC,MAAL,CAA4B;EACjDC,IAAI,EAAE,SAD2C;;EAGjDC,UAAU;IACR,OAAO;MACLC,MAAM,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,CADH;MAELC,cAAc,EAAE;IAFX,CAAP;EAID,CARgD;;EAUjDC,OAAO,EAAE,SAVwC;EAYjDC,KAAK,EAAE,OAZ0C;EAcjDC,QAAQ,EAAE,IAduC;;EAgBjDC,aAAa;IACX,OAAO;MACLC,KAAK,EAAE;QACLC,OAAO,EAAE,CADJ;QAELC,QAAQ,EAAE;MAFL;IADF,CAAP;EAMD,CAvBgD;;EAyBjDC,SAAS;IACP,OAAO,KAAKC,OAAL,CAAaV,MAAb,CACJW,GADI,CACCL,KAAD,KAAmB;MACtBM,GAAG,EAAM,SAAO,EADM;MAEtBC,KAAK,EAAE;QAAEP;MAAF;IAFe,CAAnB,CADA,CAAP;EAKD,CA/BgD;;EAiCjDQ,UAAU,OAAyB;IAAA,IAAxB;MAAEC,IAAF;MAAQd;IAAR,CAAwB;IACjC,MAAMe,QAAQ,GAAG,KAAKN,OAAL,CAAaV,MAAb,CAAoBiB,QAApB,CAA6BF,IAAI,CAACF,KAAL,CAAWP,KAAxC,CAAjB;IACA,MAAMA,KAAK,GAAGU,QAAQ,GAClBD,IAAI,CAACF,KAAL,CAAWP,KADO,GAElB,KAAKI,OAAL,CAAaV,MAAb,CAAoB,CAApB,CAFJ;IAIA,OAAO,CAAK,SAAK,EAAV,EAAckB,eAAe,CAAC,KAAKR,OAAL,CAAaT,cAAd,EAA8BA,cAA9B,CAA7B,EAA4E,CAA5E,CAAP;EACD,CAxCgD;;EA0CjDkB,WAAW;IACT,OAAO;MACLC,UAAU,EAAEC,UAAU,IAAI,SAAiB;QAAA,IAAhB;UAAEC;QAAF,CAAgB;;QACzC,IAAI,CAAC,KAAKZ,OAAL,CAAaV,MAAb,CAAoBiB,QAApB,CAA6BI,UAAU,CAACf,KAAxC,CAAL,EAAqD;UACnD,OAAO,KAAP;QACD;;QAED,OAAOgB,QAAQ,CAACC,OAAT,CAAiB,KAAKzB,IAAtB,EAA4BuB,UAA5B,CAAP;MACD,CAPI;MAQLG,aAAa,EAAEH,UAAU,IAAI,SAAiB;QAAA,IAAhB;UAAEC;QAAF,CAAgB;;QAC5C,IAAI,CAAC,KAAKZ,OAAL,CAAaV,MAAb,CAAoBiB,QAApB,CAA6BI,UAAU,CAACf,KAAxC,CAAL,EAAqD;UACnD,OAAO,KAAP;QACD;;QAED,OAAOgB,QAAQ,CAACG,UAAT,CAAoB,KAAK3B,IAAzB,EAA+B,WAA/B,EAA4CuB,UAA5C,CAAP;MACD;IAdI,CAAP;EAgBD,CA3DgD;;EA6DjDK,oBAAoB;IAClB,OAAO,KAAKhB,OAAL,CAAaV,MAAb,CAAoB2B,MAApB,CAA2B,CAACC,KAAD,EAAQtB,KAAR,MAAmB,EACnD,GAAGsB,KADgD;MAEnD,GAAG;QACD,CAAC,WAAWtB,KAAK,EAAjB,GAAsB,MAAM,KAAKuB,MAAL,CAAYP,QAAZ,CAAqBE,aAArB,CAAmC;UAAElB;QAAF,CAAnC;MAD3B;IAFgD,CAAnB,CAA3B,EAKH,EALG,CAAP;EAMD,CApEgD;;EAsEjDwB,aAAa;IACX,OAAO,KAAKpB,OAAL,CAAaV,MAAb,CAAoBW,GAApB,CAAwBL,KAAK,IAAG;MACrC,OAAOyB,sBAAsB,CAAC;QAC5BC,IAAI,EAAE,IAAIC,MAAJ,CAAoB,cAAK,QAAzB,CADsB;QAE5BC,IAAI,EAAE,KAAKA,IAFiB;QAG5BC,aAAa,EAAE;UACb7B;QADa;MAHa,CAAD,CAA7B;IAOD,CARM,CAAP;EASD;;AAhFgD,CAA5B,CAAV","names":["Node","create","name","addOptions","levels","HTMLAttributes","content","group","defining","addAttributes","level","default","rendered","parseHTML","options","map","tag","attrs","renderHTML","node","hasLevel","includes","mergeAttributes","addCommands","setHeading","attributes","commands","setNode","toggleHeading","toggleNode","addKeyboardShortcuts","reduce","items","editor","addInputRules","textblockTypeInputRule","find","RegExp","type","getAttributes"],"sources":["/Users/evgenijgnedcik/Documents/GitHub/adminPixomnia/node_modules/@tiptap/extension-heading/src/heading.ts"],"sourcesContent":["import { mergeAttributes, Node, textblockTypeInputRule } from '@tiptap/core'\n\nexport type Level = 1 | 2 | 3 | 4 | 5 | 6\n\nexport interface HeadingOptions {\n  levels: Level[],\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    heading: {\n      /**\n       * Set a heading node\n       */\n      setHeading: (attributes: { level: Level }) => ReturnType,\n      /**\n       * Toggle a heading node\n       */\n      toggleHeading: (attributes: { level: Level }) => ReturnType,\n    }\n  }\n}\n\nexport const Heading = Node.create<HeadingOptions>({\n  name: 'heading',\n\n  addOptions() {\n    return {\n      levels: [1, 2, 3, 4, 5, 6],\n      HTMLAttributes: {},\n    }\n  },\n\n  content: 'inline*',\n\n  group: 'block',\n\n  defining: true,\n\n  addAttributes() {\n    return {\n      level: {\n        default: 1,\n        rendered: false,\n      },\n    }\n  },\n\n  parseHTML() {\n    return this.options.levels\n      .map((level: Level) => ({\n        tag: `h${level}`,\n        attrs: { level },\n      }))\n  },\n\n  renderHTML({ node, HTMLAttributes }) {\n    const hasLevel = this.options.levels.includes(node.attrs.level)\n    const level = hasLevel\n      ? node.attrs.level\n      : this.options.levels[0]\n\n    return [`h${level}`, mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setHeading: attributes => ({ commands }) => {\n        if (!this.options.levels.includes(attributes.level)) {\n          return false\n        }\n\n        return commands.setNode(this.name, attributes)\n      },\n      toggleHeading: attributes => ({ commands }) => {\n        if (!this.options.levels.includes(attributes.level)) {\n          return false\n        }\n\n        return commands.toggleNode(this.name, 'paragraph', attributes)\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return this.options.levels.reduce((items, level) => ({\n      ...items,\n      ...{\n        [`Mod-Alt-${level}`]: () => this.editor.commands.toggleHeading({ level }),\n      },\n    }), {})\n  },\n\n  addInputRules() {\n    return this.options.levels.map(level => {\n      return textblockTypeInputRule({\n        find: new RegExp(`^(#{1,${level}})\\\\s$`),\n        type: this.type,\n        getAttributes: {\n          level,\n        },\n      })\n    })\n  },\n})\n"]},"metadata":{},"sourceType":"module"}