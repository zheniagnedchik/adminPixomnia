{"ast":null,"code":"/**\n * This internal function is used to convert an object matching the form shape with errors to a\n * format compatible with react-hook-form. It's used to handle submission errors. Only useful when\n * you are implementing a custom form without leveraging our Form component.\n *\n * @example\n * const MyForm = () => {\n *     const { register, handleSubmit, setError } = useForm();\n *     const onSubmit = data => {\n *         return saveAsync(data).catch(error => setSubmissionErrors(error.body.details));\n *     };\n *\n *     return (\n *         <form onSubmit={handleSubmit(onSubmit)}>\n *             ...\n *         </form>\n *     );\n * };\n */\nexport var setSubmissionErrors = function (errors, setError) {\n  var setErrorFromArray = function (errors, rootPath) {\n    errors.forEach(function (error, index) {\n      if (typeof error === 'object') {\n        setErrorFromObject(error, \"\".concat(rootPath, \".\").concat(index, \".\"));\n        return;\n      }\n\n      if (Array.isArray(error)) {\n        setErrorFromArray(error, \"\".concat(rootPath, \".\").concat(index, \".\"));\n        return;\n      }\n\n      setError(\"\".concat(rootPath, \".\").concat(index), {\n        type: 'server',\n        message: error.toString()\n      });\n    });\n  };\n\n  var setErrorFromObject = function (errors, rootPath) {\n    Object.entries(errors).forEach(function (_a) {\n      var name = _a[0],\n          error = _a[1];\n\n      if (typeof error === 'object') {\n        setErrorFromObject(error, \"\".concat(rootPath).concat(name, \".\"));\n        return;\n      }\n\n      if (Array.isArray(error)) {\n        setErrorFromArray(error, \"\".concat(rootPath).concat(name, \".\"));\n        return;\n      }\n\n      setError(\"\".concat(rootPath).concat(name), {\n        type: 'server',\n        message: error.toString()\n      });\n    });\n  };\n\n  setErrorFromObject(errors, '');\n};","map":{"version":3,"names":["setSubmissionErrors","errors","setError","setErrorFromArray","rootPath","forEach","error","index","setErrorFromObject","concat","Array","isArray","type","message","toString","Object","entries","_a","name"],"sources":["/Users/evgenijgnedcik/Documents/GitHub/adminPixomnia/node_modules/ra-core/dist/esm/form/setSubmissionErrors.js"],"sourcesContent":["/**\n * This internal function is used to convert an object matching the form shape with errors to a\n * format compatible with react-hook-form. It's used to handle submission errors. Only useful when\n * you are implementing a custom form without leveraging our Form component.\n *\n * @example\n * const MyForm = () => {\n *     const { register, handleSubmit, setError } = useForm();\n *     const onSubmit = data => {\n *         return saveAsync(data).catch(error => setSubmissionErrors(error.body.details));\n *     };\n *\n *     return (\n *         <form onSubmit={handleSubmit(onSubmit)}>\n *             ...\n *         </form>\n *     );\n * };\n */\nexport var setSubmissionErrors = function (errors, setError) {\n    var setErrorFromArray = function (errors, rootPath) {\n        errors.forEach(function (error, index) {\n            if (typeof error === 'object') {\n                setErrorFromObject(error, \"\".concat(rootPath, \".\").concat(index, \".\"));\n                return;\n            }\n            if (Array.isArray(error)) {\n                setErrorFromArray(error, \"\".concat(rootPath, \".\").concat(index, \".\"));\n                return;\n            }\n            setError(\"\".concat(rootPath, \".\").concat(index), {\n                type: 'server',\n                message: error.toString(),\n            });\n        });\n    };\n    var setErrorFromObject = function (errors, rootPath) {\n        Object.entries(errors).forEach(function (_a) {\n            var name = _a[0], error = _a[1];\n            if (typeof error === 'object') {\n                setErrorFromObject(error, \"\".concat(rootPath).concat(name, \".\"));\n                return;\n            }\n            if (Array.isArray(error)) {\n                setErrorFromArray(error, \"\".concat(rootPath).concat(name, \".\"));\n                return;\n            }\n            setError(\"\".concat(rootPath).concat(name), {\n                type: 'server',\n                message: error.toString(),\n            });\n        });\n    };\n    setErrorFromObject(errors, '');\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIA,mBAAmB,GAAG,UAAUC,MAAV,EAAkBC,QAAlB,EAA4B;EACzD,IAAIC,iBAAiB,GAAG,UAAUF,MAAV,EAAkBG,QAAlB,EAA4B;IAChDH,MAAM,CAACI,OAAP,CAAe,UAAUC,KAAV,EAAiBC,KAAjB,EAAwB;MACnC,IAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B;QAC3BE,kBAAkB,CAACF,KAAD,EAAQ,GAAGG,MAAH,CAAUL,QAAV,EAAoB,GAApB,EAAyBK,MAAzB,CAAgCF,KAAhC,EAAuC,GAAvC,CAAR,CAAlB;QACA;MACH;;MACD,IAAIG,KAAK,CAACC,OAAN,CAAcL,KAAd,CAAJ,EAA0B;QACtBH,iBAAiB,CAACG,KAAD,EAAQ,GAAGG,MAAH,CAAUL,QAAV,EAAoB,GAApB,EAAyBK,MAAzB,CAAgCF,KAAhC,EAAuC,GAAvC,CAAR,CAAjB;QACA;MACH;;MACDL,QAAQ,CAAC,GAAGO,MAAH,CAAUL,QAAV,EAAoB,GAApB,EAAyBK,MAAzB,CAAgCF,KAAhC,CAAD,EAAyC;QAC7CK,IAAI,EAAE,QADuC;QAE7CC,OAAO,EAAEP,KAAK,CAACQ,QAAN;MAFoC,CAAzC,CAAR;IAIH,CAbD;EAcH,CAfD;;EAgBA,IAAIN,kBAAkB,GAAG,UAAUP,MAAV,EAAkBG,QAAlB,EAA4B;IACjDW,MAAM,CAACC,OAAP,CAAef,MAAf,EAAuBI,OAAvB,CAA+B,UAAUY,EAAV,EAAc;MACzC,IAAIC,IAAI,GAAGD,EAAE,CAAC,CAAD,CAAb;MAAA,IAAkBX,KAAK,GAAGW,EAAE,CAAC,CAAD,CAA5B;;MACA,IAAI,OAAOX,KAAP,KAAiB,QAArB,EAA+B;QAC3BE,kBAAkB,CAACF,KAAD,EAAQ,GAAGG,MAAH,CAAUL,QAAV,EAAoBK,MAApB,CAA2BS,IAA3B,EAAiC,GAAjC,CAAR,CAAlB;QACA;MACH;;MACD,IAAIR,KAAK,CAACC,OAAN,CAAcL,KAAd,CAAJ,EAA0B;QACtBH,iBAAiB,CAACG,KAAD,EAAQ,GAAGG,MAAH,CAAUL,QAAV,EAAoBK,MAApB,CAA2BS,IAA3B,EAAiC,GAAjC,CAAR,CAAjB;QACA;MACH;;MACDhB,QAAQ,CAAC,GAAGO,MAAH,CAAUL,QAAV,EAAoBK,MAApB,CAA2BS,IAA3B,CAAD,EAAmC;QACvCN,IAAI,EAAE,QADiC;QAEvCC,OAAO,EAAEP,KAAK,CAACQ,QAAN;MAF8B,CAAnC,CAAR;IAIH,CAdD;EAeH,CAhBD;;EAiBAN,kBAAkB,CAACP,MAAD,EAAS,EAAT,CAAlB;AACH,CAnCM"},"metadata":{},"sourceType":"module"}