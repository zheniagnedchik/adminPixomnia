{"ast":null,"code":"var key = {\n  fullscreenEnabled: 0,\n  fullscreenElement: 1,\n  requestFullscreen: 2,\n  exitFullscreen: 3,\n  fullscreenchange: 4,\n  fullscreenerror: 5,\n  fullscreen: 6\n};\nvar webkit = ['webkitFullscreenEnabled', 'webkitFullscreenElement', 'webkitRequestFullscreen', 'webkitExitFullscreen', 'webkitfullscreenchange', 'webkitfullscreenerror', '-webkit-full-screen'];\nvar moz = ['mozFullScreenEnabled', 'mozFullScreenElement', 'mozRequestFullScreen', 'mozCancelFullScreen', 'mozfullscreenchange', 'mozfullscreenerror', '-moz-full-screen'];\nvar ms = ['msFullscreenEnabled', 'msFullscreenElement', 'msRequestFullscreen', 'msExitFullscreen', 'MSFullscreenChange', 'MSFullscreenError', '-ms-fullscreen']; // so it doesn't throw if no window or document\n\nvar document = typeof window !== 'undefined' && typeof window.document !== 'undefined' ? window.document : {};\nvar vendor = 'fullscreenEnabled' in document && Object.keys(key) || webkit[0] in document && webkit || moz[0] in document && moz || ms[0] in document && ms || [];\nvar fscreen = {\n  requestFullscreen: function (element) {\n    return element[vendor[key.requestFullscreen]]();\n  },\n  requestFullscreenFunction: function (element) {\n    return element[vendor[key.requestFullscreen]];\n  },\n\n  get exitFullscreen() {\n    return document[vendor[key.exitFullscreen]].bind(document);\n  },\n\n  get fullscreenPseudoClass() {\n    return \":\" + vendor[key.fullscreen];\n  },\n\n  addEventListener: function (type, handler, options) {\n    return document.addEventListener(vendor[key[type]], handler, options);\n  },\n  removeEventListener: function (type, handler, options) {\n    return document.removeEventListener(vendor[key[type]], handler, options);\n  },\n\n  get fullscreenEnabled() {\n    return Boolean(document[vendor[key.fullscreenEnabled]]);\n  },\n\n  set fullscreenEnabled(val) {},\n\n  get fullscreenElement() {\n    return document[vendor[key.fullscreenElement]];\n  },\n\n  set fullscreenElement(val) {},\n\n  get onfullscreenchange() {\n    return document[(\"on\" + vendor[key.fullscreenchange]).toLowerCase()];\n  },\n\n  set onfullscreenchange(handler) {\n    return document[(\"on\" + vendor[key.fullscreenchange]).toLowerCase()] = handler;\n  },\n\n  get onfullscreenerror() {\n    return document[(\"on\" + vendor[key.fullscreenerror]).toLowerCase()];\n  },\n\n  set onfullscreenerror(handler) {\n    return document[(\"on\" + vendor[key.fullscreenerror]).toLowerCase()] = handler;\n  }\n\n};\nexport default fscreen;","map":{"version":3,"mappings":"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","names":["key","fullscreenEnabled","fullscreenElement","requestFullscreen","exitFullscreen","fullscreenchange","fullscreenerror","fullscreen","webkit","moz","ms","document","window","vendor","Object","keys","requestFullscreenFunction","bind","fullscreenPseudoClass","addEventListener","type","handler","options","removeEventListener","Boolean","val","onfullscreenchange","toLowerCase","onfullscreenerror"],"sources":["/Users/evgenijgnedcik/Documents/GitHub/adminPixomnia/node_modules/fscreen/src/fscreen.js"],"sourcesContent":["const key = {\n  fullscreenEnabled: 0,\n  fullscreenElement: 1,\n  requestFullscreen: 2,\n  exitFullscreen: 3,\n  fullscreenchange: 4,\n  fullscreenerror: 5,\n  fullscreen: 6\n};\n\nconst webkit = [\n  'webkitFullscreenEnabled',\n  'webkitFullscreenElement',\n  'webkitRequestFullscreen',\n  'webkitExitFullscreen',\n  'webkitfullscreenchange',\n  'webkitfullscreenerror',\n  '-webkit-full-screen',\n];\n\nconst moz = [\n  'mozFullScreenEnabled',\n  'mozFullScreenElement',\n  'mozRequestFullScreen',\n  'mozCancelFullScreen',\n  'mozfullscreenchange',\n  'mozfullscreenerror',\n  '-moz-full-screen',\n];\n\nconst ms = [\n  'msFullscreenEnabled',\n  'msFullscreenElement',\n  'msRequestFullscreen',\n  'msExitFullscreen',\n  'MSFullscreenChange',\n  'MSFullscreenError',\n  '-ms-fullscreen',\n];\n\n// so it doesn't throw if no window or document\nconst document = typeof window !== 'undefined' && typeof window.document !== 'undefined' ? window.document : {};\n\nconst vendor = (\n  ('fullscreenEnabled' in document && Object.keys(key)) ||\n  (webkit[0] in document && webkit) ||\n  (moz[0] in document && moz) ||\n  (ms[0] in document && ms) ||\n  []\n);\n\nexport default {\n  requestFullscreen: element => element[vendor[key.requestFullscreen]](),\n  requestFullscreenFunction: element => element[vendor[key.requestFullscreen]],\n  get exitFullscreen() { return document[vendor[key.exitFullscreen]].bind(document); },\n  get fullscreenPseudoClass() { return `:${vendor[key.fullscreen]}`; },\n  addEventListener: (type, handler, options) => document.addEventListener(vendor[key[type]], handler, options),\n  removeEventListener: (type, handler, options) => document.removeEventListener(vendor[key[type]], handler, options),\n  get fullscreenEnabled() { return Boolean(document[vendor[key.fullscreenEnabled]]); },\n  set fullscreenEnabled(val) {},\n  get fullscreenElement() { return document[vendor[key.fullscreenElement]]; },\n  set fullscreenElement(val) {},\n  get onfullscreenchange() { return document[`on${vendor[key.fullscreenchange]}`.toLowerCase()]; },\n  set onfullscreenchange(handler) { return document[`on${vendor[key.fullscreenchange]}`.toLowerCase()] = handler; },\n  get onfullscreenerror() { return document[`on${vendor[key.fullscreenerror]}`.toLowerCase()]; },\n  set onfullscreenerror(handler) { return document[`on${vendor[key.fullscreenerror]}`.toLowerCase()] = handler; },\n};\n"]},"metadata":{},"sourceType":"module"}