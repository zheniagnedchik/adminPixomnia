{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { useQuery, useQueryClient } from 'react-query';\nimport { useDataProvider } from './useDataProvider';\n/**\n * Call the dataProvider.getManyReference() method and return the resolved result\n * as well as the loading state.\n *\n * The return value updates according to the request state:\n *\n * - start: { isLoading: true, refetch }\n * - success: { data: [data from store], total: [total from response], isLoading: false, refetch }\n * - error: { error: [error from response], isLoading: false, refetch }\n *\n * This hook will return the cached result when called a second time\n * with the same parameters, until the response arrives.\n *\n * @param {string} resource The resource name, e.g. 'posts'\n * @param {Params} params The getManyReference parameters { target, id, pagination, sort, filter, meta }\n * @param {Object} options Options object to pass to the queryClient.\n * May include side effects to be executed upon success or failure, e.g. { onSuccess: () => { refresh(); } }\n *\n * @typedef Params\n * @prop params.target The target resource key, e.g. 'post_id'\n * @prop params.id The identifier of the record to look for in target, e.g. '123'\n * @prop params.pagination The request pagination { page, perPage }, e.g. { page: 1, perPage: 10 }\n * @prop params.sort The request sort { field, order }, e.g. { field: 'id', order: 'DESC' }\n * @prop params.filter The request filters, e.g. { title: 'hello, world' }\n * @prop params.meta Optional meta parameters\n *\n *\n * @returns The current request state. Destructure as { data, total, error, isLoading, refetch }.\n *\n * @example\n *\n * import { useGetManyReference } from 'react-admin';\n *\n * const PostComments = ({ record }) => {\n *     // fetch all comments related to the current record\n *     const { data, isLoading, error } = useGetManyReference(\n *         'comments',\n *         { target: 'post_id', id: record.id, pagination: { page: 1, perPage: 10 }, sort: { field: 'published_at', order: 'DESC' } }\n *     );\n *     if (isLoading) { return <Loading />; }\n *     if (error) { return <p>ERROR</p>; }\n *     return <ul>{data.map(comment =>\n *         <li key={comment.id}>{comment.body}</li>\n *     )}</ul>;\n * };\n */\n\nexport var useGetManyReference = function (resource, params, options) {\n  var _a, _b, _c;\n\n  if (params === void 0) {\n    params = {};\n  }\n\n  var target = params.target,\n      id = params.id,\n      _d = params.pagination,\n      pagination = _d === void 0 ? {\n    page: 1,\n    perPage: 25\n  } : _d,\n      _e = params.sort,\n      sort = _e === void 0 ? {\n    field: 'id',\n    order: 'DESC'\n  } : _e,\n      _f = params.filter,\n      filter = _f === void 0 ? {} : _f,\n      meta = params.meta;\n  var dataProvider = useDataProvider();\n  var queryClient = useQueryClient();\n  var result = useQuery([resource, 'getManyReference', {\n    target: target,\n    id: id,\n    pagination: pagination,\n    sort: sort,\n    filter: filter,\n    meta: meta\n  }], function () {\n    return dataProvider.getManyReference(resource, {\n      target: target,\n      id: id,\n      pagination: pagination,\n      sort: sort,\n      filter: filter,\n      meta: meta\n    }).then(function (_a) {\n      var data = _a.data,\n          total = _a.total,\n          pageInfo = _a.pageInfo;\n      return {\n        data: data,\n        total: total,\n        pageInfo: pageInfo\n      };\n    });\n  }, __assign({\n    onSuccess: function (_a) {\n      var data = _a.data; // optimistically populate the getOne cache\n\n      data.forEach(function (record) {\n        queryClient.setQueryData([resource, 'getOne', {\n          id: String(record.id),\n          meta: meta\n        }], function (oldRecord) {\n          return oldRecord !== null && oldRecord !== void 0 ? oldRecord : record;\n        });\n      });\n    }\n  }, options));\n  return result.data ? __assign(__assign({}, result), {\n    data: (_a = result.data) === null || _a === void 0 ? void 0 : _a.data,\n    total: (_b = result.data) === null || _b === void 0 ? void 0 : _b.total,\n    pageInfo: (_c = result.data) === null || _c === void 0 ? void 0 : _c.pageInfo\n  }) : result;\n};","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","useQuery","useQueryClient","useDataProvider","useGetManyReference","resource","params","options","_a","_b","_c","target","id","_d","pagination","page","perPage","_e","sort","field","order","_f","filter","meta","dataProvider","queryClient","result","getManyReference","then","data","total","pageInfo","onSuccess","forEach","record","setQueryData","String","oldRecord"],"sources":["/Users/evgenijgnedcik/Documents/GitHub/adminPixomnia/node_modules/ra-core/dist/esm/dataProvider/useGetManyReference.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { useQuery, useQueryClient, } from 'react-query';\nimport { useDataProvider } from './useDataProvider';\n/**\n * Call the dataProvider.getManyReference() method and return the resolved result\n * as well as the loading state.\n *\n * The return value updates according to the request state:\n *\n * - start: { isLoading: true, refetch }\n * - success: { data: [data from store], total: [total from response], isLoading: false, refetch }\n * - error: { error: [error from response], isLoading: false, refetch }\n *\n * This hook will return the cached result when called a second time\n * with the same parameters, until the response arrives.\n *\n * @param {string} resource The resource name, e.g. 'posts'\n * @param {Params} params The getManyReference parameters { target, id, pagination, sort, filter, meta }\n * @param {Object} options Options object to pass to the queryClient.\n * May include side effects to be executed upon success or failure, e.g. { onSuccess: () => { refresh(); } }\n *\n * @typedef Params\n * @prop params.target The target resource key, e.g. 'post_id'\n * @prop params.id The identifier of the record to look for in target, e.g. '123'\n * @prop params.pagination The request pagination { page, perPage }, e.g. { page: 1, perPage: 10 }\n * @prop params.sort The request sort { field, order }, e.g. { field: 'id', order: 'DESC' }\n * @prop params.filter The request filters, e.g. { title: 'hello, world' }\n * @prop params.meta Optional meta parameters\n *\n *\n * @returns The current request state. Destructure as { data, total, error, isLoading, refetch }.\n *\n * @example\n *\n * import { useGetManyReference } from 'react-admin';\n *\n * const PostComments = ({ record }) => {\n *     // fetch all comments related to the current record\n *     const { data, isLoading, error } = useGetManyReference(\n *         'comments',\n *         { target: 'post_id', id: record.id, pagination: { page: 1, perPage: 10 }, sort: { field: 'published_at', order: 'DESC' } }\n *     );\n *     if (isLoading) { return <Loading />; }\n *     if (error) { return <p>ERROR</p>; }\n *     return <ul>{data.map(comment =>\n *         <li key={comment.id}>{comment.body}</li>\n *     )}</ul>;\n * };\n */\nexport var useGetManyReference = function (resource, params, options) {\n    var _a, _b, _c;\n    if (params === void 0) { params = {}; }\n    var target = params.target, id = params.id, _d = params.pagination, pagination = _d === void 0 ? { page: 1, perPage: 25 } : _d, _e = params.sort, sort = _e === void 0 ? { field: 'id', order: 'DESC' } : _e, _f = params.filter, filter = _f === void 0 ? {} : _f, meta = params.meta;\n    var dataProvider = useDataProvider();\n    var queryClient = useQueryClient();\n    var result = useQuery([\n        resource,\n        'getManyReference',\n        { target: target, id: id, pagination: pagination, sort: sort, filter: filter, meta: meta },\n    ], function () {\n        return dataProvider\n            .getManyReference(resource, {\n            target: target,\n            id: id,\n            pagination: pagination,\n            sort: sort,\n            filter: filter,\n            meta: meta,\n        })\n            .then(function (_a) {\n            var data = _a.data, total = _a.total, pageInfo = _a.pageInfo;\n            return ({\n                data: data,\n                total: total,\n                pageInfo: pageInfo,\n            });\n        });\n    }, __assign({ onSuccess: function (_a) {\n            var data = _a.data;\n            // optimistically populate the getOne cache\n            data.forEach(function (record) {\n                queryClient.setQueryData([resource, 'getOne', { id: String(record.id), meta: meta }], function (oldRecord) { return oldRecord !== null && oldRecord !== void 0 ? oldRecord : record; });\n            });\n        } }, options));\n    return (result.data\n        ? __assign(__assign({}, result), { data: (_a = result.data) === null || _a === void 0 ? void 0 : _a.data, total: (_b = result.data) === null || _b === void 0 ? void 0 : _b.total, pageInfo: (_c = result.data) === null || _c === void 0 ? void 0 : _c.pageInfo }) : result);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}