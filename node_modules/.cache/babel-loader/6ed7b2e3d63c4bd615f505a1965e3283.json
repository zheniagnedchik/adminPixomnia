{"ast":null,"code":"import { Mark, mergeAttributes, markInputRule, markPasteRule } from '@tiptap/core';\nconst starInputRegex = /(?:^|\\s)((?:\\*)((?:[^*]+))(?:\\*))$/;\nconst starPasteRegex = /(?:^|\\s)((?:\\*)((?:[^*]+))(?:\\*))/g;\nconst underscoreInputRegex = /(?:^|\\s)((?:_)((?:[^_]+))(?:_))$/;\nconst underscorePasteRegex = /(?:^|\\s)((?:_)((?:[^_]+))(?:_))/g;\nconst Italic = Mark.create({\n  name: 'italic',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {}\n    };\n  },\n\n  parseHTML() {\n    return [{\n      tag: 'em'\n    }, {\n      tag: 'i',\n      getAttrs: node => node.style.fontStyle !== 'normal' && null\n    }, {\n      style: 'font-style=italic'\n    }];\n  },\n\n  renderHTML(_ref) {\n    let {\n      HTMLAttributes\n    } = _ref;\n    return ['em', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n\n  addCommands() {\n    return {\n      setItalic: () => _ref2 => {\n        let {\n          commands\n        } = _ref2;\n        return commands.setMark(this.name);\n      },\n      toggleItalic: () => _ref3 => {\n        let {\n          commands\n        } = _ref3;\n        return commands.toggleMark(this.name);\n      },\n      unsetItalic: () => _ref4 => {\n        let {\n          commands\n        } = _ref4;\n        return commands.unsetMark(this.name);\n      }\n    };\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-i': () => this.editor.commands.toggleItalic(),\n      'Mod-I': () => this.editor.commands.toggleItalic()\n    };\n  },\n\n  addInputRules() {\n    return [markInputRule({\n      find: starInputRegex,\n      type: this.type\n    }), markInputRule({\n      find: underscoreInputRegex,\n      type: this.type\n    })];\n  },\n\n  addPasteRules() {\n    return [markPasteRule({\n      find: starPasteRegex,\n      type: this.type\n    }), markPasteRule({\n      find: underscorePasteRegex,\n      type: this.type\n    })];\n  }\n\n});\nexport { Italic, Italic as default, starInputRegex, starPasteRegex, underscoreInputRegex, underscorePasteRegex };","map":{"version":3,"mappings":";AA8BO,MAAMA,cAAc,GAAG,oCAAvB;AACA,MAAMC,cAAc,GAAG,oCAAvB;AACA,MAAMC,oBAAoB,GAAG,kCAA7B;AACA,MAAMC,oBAAoB,GAAG,kCAA7B;AAEM,YAAM,GAAGC,IAAI,CAACC,MAAL,CAA2B;EAC/CC,IAAI,EAAE,QADyC;;EAG/CC,UAAU;IACR,OAAO;MACLC,cAAc,EAAE;IADX,CAAP;EAGD,CAP8C;;EAS/CC,SAAS;IACP,OAAO,CACL;MACEC,GAAG,EAAE;IADP,CADK,EAIL;MACEA,GAAG,EAAE,GADP;MAEEC,QAAQ,EAAEC,IAAI,IAAKA,IAAoB,CAACC,KAArB,CAA2BC,SAA3B,KAAyC,QAAzC,IAAqD;IAF1E,CAJK,EAQL;MACED,KAAK,EAAE;IADT,CARK,CAAP;EAYD,CAtB8C;;EAwB/CE,UAAU,OAAmB;IAAA,IAAlB;MAAEP;IAAF,CAAkB;IAC3B,OAAO,CAAC,IAAD,EAAOQ,eAAe,CAAC,KAAKC,OAAL,CAAaT,cAAd,EAA8BA,cAA9B,CAAtB,EAAqE,CAArE,CAAP;EACD,CA1B8C;;EA4B/CU,WAAW;IACT,OAAO;MACLC,SAAS,EAAE,MAAM,SAAiB;QAAA,IAAhB;UAAEC;QAAF,CAAgB;QAChC,OAAOA,QAAQ,CAACC,OAAT,CAAiB,KAAKf,IAAtB,CAAP;MACD,CAHI;MAILgB,YAAY,EAAE,MAAM,SAAiB;QAAA,IAAhB;UAAEF;QAAF,CAAgB;QACnC,OAAOA,QAAQ,CAACG,UAAT,CAAoB,KAAKjB,IAAzB,CAAP;MACD,CANI;MAOLkB,WAAW,EAAE,MAAM,SAAiB;QAAA,IAAhB;UAAEJ;QAAF,CAAgB;QAClC,OAAOA,QAAQ,CAACK,SAAT,CAAmB,KAAKnB,IAAxB,CAAP;MACD;IATI,CAAP;EAWD,CAxC8C;;EA0C/CoB,oBAAoB;IAClB,OAAO;MACL,SAAS,MAAM,KAAKC,MAAL,CAAYP,QAAZ,CAAqBE,YAArB,EADV;MAEL,SAAS,MAAM,KAAKK,MAAL,CAAYP,QAAZ,CAAqBE,YAArB;IAFV,CAAP;EAID,CA/C8C;;EAiD/CM,aAAa;IACX,OAAO,CACLC,aAAa,CAAC;MACZC,IAAI,EAAE9B,cADM;MAEZ+B,IAAI,EAAE,KAAKA;IAFC,CAAD,CADR,EAKLF,aAAa,CAAC;MACZC,IAAI,EAAE5B,oBADM;MAEZ6B,IAAI,EAAE,KAAKA;IAFC,CAAD,CALR,CAAP;EAUD,CA5D8C;;EA8D/CC,aAAa;IACX,OAAO,CACLC,aAAa,CAAC;MACZH,IAAI,EAAE7B,cADM;MAEZ8B,IAAI,EAAE,KAAKA;IAFC,CAAD,CADR,EAKLE,aAAa,CAAC;MACZH,IAAI,EAAE3B,oBADM;MAEZ4B,IAAI,EAAE,KAAKA;IAFC,CAAD,CALR,CAAP;EAUD;;AAzE8C,CAA3B,CAAT","names":["starInputRegex","starPasteRegex","underscoreInputRegex","underscorePasteRegex","Mark","create","name","addOptions","HTMLAttributes","parseHTML","tag","getAttrs","node","style","fontStyle","renderHTML","mergeAttributes","options","addCommands","setItalic","commands","setMark","toggleItalic","toggleMark","unsetItalic","unsetMark","addKeyboardShortcuts","editor","addInputRules","markInputRule","find","type","addPasteRules","markPasteRule"],"sources":["/Users/evgenijgnedcik/Documents/GitHub/adminPixomnia/node_modules/@tiptap/extension-italic/src/italic.ts"],"sourcesContent":["import {\n  Mark,\n  markInputRule,\n  markPasteRule,\n  mergeAttributes,\n} from '@tiptap/core'\n\nexport interface ItalicOptions {\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    italic: {\n      /**\n       * Set an italic mark\n       */\n      setItalic: () => ReturnType,\n      /**\n       * Toggle an italic mark\n       */\n      toggleItalic: () => ReturnType,\n      /**\n       * Unset an italic mark\n       */\n      unsetItalic: () => ReturnType,\n    }\n  }\n}\n\nexport const starInputRegex = /(?:^|\\s)((?:\\*)((?:[^*]+))(?:\\*))$/\nexport const starPasteRegex = /(?:^|\\s)((?:\\*)((?:[^*]+))(?:\\*))/g\nexport const underscoreInputRegex = /(?:^|\\s)((?:_)((?:[^_]+))(?:_))$/\nexport const underscorePasteRegex = /(?:^|\\s)((?:_)((?:[^_]+))(?:_))/g\n\nexport const Italic = Mark.create<ItalicOptions>({\n  name: 'italic',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'em',\n      },\n      {\n        tag: 'i',\n        getAttrs: node => (node as HTMLElement).style.fontStyle !== 'normal' && null,\n      },\n      {\n        style: 'font-style=italic',\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['em', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setItalic: () => ({ commands }) => {\n        return commands.setMark(this.name)\n      },\n      toggleItalic: () => ({ commands }) => {\n        return commands.toggleMark(this.name)\n      },\n      unsetItalic: () => ({ commands }) => {\n        return commands.unsetMark(this.name)\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-i': () => this.editor.commands.toggleItalic(),\n      'Mod-I': () => this.editor.commands.toggleItalic(),\n    }\n  },\n\n  addInputRules() {\n    return [\n      markInputRule({\n        find: starInputRegex,\n        type: this.type,\n      }),\n      markInputRule({\n        find: underscoreInputRegex,\n        type: this.type,\n      }),\n    ]\n  },\n\n  addPasteRules() {\n    return [\n      markPasteRule({\n        find: starPasteRegex,\n        type: this.type,\n      }),\n      markPasteRule({\n        find: underscorePasteRegex,\n        type: this.type,\n      }),\n    ]\n  },\n})\n"]},"metadata":{},"sourceType":"module"}