{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport Typography from '@mui/material/Typography';\nimport { useRecordContext } from 'ra-core';\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { fieldPropTypes } from './types';\n/**\n * Display a numeric value as a locale string.\n *\n * Uses Intl.NumberFormat() if available, passing the locales and options props as arguments.\n * If Intl is not available, it outputs number as is (and ignores the locales and options props).\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString\n * @example\n * <NumberField source=\"score\" />\n * // renders the record { id: 1234, score: 567 } as\n * <span>567</span>\n *\n * <NumberField source=\"score\" className=\"red\" />\n * // renders the record { id: 1234, score: 567 } as\n * <span class=\"red\">567</span>\n *\n * <NumberField source=\"share\" options={{ style: 'percent' }} />\n * // renders the record { id: 1234, share: 0.2545 } as\n * <span>25%</span>\n *\n * <NumberField source=\"price\" options={{ style: 'currency', currency: 'USD' }} />\n * // renders the record { id: 1234, price: 25.99 } as\n * <span>$25.99</span>\n *\n * <NumberField source=\"price\" locales=\"fr-FR\" options={{ style: 'currency', currency: 'USD' }} />\n * // renders the record { id: 1234, price: 25.99 } as\n * <span>25,99 $US</span>\n */\n\nexport var NumberField = memo(function (props) {\n  var className = props.className,\n      emptyText = props.emptyText,\n      source = props.source,\n      locales = props.locales,\n      options = props.options,\n      textAlign = props.textAlign,\n      rest = __rest(props, [\"className\", \"emptyText\", \"source\", \"locales\", \"options\", \"textAlign\"]);\n\n  var record = useRecordContext(props);\n\n  if (!record) {\n    return null;\n  }\n\n  var value = get(record, source);\n\n  if (value == null) {\n    return emptyText ? React.createElement(Typography, __assign({\n      component: \"span\",\n      variant: \"body2\",\n      className: className\n    }, sanitizeFieldRestProps(rest)), emptyText) : null;\n  }\n\n  return React.createElement(Typography, __assign({\n    variant: \"body2\",\n    component: \"span\",\n    className: className\n  }, sanitizeFieldRestProps(rest)), hasNumberFormat ? value.toLocaleString(locales, options) : value);\n}); // what? TypeScript loses the displayName if we don't set it explicitly\n\nNumberField.displayName = 'NumberField';\nNumberField.defaultProps = {\n  textAlign: 'right'\n};\nNumberField.propTypes = __assign(__assign(__assign({}, Typography.propTypes), fieldPropTypes), {\n  locales: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n  options: PropTypes.object\n});\nvar hasNumberFormat = !!(typeof Intl === 'object' && Intl && typeof Intl.NumberFormat === 'function');","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","React","memo","PropTypes","get","Typography","useRecordContext","sanitizeFieldRestProps","fieldPropTypes","NumberField","props","className","emptyText","source","locales","options","textAlign","rest","record","value","createElement","component","variant","hasNumberFormat","toLocaleString","displayName","defaultProps","propTypes","oneOfType","string","arrayOf","object","Intl","NumberFormat"],"sources":["/Users/evgenijgnedcik/Documents/GitHub/adminPixomnia/node_modules/ra-ui-materialui/dist/esm/field/NumberField.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from 'react';\nimport { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport Typography from '@mui/material/Typography';\nimport { useRecordContext } from 'ra-core';\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { fieldPropTypes } from './types';\n/**\n * Display a numeric value as a locale string.\n *\n * Uses Intl.NumberFormat() if available, passing the locales and options props as arguments.\n * If Intl is not available, it outputs number as is (and ignores the locales and options props).\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString\n * @example\n * <NumberField source=\"score\" />\n * // renders the record { id: 1234, score: 567 } as\n * <span>567</span>\n *\n * <NumberField source=\"score\" className=\"red\" />\n * // renders the record { id: 1234, score: 567 } as\n * <span class=\"red\">567</span>\n *\n * <NumberField source=\"share\" options={{ style: 'percent' }} />\n * // renders the record { id: 1234, share: 0.2545 } as\n * <span>25%</span>\n *\n * <NumberField source=\"price\" options={{ style: 'currency', currency: 'USD' }} />\n * // renders the record { id: 1234, price: 25.99 } as\n * <span>$25.99</span>\n *\n * <NumberField source=\"price\" locales=\"fr-FR\" options={{ style: 'currency', currency: 'USD' }} />\n * // renders the record { id: 1234, price: 25.99 } as\n * <span>25,99 $US</span>\n */\nexport var NumberField = memo(function (props) {\n    var className = props.className, emptyText = props.emptyText, source = props.source, locales = props.locales, options = props.options, textAlign = props.textAlign, rest = __rest(props, [\"className\", \"emptyText\", \"source\", \"locales\", \"options\", \"textAlign\"]);\n    var record = useRecordContext(props);\n    if (!record) {\n        return null;\n    }\n    var value = get(record, source);\n    if (value == null) {\n        return emptyText ? (React.createElement(Typography, __assign({ component: \"span\", variant: \"body2\", className: className }, sanitizeFieldRestProps(rest)), emptyText)) : null;\n    }\n    return (React.createElement(Typography, __assign({ variant: \"body2\", component: \"span\", className: className }, sanitizeFieldRestProps(rest)), hasNumberFormat ? value.toLocaleString(locales, options) : value));\n});\n// what? TypeScript loses the displayName if we don't set it explicitly\nNumberField.displayName = 'NumberField';\nNumberField.defaultProps = {\n    textAlign: 'right',\n};\nNumberField.propTypes = __assign(__assign(__assign({}, Typography.propTypes), fieldPropTypes), { locales: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.arrayOf(PropTypes.string),\n    ]), options: PropTypes.object });\nvar hasNumberFormat = !!(typeof Intl === 'object' &&\n    Intl &&\n    typeof Intl.NumberFormat === 'function');\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}