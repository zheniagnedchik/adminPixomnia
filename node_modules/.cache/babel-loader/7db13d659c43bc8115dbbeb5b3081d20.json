{"ast":null,"code":"import '@tiptap/extension-text-style';\nimport { Extension } from '@tiptap/core';\nconst Color = Extension.create({\n  name: 'color',\n\n  addOptions() {\n    return {\n      types: ['textStyle']\n    };\n  },\n\n  addGlobalAttributes() {\n    return [{\n      types: this.options.types,\n      attributes: {\n        color: {\n          default: null,\n          parseHTML: element => {\n            var _a;\n\n            return (_a = element.style.color) === null || _a === void 0 ? void 0 : _a.replace(/['\"]+/g, '');\n          },\n          renderHTML: attributes => {\n            if (!attributes.color) {\n              return {};\n            }\n\n            return {\n              style: `color: ${attributes.color}`\n            };\n          }\n        }\n      }\n    }];\n  },\n\n  addCommands() {\n    return {\n      setColor: color => _ref => {\n        let {\n          chain\n        } = _ref;\n        return chain().setMark('textStyle', {\n          color\n        }).run();\n      },\n      unsetColor: () => _ref2 => {\n        let {\n          chain\n        } = _ref2;\n        return chain().setMark('textStyle', {\n          color: null\n        }).removeEmptyTextStyle().run();\n      }\n    };\n  }\n\n});\nexport { Color, Color as default };","map":{"version":3,"mappings":";;AAuBa,WAAK,GAAGA,SAAS,CAACC,MAAV,CAA+B;EAClDC,IAAI,EAAE,OAD4C;;EAGlDC,UAAU;IACR,OAAO;MACLC,KAAK,EAAE,CAAC,WAAD;IADF,CAAP;EAGD,CAPiD;;EASlDC,mBAAmB;IACjB,OAAO,CACL;MACED,KAAK,EAAE,KAAKE,OAAL,CAAaF,KADtB;MAEEG,UAAU,EAAE;QACVC,KAAK,EAAE;UACLC,OAAO,EAAE,IADJ;UAELC,SAAS,EAAEC,OAAO;YAAA;;YAAI,oBAAO,CAACC,KAAR,CAAcJ,KAAd,MAAmB,IAAnB,IAAmBK,aAAnB,GAAmB,MAAnB,GAAmBA,GAAEC,OAAF,CAAU,QAAV,EAAoB,EAApB,CAAnB;UAA0C,CAF3D;UAGLC,UAAU,EAAER,UAAU,IAAG;YACvB,IAAI,CAACA,UAAU,CAACC,KAAhB,EAAuB;cACrB,OAAO,EAAP;YACD;;YAED,OAAO;cACLI,KAAK,EAAE,UAAUL,UAAU,CAACC,KAAO;YAD9B,CAAP;UAGD;QAXI;MADG;IAFd,CADK,CAAP;EAoBD,CA9BiD;;EAgClDQ,WAAW;IACT,OAAO;MACLC,QAAQ,EAAET,KAAK,IAAI,QAAc;QAAA,IAAb;UAAEU;QAAF,CAAa;QAC/B,OAAOA,KAAK,GACTC,OADI,CACI,WADJ,EACiB;UAAEX;QAAF,CADjB,EAEJY,GAFI,EAAP;MAGD,CALI;MAMLC,UAAU,EAAE,MAAM,SAAc;QAAA,IAAb;UAAEH;QAAF,CAAa;QAC9B,OAAOA,KAAK,GACTC,OADI,CACI,WADJ,EACiB;UAAEX,KAAK,EAAE;QAAT,CADjB,EAEJc,oBAFI,GAGJF,GAHI,EAAP;MAID;IAXI,CAAP;EAaD;;AA9CiD,CAA/B,CAAR","names":["Extension","create","name","addOptions","types","addGlobalAttributes","options","attributes","color","default","parseHTML","element","style","_a","replace","renderHTML","addCommands","setColor","chain","setMark","run","unsetColor","removeEmptyTextStyle"],"sources":["/Users/evgenijgnedcik/Documents/GitHub/adminPixomnia/node_modules/@tiptap/extension-color/src/color.ts"],"sourcesContent":["import '@tiptap/extension-text-style'\n\nimport { Extension } from '@tiptap/core'\n\nexport type ColorOptions = {\n  types: string[],\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    color: {\n      /**\n       * Set the text color\n       */\n      setColor: (color: string) => ReturnType,\n      /**\n       * Unset the text color\n       */\n      unsetColor: () => ReturnType,\n    }\n  }\n}\n\nexport const Color = Extension.create<ColorOptions>({\n  name: 'color',\n\n  addOptions() {\n    return {\n      types: ['textStyle'],\n    }\n  },\n\n  addGlobalAttributes() {\n    return [\n      {\n        types: this.options.types,\n        attributes: {\n          color: {\n            default: null,\n            parseHTML: element => element.style.color?.replace(/['\"]+/g, ''),\n            renderHTML: attributes => {\n              if (!attributes.color) {\n                return {}\n              }\n\n              return {\n                style: `color: ${attributes.color}`,\n              }\n            },\n          },\n        },\n      },\n    ]\n  },\n\n  addCommands() {\n    return {\n      setColor: color => ({ chain }) => {\n        return chain()\n          .setMark('textStyle', { color })\n          .run()\n      },\n      unsetColor: () => ({ chain }) => {\n        return chain()\n          .setMark('textStyle', { color: null })\n          .removeEmptyTextStyle()\n          .run()\n      },\n    }\n  },\n})\n"]},"metadata":{},"sourceType":"module"}