{"ast":null,"code":"import { useState, useMemo } from 'react';\nimport { useResourceContext } from '../core';\nimport { useLocaleState } from './useLocaleState';\nimport { useTranslateLabel } from './useTranslateLabel';\n/**\n * Hook supplying the logic to translate a field value in multiple languages.\n *\n * @param options The hook options\n * @param {string} options.defaultLocale The locale of the default selected locale. Defaults to 'en'.\n * @param {string[]} options.locales An array of the supported locales. Each is an object with a locale and a name property. For example { locale: 'en', name: 'English' }.\n *\n * @returns\n * An object with following properties and methods:\n * - selectedLocale: The locale of the currently selected locale\n * - locales: An array of the supported locales\n * - getLabel: A function which returns the translated label for the given field\n * - getSource: A function which returns the source for the given field\n * - selectLocale: A function which set the selected locale\n */\n\nexport var useTranslatable = function (options) {\n  var localeFromUI = useLocaleState()[0];\n  var _a = options.defaultLocale,\n      defaultLocale = _a === void 0 ? localeFromUI : _a,\n      locales = options.locales;\n\n  var _b = useState(defaultLocale),\n      selectedLocale = _b[0],\n      setSelectedLocale = _b[1];\n\n  var resource = useResourceContext({});\n  var translateLabel = useTranslateLabel();\n  var context = useMemo(function () {\n    return {\n      getSource: function (source, locale) {\n        if (locale === void 0) {\n          locale = selectedLocale;\n        }\n\n        return \"\".concat(source, \".\").concat(locale);\n      },\n      getLabel: function (source, label) {\n        return translateLabel({\n          source: source,\n          resource: resource,\n          label: label\n        });\n      },\n      locales: locales,\n      selectedLocale: selectedLocale,\n      selectLocale: setSelectedLocale\n    };\n  }, [locales, resource, selectedLocale, translateLabel]);\n  return context;\n};","map":{"version":3,"names":["useState","useMemo","useResourceContext","useLocaleState","useTranslateLabel","useTranslatable","options","localeFromUI","_a","defaultLocale","locales","_b","selectedLocale","setSelectedLocale","resource","translateLabel","context","getSource","source","locale","concat","getLabel","label","selectLocale"],"sources":["/Users/evgenijgnedcik/Documents/GitHub/adminPixomnia/node_modules/ra-core/dist/esm/i18n/useTranslatable.js"],"sourcesContent":["import { useState, useMemo } from 'react';\nimport { useResourceContext } from '../core';\nimport { useLocaleState } from './useLocaleState';\nimport { useTranslateLabel } from './useTranslateLabel';\n/**\n * Hook supplying the logic to translate a field value in multiple languages.\n *\n * @param options The hook options\n * @param {string} options.defaultLocale The locale of the default selected locale. Defaults to 'en'.\n * @param {string[]} options.locales An array of the supported locales. Each is an object with a locale and a name property. For example { locale: 'en', name: 'English' }.\n *\n * @returns\n * An object with following properties and methods:\n * - selectedLocale: The locale of the currently selected locale\n * - locales: An array of the supported locales\n * - getLabel: A function which returns the translated label for the given field\n * - getSource: A function which returns the source for the given field\n * - selectLocale: A function which set the selected locale\n */\nexport var useTranslatable = function (options) {\n    var localeFromUI = useLocaleState()[0];\n    var _a = options.defaultLocale, defaultLocale = _a === void 0 ? localeFromUI : _a, locales = options.locales;\n    var _b = useState(defaultLocale), selectedLocale = _b[0], setSelectedLocale = _b[1];\n    var resource = useResourceContext({});\n    var translateLabel = useTranslateLabel();\n    var context = useMemo(function () { return ({\n        getSource: function (source, locale) {\n            if (locale === void 0) { locale = selectedLocale; }\n            return \"\".concat(source, \".\").concat(locale);\n        },\n        getLabel: function (source, label) {\n            return translateLabel({ source: source, resource: resource, label: label });\n        },\n        locales: locales,\n        selectedLocale: selectedLocale,\n        selectLocale: setSelectedLocale,\n    }); }, [locales, resource, selectedLocale, translateLabel]);\n    return context;\n};\n"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,OAAnB,QAAkC,OAAlC;AACA,SAASC,kBAAT,QAAmC,SAAnC;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,eAAe,GAAG,UAAUC,OAAV,EAAmB;EAC5C,IAAIC,YAAY,GAAGJ,cAAc,GAAG,CAAH,CAAjC;EACA,IAAIK,EAAE,GAAGF,OAAO,CAACG,aAAjB;EAAA,IAAgCA,aAAa,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgBD,YAAhB,GAA+BC,EAA/E;EAAA,IAAmFE,OAAO,GAAGJ,OAAO,CAACI,OAArG;;EACA,IAAIC,EAAE,GAAGX,QAAQ,CAACS,aAAD,CAAjB;EAAA,IAAkCG,cAAc,GAAGD,EAAE,CAAC,CAAD,CAArD;EAAA,IAA0DE,iBAAiB,GAAGF,EAAE,CAAC,CAAD,CAAhF;;EACA,IAAIG,QAAQ,GAAGZ,kBAAkB,CAAC,EAAD,CAAjC;EACA,IAAIa,cAAc,GAAGX,iBAAiB,EAAtC;EACA,IAAIY,OAAO,GAAGf,OAAO,CAAC,YAAY;IAAE,OAAQ;MACxCgB,SAAS,EAAE,UAAUC,MAAV,EAAkBC,MAAlB,EAA0B;QACjC,IAAIA,MAAM,KAAK,KAAK,CAApB,EAAuB;UAAEA,MAAM,GAAGP,cAAT;QAA0B;;QACnD,OAAO,GAAGQ,MAAH,CAAUF,MAAV,EAAkB,GAAlB,EAAuBE,MAAvB,CAA8BD,MAA9B,CAAP;MACH,CAJuC;MAKxCE,QAAQ,EAAE,UAAUH,MAAV,EAAkBI,KAAlB,EAAyB;QAC/B,OAAOP,cAAc,CAAC;UAAEG,MAAM,EAAEA,MAAV;UAAkBJ,QAAQ,EAAEA,QAA5B;UAAsCQ,KAAK,EAAEA;QAA7C,CAAD,CAArB;MACH,CAPuC;MAQxCZ,OAAO,EAAEA,OAR+B;MASxCE,cAAc,EAAEA,cATwB;MAUxCW,YAAY,EAAEV;IAV0B,CAAR;EAW/B,CAXgB,EAWd,CAACH,OAAD,EAAUI,QAAV,EAAoBF,cAApB,EAAoCG,cAApC,CAXc,CAArB;EAYA,OAAOC,OAAP;AACH,CAnBM"},"metadata":{},"sourceType":"module"}