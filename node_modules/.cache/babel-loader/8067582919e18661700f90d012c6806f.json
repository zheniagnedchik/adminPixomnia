{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport { useEventCallback } from '../util';\nimport { useStoreContext } from './useStoreContext';\n/**\n * Read and write a value from the Store\n *\n * useState-like hook using the global Store for persistence.\n * Each time a store value is changed, all components using this value will be re-rendered.\n *\n * @param {string} key Name of the store key. Separate with dots to namespace, e.g. 'posts.list.columns'.\n * @param {any} defaultValue Default value\n *\n * @return {Object} A value and a setter for the value, in an array - just like for useState()\n *\n * @example\n * import { useStore } from 'react-admin';\n *\n * const PostList = props => {\n *     const [density] = useStore('posts.list.density', 'small');\n *\n *     return (\n *         <List {...props}>\n *             <Datagrid size={density}>\n *                 ...\n *             </Datagrid>\n *         </List>\n *     );\n * }\n *\n * // Clicking on this button will trigger a rerender of the PostList!\n * const ChangeDensity: FC<any> = () => {\n *     const [density, setDensity] = useStore('posts.list.density', 'small');\n *\n *     const changeDensity = (): void => {\n *         setDensity(density === 'small' ? 'medium' : 'small');\n *     };\n *\n *     return (\n *         <Button onClick={changeDensity}>\n *             {`Change density (current ${density})`}\n *         </Button>\n *     );\n * };\n */\n\nexport var useStore = function (key, defaultValue) {\n  var _a = useStoreContext(),\n      getItem = _a.getItem,\n      setItem = _a.setItem,\n      subscribe = _a.subscribe;\n\n  var _b = useState(function () {\n    return getItem(key, defaultValue);\n  }),\n      value = _b[0],\n      setValue = _b[1]; // subscribe to changes on this key, and change the state when they happen\n\n\n  useEffect(function () {\n    var unsubscribe = subscribe(key, function (newValue) {\n      setValue(typeof newValue === 'undefined' ? defaultValue : newValue);\n    });\n    return function () {\n      return unsubscribe();\n    };\n  }, [key, subscribe, defaultValue]);\n  var set = useEventCallback(function (valueParam, runtimeDefaultValue) {\n    var newValue = typeof valueParam === 'function' ? valueParam(value) : valueParam; // we only set the value in the Store;\n    // the value in the local state will be updated\n    // by the useEffect during the next render\n\n    setItem(key, typeof newValue === 'undefined' ? typeof runtimeDefaultValue === 'undefined' ? defaultValue : runtimeDefaultValue : newValue);\n  }, [key, setItem, defaultValue, value]);\n  return [value, set];\n};","map":{"version":3,"names":["useState","useEffect","useEventCallback","useStoreContext","useStore","key","defaultValue","_a","getItem","setItem","subscribe","_b","value","setValue","unsubscribe","newValue","set","valueParam","runtimeDefaultValue"],"sources":["/Users/evgenijgnedcik/Documents/GitHub/adminPixomnia/node_modules/ra-core/dist/esm/store/useStore.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useEventCallback } from '../util';\nimport { useStoreContext } from './useStoreContext';\n/**\n * Read and write a value from the Store\n *\n * useState-like hook using the global Store for persistence.\n * Each time a store value is changed, all components using this value will be re-rendered.\n *\n * @param {string} key Name of the store key. Separate with dots to namespace, e.g. 'posts.list.columns'.\n * @param {any} defaultValue Default value\n *\n * @return {Object} A value and a setter for the value, in an array - just like for useState()\n *\n * @example\n * import { useStore } from 'react-admin';\n *\n * const PostList = props => {\n *     const [density] = useStore('posts.list.density', 'small');\n *\n *     return (\n *         <List {...props}>\n *             <Datagrid size={density}>\n *                 ...\n *             </Datagrid>\n *         </List>\n *     );\n * }\n *\n * // Clicking on this button will trigger a rerender of the PostList!\n * const ChangeDensity: FC<any> = () => {\n *     const [density, setDensity] = useStore('posts.list.density', 'small');\n *\n *     const changeDensity = (): void => {\n *         setDensity(density === 'small' ? 'medium' : 'small');\n *     };\n *\n *     return (\n *         <Button onClick={changeDensity}>\n *             {`Change density (current ${density})`}\n *         </Button>\n *     );\n * };\n */\nexport var useStore = function (key, defaultValue) {\n    var _a = useStoreContext(), getItem = _a.getItem, setItem = _a.setItem, subscribe = _a.subscribe;\n    var _b = useState(function () { return getItem(key, defaultValue); }), value = _b[0], setValue = _b[1];\n    // subscribe to changes on this key, and change the state when they happen\n    useEffect(function () {\n        var unsubscribe = subscribe(key, function (newValue) {\n            setValue(typeof newValue === 'undefined' ? defaultValue : newValue);\n        });\n        return function () { return unsubscribe(); };\n    }, [key, subscribe, defaultValue]);\n    var set = useEventCallback(function (valueParam, runtimeDefaultValue) {\n        var newValue = typeof valueParam === 'function'\n            ? valueParam(value)\n            : valueParam;\n        // we only set the value in the Store;\n        // the value in the local state will be updated\n        // by the useEffect during the next render\n        setItem(key, typeof newValue === 'undefined'\n            ? typeof runtimeDefaultValue === 'undefined'\n                ? defaultValue\n                : runtimeDefaultValue\n            : newValue);\n    }, [key, setItem, defaultValue, value]);\n    return [value, set];\n};\n"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,gBAAT,QAAiC,SAAjC;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,QAAQ,GAAG,UAAUC,GAAV,EAAeC,YAAf,EAA6B;EAC/C,IAAIC,EAAE,GAAGJ,eAAe,EAAxB;EAAA,IAA4BK,OAAO,GAAGD,EAAE,CAACC,OAAzC;EAAA,IAAkDC,OAAO,GAAGF,EAAE,CAACE,OAA/D;EAAA,IAAwEC,SAAS,GAAGH,EAAE,CAACG,SAAvF;;EACA,IAAIC,EAAE,GAAGX,QAAQ,CAAC,YAAY;IAAE,OAAOQ,OAAO,CAACH,GAAD,EAAMC,YAAN,CAAd;EAAoC,CAAnD,CAAjB;EAAA,IAAuEM,KAAK,GAAGD,EAAE,CAAC,CAAD,CAAjF;EAAA,IAAsFE,QAAQ,GAAGF,EAAE,CAAC,CAAD,CAAnG,CAF+C,CAG/C;;;EACAV,SAAS,CAAC,YAAY;IAClB,IAAIa,WAAW,GAAGJ,SAAS,CAACL,GAAD,EAAM,UAAUU,QAAV,EAAoB;MACjDF,QAAQ,CAAC,OAAOE,QAAP,KAAoB,WAApB,GAAkCT,YAAlC,GAAiDS,QAAlD,CAAR;IACH,CAF0B,CAA3B;IAGA,OAAO,YAAY;MAAE,OAAOD,WAAW,EAAlB;IAAuB,CAA5C;EACH,CALQ,EAKN,CAACT,GAAD,EAAMK,SAAN,EAAiBJ,YAAjB,CALM,CAAT;EAMA,IAAIU,GAAG,GAAGd,gBAAgB,CAAC,UAAUe,UAAV,EAAsBC,mBAAtB,EAA2C;IAClE,IAAIH,QAAQ,GAAG,OAAOE,UAAP,KAAsB,UAAtB,GACTA,UAAU,CAACL,KAAD,CADD,GAETK,UAFN,CADkE,CAIlE;IACA;IACA;;IACAR,OAAO,CAACJ,GAAD,EAAM,OAAOU,QAAP,KAAoB,WAApB,GACP,OAAOG,mBAAP,KAA+B,WAA/B,GACIZ,YADJ,GAEIY,mBAHG,GAIPH,QAJC,CAAP;EAKH,CAZyB,EAYvB,CAACV,GAAD,EAAMI,OAAN,EAAeH,YAAf,EAA6BM,KAA7B,CAZuB,CAA1B;EAaA,OAAO,CAACA,KAAD,EAAQI,GAAR,CAAP;AACH,CAxBM"},"metadata":{},"sourceType":"module"}