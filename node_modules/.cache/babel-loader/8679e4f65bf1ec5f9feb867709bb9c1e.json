{"ast":null,"code":"import { useCallback, useEffect, useState } from 'react';\nimport get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\nimport { useFormState } from 'react-hook-form';\nimport { useFormGroups } from './useFormGroups';\n/**\n * Retrieve a specific form group data such as its validation status (valid/invalid) or\n * or whether its inputs have been updated (dirty/pristine)\n *\n * @example\n * import { Edit, SimpleForm, TextInput, FormGroupContextProvider, useFormGroup, minLength } from 'react-admin';\n * import { Accordion, AccordionDetails, AccordionSummary, Typography } from '@mui/material';\n * import ExpandMoreIcon from '@mui/icons-material/ExpandMoreIcon';\n *\n * const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <TextInput source=\"title\" />\n *             <FormGroupContextProvider name=\"options\">\n *                 <Accordion>\n *                     <AccordionSummary\n *                         expandIcon={<ExpandMoreIcon />}\n *                         aria-controls=\"options-content\"\n *                         id=\"options-header\"\n *                     >\n *                         <AccordionSectionTitle name=\"options\">Options</AccordionSectionTitle>\n *                     </AccordionSummary>\n *                     <AccordionDetails id=\"options-content\" aria-labelledby=\"options-header\">\n *                         <TextInput source=\"teaser\" validate={minLength(20)} />\n *                     </AccordionDetails>\n *                 </Accordion>\n *             </FormGroupContextProvider>\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * const AccordionSectionTitle = ({ children, name }) => {\n *     const formGroupState = useFormGroup(name);\n *     return (\n *         <Typography color={!formGroupState.isValid && formGroupState.isDirty ? 'error' : 'inherit'}>\n *             {children}\n *         </Typography>\n *     );\n * }\n *\n * @param {string} name The form group name\n * @returns {FormGroupState} The form group state\n */\n\nexport var useFormGroup = function (name) {\n  var _a = useFormState(),\n      dirtyFields = _a.dirtyFields,\n      touchedFields = _a.touchedFields,\n      errors = _a.errors;\n\n  var formGroups = useFormGroups();\n\n  var _b = useState({\n    errors: undefined,\n    isDirty: false,\n    isTouched: false,\n    isValid: true\n  }),\n      state = _b[0],\n      setState = _b[1];\n\n  var updateGroupState = useCallback(function () {\n    var fields = formGroups.getGroupFields(name);\n    var fieldStates = fields.map(function (field) {\n      return {\n        name: field,\n        error: get(errors, field, undefined),\n        isDirty: get(dirtyFields, field, false),\n        isValid: get(errors, field, undefined) == undefined,\n        isTouched: get(touchedFields, field, false)\n      };\n    }).filter(function (fieldState) {\n      return fieldState != undefined;\n    }); // eslint-disable-line\n\n    var newState = getFormGroupState(fieldStates);\n    setState(function (oldState) {\n      if (!isEqual(oldState, newState)) {\n        return newState;\n      }\n\n      return oldState;\n    });\n  }, [dirtyFields, errors, touchedFields, formGroups, name]);\n  useEffect(function () {\n    updateGroupState();\n  }, // eslint-disable-next-line\n  [// eslint-disable-next-line\n  JSON.stringify({\n    dirtyFields: dirtyFields,\n    errors: errors,\n    touchedFields: touchedFields\n  }), updateGroupState]);\n  useEffect(function () {\n    // Whenever the group content changes (input are added or removed)\n    // we must update its state\n    return formGroups.subscribe(name, function () {\n      updateGroupState();\n    });\n  }, [formGroups, name, updateGroupState]);\n  return state;\n};\n/**\n * Get the state of a form group\n *\n * @param {FieldState[]} fieldStates A map of field states from react-hook-form where the key is the field name.\n * @returns {FormGroupState} The state of the group.\n */\n\nexport var getFormGroupState = function (fieldStates) {\n  return fieldStates.reduce(function (acc, fieldState) {\n    var errors = acc.errors || {};\n\n    if (fieldState.error) {\n      errors[fieldState.name] = fieldState.error;\n    }\n\n    var newState = {\n      isDirty: acc.isDirty || fieldState.isDirty,\n      errors: errors,\n      isTouched: acc.isTouched || fieldState.isTouched,\n      isValid: acc.isValid && fieldState.isValid\n    };\n    return newState;\n  }, {\n    isDirty: false,\n    errors: undefined,\n    isValid: true,\n    isTouched: false\n  });\n};","map":{"version":3,"names":["useCallback","useEffect","useState","get","isEqual","useFormState","useFormGroups","useFormGroup","name","_a","dirtyFields","touchedFields","errors","formGroups","_b","undefined","isDirty","isTouched","isValid","state","setState","updateGroupState","fields","getGroupFields","fieldStates","map","field","error","filter","fieldState","newState","getFormGroupState","oldState","JSON","stringify","subscribe","reduce","acc"],"sources":["/Users/evgenijgnedcik/Documents/GitHub/adminPixomnia/node_modules/ra-core/dist/esm/form/useFormGroup.js"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\nimport { useFormState } from 'react-hook-form';\nimport { useFormGroups } from './useFormGroups';\n/**\n * Retrieve a specific form group data such as its validation status (valid/invalid) or\n * or whether its inputs have been updated (dirty/pristine)\n *\n * @example\n * import { Edit, SimpleForm, TextInput, FormGroupContextProvider, useFormGroup, minLength } from 'react-admin';\n * import { Accordion, AccordionDetails, AccordionSummary, Typography } from '@mui/material';\n * import ExpandMoreIcon from '@mui/icons-material/ExpandMoreIcon';\n *\n * const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <TextInput source=\"title\" />\n *             <FormGroupContextProvider name=\"options\">\n *                 <Accordion>\n *                     <AccordionSummary\n *                         expandIcon={<ExpandMoreIcon />}\n *                         aria-controls=\"options-content\"\n *                         id=\"options-header\"\n *                     >\n *                         <AccordionSectionTitle name=\"options\">Options</AccordionSectionTitle>\n *                     </AccordionSummary>\n *                     <AccordionDetails id=\"options-content\" aria-labelledby=\"options-header\">\n *                         <TextInput source=\"teaser\" validate={minLength(20)} />\n *                     </AccordionDetails>\n *                 </Accordion>\n *             </FormGroupContextProvider>\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * const AccordionSectionTitle = ({ children, name }) => {\n *     const formGroupState = useFormGroup(name);\n *     return (\n *         <Typography color={!formGroupState.isValid && formGroupState.isDirty ? 'error' : 'inherit'}>\n *             {children}\n *         </Typography>\n *     );\n * }\n *\n * @param {string} name The form group name\n * @returns {FormGroupState} The form group state\n */\nexport var useFormGroup = function (name) {\n    var _a = useFormState(), dirtyFields = _a.dirtyFields, touchedFields = _a.touchedFields, errors = _a.errors;\n    var formGroups = useFormGroups();\n    var _b = useState({\n        errors: undefined,\n        isDirty: false,\n        isTouched: false,\n        isValid: true,\n    }), state = _b[0], setState = _b[1];\n    var updateGroupState = useCallback(function () {\n        var fields = formGroups.getGroupFields(name);\n        var fieldStates = fields\n            .map(function (field) {\n            return {\n                name: field,\n                error: get(errors, field, undefined),\n                isDirty: get(dirtyFields, field, false),\n                isValid: get(errors, field, undefined) == undefined,\n                isTouched: get(touchedFields, field, false),\n            };\n        })\n            .filter(function (fieldState) { return fieldState != undefined; }); // eslint-disable-line\n        var newState = getFormGroupState(fieldStates);\n        setState(function (oldState) {\n            if (!isEqual(oldState, newState)) {\n                return newState;\n            }\n            return oldState;\n        });\n    }, [dirtyFields, errors, touchedFields, formGroups, name]);\n    useEffect(function () {\n        updateGroupState();\n    }, \n    // eslint-disable-next-line\n    [\n        // eslint-disable-next-line\n        JSON.stringify({ dirtyFields: dirtyFields, errors: errors, touchedFields: touchedFields }),\n        updateGroupState,\n    ]);\n    useEffect(function () {\n        // Whenever the group content changes (input are added or removed)\n        // we must update its state\n        return formGroups.subscribe(name, function () {\n            updateGroupState();\n        });\n    }, [formGroups, name, updateGroupState]);\n    return state;\n};\n/**\n * Get the state of a form group\n *\n * @param {FieldState[]} fieldStates A map of field states from react-hook-form where the key is the field name.\n * @returns {FormGroupState} The state of the group.\n */\nexport var getFormGroupState = function (fieldStates) {\n    return fieldStates.reduce(function (acc, fieldState) {\n        var errors = acc.errors || {};\n        if (fieldState.error) {\n            errors[fieldState.name] = fieldState.error;\n        }\n        var newState = {\n            isDirty: acc.isDirty || fieldState.isDirty,\n            errors: errors,\n            isTouched: acc.isTouched || fieldState.isTouched,\n            isValid: acc.isValid && fieldState.isValid,\n        };\n        return newState;\n    }, {\n        isDirty: false,\n        errors: undefined,\n        isValid: true,\n        isTouched: false,\n    });\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}