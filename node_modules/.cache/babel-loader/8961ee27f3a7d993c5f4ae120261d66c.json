{"ast":null,"code":"import { Mark, mergeAttributes, markInputRule, markPasteRule } from '@tiptap/core';\nconst inputRegex = /(?:^|\\s)((?:~~)((?:[^~]+))(?:~~))$/;\nconst pasteRegex = /(?:^|\\s)((?:~~)((?:[^~]+))(?:~~))/g;\nconst Strike = Mark.create({\n  name: 'strike',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {}\n    };\n  },\n\n  parseHTML() {\n    return [{\n      tag: 's'\n    }, {\n      tag: 'del'\n    }, {\n      tag: 'strike'\n    }, {\n      style: 'text-decoration',\n      consuming: false,\n      getAttrs: style => style.includes('line-through') ? {} : false\n    }];\n  },\n\n  renderHTML(_ref) {\n    let {\n      HTMLAttributes\n    } = _ref;\n    return ['s', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n\n  addCommands() {\n    return {\n      setStrike: () => _ref2 => {\n        let {\n          commands\n        } = _ref2;\n        return commands.setMark(this.name);\n      },\n      toggleStrike: () => _ref3 => {\n        let {\n          commands\n        } = _ref3;\n        return commands.toggleMark(this.name);\n      },\n      unsetStrike: () => _ref4 => {\n        let {\n          commands\n        } = _ref4;\n        return commands.unsetMark(this.name);\n      }\n    };\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-x': () => this.editor.commands.toggleStrike()\n    };\n  },\n\n  addInputRules() {\n    return [markInputRule({\n      find: inputRegex,\n      type: this.type\n    })];\n  },\n\n  addPasteRules() {\n    return [markPasteRule({\n      find: pasteRegex,\n      type: this.type\n    })];\n  }\n\n});\nexport { Strike, Strike as default, inputRegex, pasteRegex };","map":{"version":3,"mappings":";AA8BO,MAAMA,UAAU,GAAG,oCAAnB;AACA,MAAMC,UAAU,GAAG,oCAAnB;AAEM,YAAM,GAAGC,IAAI,CAACC,MAAL,CAA2B;EAC/CC,IAAI,EAAE,QADyC;;EAG/CC,UAAU;IACR,OAAO;MACLC,cAAc,EAAE;IADX,CAAP;EAGD,CAP8C;;EAS/CC,SAAS;IACP,OAAO,CACL;MACEC,GAAG,EAAE;IADP,CADK,EAIL;MACEA,GAAG,EAAE;IADP,CAJK,EAOL;MACEA,GAAG,EAAE;IADP,CAPK,EAUL;MACEC,KAAK,EAAE,iBADT;MAEEC,SAAS,EAAE,KAFb;MAGEC,QAAQ,EAAEF,KAAK,IAAMA,KAAgB,CAACG,QAAjB,CAA0B,cAA1B,IAA4C,EAA5C,GAAiD;IAHxE,CAVK,CAAP;EAgBD,CA1B8C;;EA4B/CC,UAAU,OAAmB;IAAA,IAAlB;MAAEP;IAAF,CAAkB;IAC3B,OAAO,CAAC,GAAD,EAAMQ,eAAe,CAAC,KAAKC,OAAL,CAAaT,cAAd,EAA8BA,cAA9B,CAArB,EAAoE,CAApE,CAAP;EACD,CA9B8C;;EAgC/CU,WAAW;IACT,OAAO;MACLC,SAAS,EAAE,MAAM,SAAiB;QAAA,IAAhB;UAAEC;QAAF,CAAgB;QAChC,OAAOA,QAAQ,CAACC,OAAT,CAAiB,KAAKf,IAAtB,CAAP;MACD,CAHI;MAILgB,YAAY,EAAE,MAAM,SAAiB;QAAA,IAAhB;UAAEF;QAAF,CAAgB;QACnC,OAAOA,QAAQ,CAACG,UAAT,CAAoB,KAAKjB,IAAzB,CAAP;MACD,CANI;MAOLkB,WAAW,EAAE,MAAM,SAAiB;QAAA,IAAhB;UAAEJ;QAAF,CAAgB;QAClC,OAAOA,QAAQ,CAACK,SAAT,CAAmB,KAAKnB,IAAxB,CAAP;MACD;IATI,CAAP;EAWD,CA5C8C;;EA8C/CoB,oBAAoB;IAClB,OAAO;MACL,eAAe,MAAM,KAAKC,MAAL,CAAYP,QAAZ,CAAqBE,YAArB;IADhB,CAAP;EAGD,CAlD8C;;EAoD/CM,aAAa;IACX,OAAO,CACLC,aAAa,CAAC;MACZC,IAAI,EAAE5B,UADM;MAEZ6B,IAAI,EAAE,KAAKA;IAFC,CAAD,CADR,CAAP;EAMD,CA3D8C;;EA6D/CC,aAAa;IACX,OAAO,CACLC,aAAa,CAAC;MACZH,IAAI,EAAE3B,UADM;MAEZ4B,IAAI,EAAE,KAAKA;IAFC,CAAD,CADR,CAAP;EAMD;;AApE8C,CAA3B,CAAT","names":["inputRegex","pasteRegex","Mark","create","name","addOptions","HTMLAttributes","parseHTML","tag","style","consuming","getAttrs","includes","renderHTML","mergeAttributes","options","addCommands","setStrike","commands","setMark","toggleStrike","toggleMark","unsetStrike","unsetMark","addKeyboardShortcuts","editor","addInputRules","markInputRule","find","type","addPasteRules","markPasteRule"],"sources":["/Users/evgenijgnedcik/Documents/GitHub/adminPixomnia/node_modules/@tiptap/extension-strike/src/strike.ts"],"sourcesContent":["import {\n  Mark,\n  markInputRule,\n  markPasteRule,\n  mergeAttributes,\n} from '@tiptap/core'\n\nexport interface StrikeOptions {\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    strike: {\n      /**\n       * Set a strike mark\n       */\n      setStrike: () => ReturnType,\n      /**\n       * Toggle a strike mark\n       */\n      toggleStrike: () => ReturnType,\n      /**\n       * Unset a strike mark\n       */\n      unsetStrike: () => ReturnType,\n    }\n  }\n}\n\nexport const inputRegex = /(?:^|\\s)((?:~~)((?:[^~]+))(?:~~))$/\nexport const pasteRegex = /(?:^|\\s)((?:~~)((?:[^~]+))(?:~~))/g\n\nexport const Strike = Mark.create<StrikeOptions>({\n  name: 'strike',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 's',\n      },\n      {\n        tag: 'del',\n      },\n      {\n        tag: 'strike',\n      },\n      {\n        style: 'text-decoration',\n        consuming: false,\n        getAttrs: style => ((style as string).includes('line-through') ? {} : false),\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['s', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setStrike: () => ({ commands }) => {\n        return commands.setMark(this.name)\n      },\n      toggleStrike: () => ({ commands }) => {\n        return commands.toggleMark(this.name)\n      },\n      unsetStrike: () => ({ commands }) => {\n        return commands.unsetMark(this.name)\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-x': () => this.editor.commands.toggleStrike(),\n    }\n  },\n\n  addInputRules() {\n    return [\n      markInputRule({\n        find: inputRegex,\n        type: this.type,\n      }),\n    ]\n  },\n\n  addPasteRules() {\n    return [\n      markPasteRule({\n        find: pasteRegex,\n        type: this.type,\n      }),\n    ]\n  },\n})\n"]},"metadata":{},"sourceType":"module"}