{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { Children, isValidElement } from 'react';\nimport { BulkDeleteButton, BulkExportButton, Datagrid as RaDatagrid, useListContext, usePermissions, useResourceContext } from 'react-admin';\nimport { canAccess } from '../canAccess';\n/**\n * Alternative to react-admin's <Datagrid> that adds RBAC control to columns and bulk actions\n *\n * To see a column, the user must have the permission to read the resource column:\n * { \"action\": \"read\", \"resource\": `${resource}.${source}` }\n * Users must have the 'export' permission on the resource to see the BulkExportButton.\n * Users must have the 'delete' permission on the resource to see the BulkExportButton.\n *\n * Also, the rowClick prop is automatically set depending on the user props:\n * - \"edit\" if the user has the permission to edit the resource\n * - \"show\" if the user doesn't have the permission to edit the resource but has the permission to show it\n * - empty otherwise\n *\n * @example\n * import { Datagrid } from '@react-admin/ra-rbac';\n *\n * const authProvider= {\n *     // ...\n *     getPermissions: () => Promise.resolve([\n *         { action: \"list\", resource: \"products\" },\n *         { action: \"read\", resource: \"products.thumbnail\" },\n *         { action: \"read\", resource: \"products.reference\" },\n *         { action: \"read\", resource: \"products.category_id\" },\n *         { action: \"read\", resource: \"products.width\" },\n *         { action: \"read\", resource: \"products.height\" },\n *         { action: \"read\", resource: \"products.price\" },\n *         { action: \"read\", resource: \"products.description\" },\n *     ]),\n * };\n *\n * const ProductList = () => (\n *     <List>\n *         <Datagrid rowClick=\"edit\"> // <-- RBAC Datagrid\n *             <ImageField source=\"thumbnail\" />\n *             <TextField source=\"reference\" />\n *             <ReferenceField source=\"category_id\" reference=\"categories\">\n *                 <TextField source=\"name\" />\n *             </ReferenceField>\n *             <NumberField source=\"width\" />\n *             <NumberField source=\"height\" />\n *             <NumberField source=\"price\" />\n *             <TextField source=\"description\" />\n *             {\n *                // these two columns are not visible to the user\n *             }\n *             <NumberField source=\"stock\" />\n *             <NumberField source=\"sales\" />\n *         </Datagrid>\n *     </List>\n * );\n */\n\nexport var Datagrid = function (props) {\n  var resource = useResourceContext();\n  var exporter = useListContext().exporter;\n\n  var children = props.children,\n      rest = __rest(props, [\"children\"]);\n\n  var _a = usePermissions(),\n      isLoading = _a.isLoading,\n      permissions = _a.permissions;\n\n  if (isLoading) {\n    return null;\n  }\n\n  var defaultRowClick = canAccess({\n    permissions: permissions,\n    resource: resource,\n    action: 'edit'\n  }) ? 'edit' : canAccess({\n    permissions: permissions,\n    resource: resource,\n    action: 'show'\n  }) ? 'show' : '';\n  var canExport = canAccess({\n    action: 'export',\n    resource: resource,\n    permissions: permissions\n  });\n  var canDelete = canAccess({\n    action: 'delete',\n    resource: resource,\n    permissions: permissions\n  });\n  var bulkActionButtons = props.bulkActionButtons ? props.bulkActionButtons : canExport || canDelete ? React.createElement(React.Fragment, null, exporter !== false && canExport && React.createElement(BulkExportButton, null), canDelete && React.createElement(BulkDeleteButton, null)) : false;\n  return React.createElement(RaDatagrid, __assign({\n    rowClick: defaultRowClick\n  }, rest, {\n    bulkActionButtons: bulkActionButtons\n  }), Children.map(children, function (child) {\n    return isValidElement(child) && canAccess({\n      permissions: permissions,\n      action: 'read',\n      resource: resource + \".\" + child.props.source\n    }) ? child : null;\n  }));\n};","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","React","Children","isValidElement","BulkDeleteButton","BulkExportButton","Datagrid","RaDatagrid","useListContext","usePermissions","useResourceContext","canAccess","props","resource","exporter","children","rest","_a","isLoading","permissions","defaultRowClick","action","canExport","canDelete","bulkActionButtons","createElement","Fragment","rowClick","map","child","source"],"sources":["/Users/evgenijgnedcik/Documents/GitHub/adminPixomnia/node_modules/@react-admin/ra-rbac/esm/src/list/Datagrid.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from 'react';\nimport { Children, isValidElement } from 'react';\nimport { BulkDeleteButton, BulkExportButton, Datagrid as RaDatagrid, useListContext, usePermissions, useResourceContext, } from 'react-admin';\nimport { canAccess } from '../canAccess';\n/**\n * Alternative to react-admin's <Datagrid> that adds RBAC control to columns and bulk actions\n *\n * To see a column, the user must have the permission to read the resource column:\n * { \"action\": \"read\", \"resource\": `${resource}.${source}` }\n * Users must have the 'export' permission on the resource to see the BulkExportButton.\n * Users must have the 'delete' permission on the resource to see the BulkExportButton.\n *\n * Also, the rowClick prop is automatically set depending on the user props:\n * - \"edit\" if the user has the permission to edit the resource\n * - \"show\" if the user doesn't have the permission to edit the resource but has the permission to show it\n * - empty otherwise\n *\n * @example\n * import { Datagrid } from '@react-admin/ra-rbac';\n *\n * const authProvider= {\n *     // ...\n *     getPermissions: () => Promise.resolve([\n *         { action: \"list\", resource: \"products\" },\n *         { action: \"read\", resource: \"products.thumbnail\" },\n *         { action: \"read\", resource: \"products.reference\" },\n *         { action: \"read\", resource: \"products.category_id\" },\n *         { action: \"read\", resource: \"products.width\" },\n *         { action: \"read\", resource: \"products.height\" },\n *         { action: \"read\", resource: \"products.price\" },\n *         { action: \"read\", resource: \"products.description\" },\n *     ]),\n * };\n *\n * const ProductList = () => (\n *     <List>\n *         <Datagrid rowClick=\"edit\"> // <-- RBAC Datagrid\n *             <ImageField source=\"thumbnail\" />\n *             <TextField source=\"reference\" />\n *             <ReferenceField source=\"category_id\" reference=\"categories\">\n *                 <TextField source=\"name\" />\n *             </ReferenceField>\n *             <NumberField source=\"width\" />\n *             <NumberField source=\"height\" />\n *             <NumberField source=\"price\" />\n *             <TextField source=\"description\" />\n *             {\n *                // these two columns are not visible to the user\n *             }\n *             <NumberField source=\"stock\" />\n *             <NumberField source=\"sales\" />\n *         </Datagrid>\n *     </List>\n * );\n */\nexport var Datagrid = function (props) {\n    var resource = useResourceContext();\n    var exporter = useListContext().exporter;\n    var children = props.children, rest = __rest(props, [\"children\"]);\n    var _a = usePermissions(), isLoading = _a.isLoading, permissions = _a.permissions;\n    if (isLoading) {\n        return null;\n    }\n    var defaultRowClick = canAccess({ permissions: permissions, resource: resource, action: 'edit' })\n        ? 'edit'\n        : canAccess({ permissions: permissions, resource: resource, action: 'show' })\n            ? 'show'\n            : '';\n    var canExport = canAccess({\n        action: 'export',\n        resource: resource,\n        permissions: permissions,\n    });\n    var canDelete = canAccess({\n        action: 'delete',\n        resource: resource,\n        permissions: permissions,\n    });\n    var bulkActionButtons = props.bulkActionButtons ? (props.bulkActionButtons) : canExport || canDelete ? (React.createElement(React.Fragment, null,\n        exporter !== false && canExport && React.createElement(BulkExportButton, null),\n        canDelete && React.createElement(BulkDeleteButton, null))) : (false);\n    return (React.createElement(RaDatagrid, __assign({ rowClick: defaultRowClick }, rest, { bulkActionButtons: bulkActionButtons }), Children.map(children, function (child) {\n        return isValidElement(child) &&\n            canAccess({\n                permissions: permissions,\n                action: 'read',\n                resource: resource + \".\" + child.props.source,\n            })\n            ? child\n            : null;\n    })));\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}