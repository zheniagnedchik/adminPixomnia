{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport { useEffect, useState, memo } from 'react';\nimport get from 'lodash/get';\nimport { ListContextProvider, useRecordContext } from 'ra-core';\nimport { fieldPropTypes } from './types';\n/**\n * Display a collection\n *\n * Ideal for embedded arrays of objects, e.g.\n * {\n *   id: 123\n *   tags: [\n *     { name: 'foo' },\n *     { name: 'bar' }\n *   ]\n * }\n *\n * The child must be an iterator component\n * (like <Datagrid> or <SingleFieldList>).\n *\n * @example Display all the backlinks of the current post as a <Datagrid>\n * // post = {\n * //   id: 123\n * //   backlinks: [\n * //       {\n * //           uuid: '34fdf393-f449-4b04-a423-38ad02ae159e',\n * //           date: '2012-08-10T00:00:00.000Z',\n * //           url: 'http://example.com/foo/bar.html',\n * //       },\n * //       {\n * //           uuid: 'd907743a-253d-4ec1-8329-404d4c5e6cf1',\n * //           date: '2012-08-14T00:00:00.000Z',\n * //           url: 'https://blog.johndoe.com/2012/08/12/foobar.html',\n * //       }\n * //    ]\n * // }\n *     <ArrayField source=\"backlinks\">\n *         <Datagrid>\n *             <DateField source=\"date\" />\n *             <UrlField source=\"url\" />\n *         </Datagrid>\n *     </ArrayField>\n *\n * @example Display all the tags of the current post as <Chip> components\n * // post = {\n * //   id: 123\n * //   tags: [\n * //     { name: 'foo' },\n * //     { name: 'bar' }\n * //   ]\n * // }\n *     <ArrayField source=\"tags\">\n *         <SingleFieldList>\n *             <ChipField source=\"name\" />\n *         </SingleFieldList>\n *     </ArrayField>\n *\n * If you need to render a collection in a custom way, it's often simpler\n * to write your own component:\n *\n * @example\n *     const TagsField = ({ record }) => (\n *          <ul>\n *              {record.tags.map(item => (\n *                  <li key={item.name}>{item.name}</li>\n *              ))}\n *          </ul>\n *     );\n */\n\nexport var ArrayField = memo(function (props) {\n  var children = props.children,\n      resource = props.resource,\n      source = props.source;\n  var record = useRecordContext(props);\n\n  var _a = useState(initialState),\n      data = _a[0],\n      setData = _a[1];\n\n  useEffect(function () {\n    var data = get(record, source) || initialState;\n    setData(data);\n  }, [record, source]);\n  return React.createElement(ListContextProvider, {\n    value: {\n      data: data,\n      selectedIds: [],\n      sort: {\n        field: null,\n        order: null\n      },\n      displayedFilters: null,\n      filterValues: null,\n      hasCreate: null,\n      hideFilter: null,\n      isFetching: false,\n      isLoading: false,\n      onSelect: null,\n      onToggleItem: null,\n      onUnselectItems: null,\n      page: null,\n      perPage: null,\n      resource: resource,\n      setFilters: null,\n      setPage: null,\n      setPerPage: null,\n      setSort: null,\n      showFilter: null,\n      total: data.length\n    }\n  }, children);\n});\nArrayField.propTypes = __assign({}, fieldPropTypes);\nArrayField.displayName = 'ArrayField';\nvar initialState = [];","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","React","useEffect","useState","memo","get","ListContextProvider","useRecordContext","fieldPropTypes","ArrayField","props","children","resource","source","record","_a","initialState","data","setData","createElement","value","selectedIds","sort","field","order","displayedFilters","filterValues","hasCreate","hideFilter","isFetching","isLoading","onSelect","onToggleItem","onUnselectItems","page","perPage","setFilters","setPage","setPerPage","setSort","showFilter","total","propTypes","displayName"],"sources":["/Users/evgenijgnedcik/Documents/GitHub/adminPixomnia/node_modules/ra-ui-materialui/dist/esm/field/ArrayField.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport * as React from 'react';\nimport { useEffect, useState, memo } from 'react';\nimport get from 'lodash/get';\nimport { ListContextProvider, useRecordContext } from 'ra-core';\nimport { fieldPropTypes } from './types';\n/**\n * Display a collection\n *\n * Ideal for embedded arrays of objects, e.g.\n * {\n *   id: 123\n *   tags: [\n *     { name: 'foo' },\n *     { name: 'bar' }\n *   ]\n * }\n *\n * The child must be an iterator component\n * (like <Datagrid> or <SingleFieldList>).\n *\n * @example Display all the backlinks of the current post as a <Datagrid>\n * // post = {\n * //   id: 123\n * //   backlinks: [\n * //       {\n * //           uuid: '34fdf393-f449-4b04-a423-38ad02ae159e',\n * //           date: '2012-08-10T00:00:00.000Z',\n * //           url: 'http://example.com/foo/bar.html',\n * //       },\n * //       {\n * //           uuid: 'd907743a-253d-4ec1-8329-404d4c5e6cf1',\n * //           date: '2012-08-14T00:00:00.000Z',\n * //           url: 'https://blog.johndoe.com/2012/08/12/foobar.html',\n * //       }\n * //    ]\n * // }\n *     <ArrayField source=\"backlinks\">\n *         <Datagrid>\n *             <DateField source=\"date\" />\n *             <UrlField source=\"url\" />\n *         </Datagrid>\n *     </ArrayField>\n *\n * @example Display all the tags of the current post as <Chip> components\n * // post = {\n * //   id: 123\n * //   tags: [\n * //     { name: 'foo' },\n * //     { name: 'bar' }\n * //   ]\n * // }\n *     <ArrayField source=\"tags\">\n *         <SingleFieldList>\n *             <ChipField source=\"name\" />\n *         </SingleFieldList>\n *     </ArrayField>\n *\n * If you need to render a collection in a custom way, it's often simpler\n * to write your own component:\n *\n * @example\n *     const TagsField = ({ record }) => (\n *          <ul>\n *              {record.tags.map(item => (\n *                  <li key={item.name}>{item.name}</li>\n *              ))}\n *          </ul>\n *     );\n */\nexport var ArrayField = memo(function (props) {\n    var children = props.children, resource = props.resource, source = props.source;\n    var record = useRecordContext(props);\n    var _a = useState(initialState), data = _a[0], setData = _a[1];\n    useEffect(function () {\n        var data = get(record, source) || initialState;\n        setData(data);\n    }, [record, source]);\n    return (React.createElement(ListContextProvider, { value: {\n            data: data,\n            selectedIds: [],\n            sort: { field: null, order: null },\n            displayedFilters: null,\n            filterValues: null,\n            hasCreate: null,\n            hideFilter: null,\n            isFetching: false,\n            isLoading: false,\n            onSelect: null,\n            onToggleItem: null,\n            onUnselectItems: null,\n            page: null,\n            perPage: null,\n            resource: resource,\n            setFilters: null,\n            setPage: null,\n            setPerPage: null,\n            setSort: null,\n            showFilter: null,\n            total: data.length,\n        } }, children));\n});\nArrayField.propTypes = __assign({}, fieldPropTypes);\nArrayField.displayName = 'ArrayField';\nvar initialState = [];\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}