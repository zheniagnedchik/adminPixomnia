{"ast":null,"code":"import { useContext, useMemo } from 'react';\nimport defaults from 'lodash/defaults';\nimport { ListContext } from './ListContext';\n/**\n * Hook to read the list controller props from the ListContext.\n *\n * Mostly used within a <ListContext.Provider> (e.g. as a descendent of <List>\n * or <ListBase>).\n *\n * But you can also use it without a <ListContext.Provider>. In this case, it is up to you\n * to pass all the necessary props (see the list below).\n *\n * The given props will take precedence over context values.\n *\n * @typedef {Object} ListControllerProps\n * @prop {Object}   data an array of the list records, e.g. [{ id: 123, title: 'hello world' }, { ... }]\n * @prop {integer}  total the total number of results for the current filters, excluding pagination. Useful to build the pagination controls. e.g. 23\n * @prop {boolean}  isFetching boolean that is true on mount, and false once the data was fetched\n * @prop {boolean}  isLoading boolean that is false until the data is available\n * @prop {integer}  page the current page. Starts at 1\n * @prop {Function} setPage a callback to change the page, e.g. setPage(3)\n * @prop {integer}  perPage the number of results per page. Defaults to 25\n * @prop {Function} setPerPage a callback to change the number of results per page, e.g. setPerPage(25)\n * @prop {Object}   sort a sort object { field, order }, e.g. { field: 'date', order: 'DESC' }\n * @prop {Function} setSort a callback to change the sort, e.g. setSort({ field : 'name', order: 'ASC' })\n * @prop {Object}   filterValues a dictionary of filter values, e.g. { title: 'lorem', nationality: 'fr' }\n * @prop {Function} setFilters a callback to update the filters, e.g. setFilters(filters, displayedFilters)\n * @prop {Object}   displayedFilters a dictionary of the displayed filters, e.g. { title: true, nationality: true }\n * @prop {Function} showFilter a callback to show one of the filters, e.g. showFilter('title', defaultValue)\n * @prop {Function} hideFilter a callback to hide one of the filters, e.g. hideFilter('title')\n * @prop {Array}    selectedIds an array listing the ids of the selected rows, e.g. [123, 456]\n * @prop {Function} onSelect callback to change the list of selected rows, e.g. onSelect([456, 789])\n * @prop {Function} onToggleItem callback to toggle the selection of a given record based on its id, e.g. onToggleItem(456)\n * @prop {Function} onUnselectItems callback to clear the selection, e.g. onUnselectItems();\n * @prop {string}   defaultTitle the translated title based on the resource, e.g. 'Posts'\n * @prop {string}   resource the resource name, deduced from the location. e.g. 'posts'\n *\n * @returns {ListControllerResult} list controller props\n *\n * @see useListController for how it is filled\n *\n * @example // custom list view\n *\n * import { useListContext } from 'react-admin';\n *\n * const MyList = () => {\n *     const { data, isLoading } = useListContext();\n *     if (isLoading) {\n *         return <>Loading...</>;\n *     }\n *     return (\n *         <ul>\n *             {data.map(record => (\n *                 <li key={record.id}>{record.name}</li>\n *             ))}\n *         </ul>\n *     );\n * }\n *\n * @example // custom pagination\n *\n * import { useListContext } from 'react-admin';\n * import { Button, Toolbar } from '@mui/material';\n * import ChevronLeft from '@mui/icons-material/ChevronLeft';\n * import ChevronRight from '@mui/icons-material/ChevronRight';\n *\n * const PrevNextPagination = () => {\n *     const { page, perPage, total, setPage } = useListContext();\n *     const nbPages = Math.ceil(total / perPage) || 1;\n *     return (\n *         nbPages > 1 &&\n *             <Toolbar>\n *                 {page > 1 &&\n *                     <Button color=\"primary\" key=\"prev\" onClick={() => setPage(page - 1)}>\n *                         <ChevronLeft />\n *                         Prev\n *                     </Button>\n *                 }\n *                 {page !== nbPages &&\n *                     <Button color=\"primary\" key=\"next\" onClick={() => setPage(page + 1)}>\n *                         Next\n *                         <ChevronRight />\n *                     </Button>\n *                 }\n *             </Toolbar>\n *     );\n * }\n */\n\nexport var useListContext = function (props) {\n  var context = useContext(ListContext); // Props take precedence over the context\n  // @ts-ignore\n\n  return useMemo(function () {\n    return defaults({}, props != null ? extractListContextProps(props) : {}, context);\n  }, [context, props]);\n};\n/**\n * Extract only the list controller props\n *\n * @param {Object} props Props passed to the useListContext hook\n *\n * @returns {ListControllerResult} List controller props\n */\n\nvar extractListContextProps = function (_a) {\n  var sort = _a.sort,\n      data = _a.data,\n      defaultTitle = _a.defaultTitle,\n      displayedFilters = _a.displayedFilters,\n      exporter = _a.exporter,\n      filterValues = _a.filterValues,\n      hasCreate = _a.hasCreate,\n      hideFilter = _a.hideFilter,\n      isFetching = _a.isFetching,\n      isLoading = _a.isLoading,\n      onSelect = _a.onSelect,\n      onToggleItem = _a.onToggleItem,\n      onUnselectItems = _a.onUnselectItems,\n      page = _a.page,\n      perPage = _a.perPage,\n      refetch = _a.refetch,\n      resource = _a.resource,\n      selectedIds = _a.selectedIds,\n      setFilters = _a.setFilters,\n      setPage = _a.setPage,\n      setPerPage = _a.setPerPage,\n      setSort = _a.setSort,\n      showFilter = _a.showFilter,\n      total = _a.total;\n  return {\n    sort: sort,\n    data: data,\n    defaultTitle: defaultTitle,\n    displayedFilters: displayedFilters,\n    exporter: exporter,\n    filterValues: filterValues,\n    hasCreate: hasCreate,\n    hideFilter: hideFilter,\n    isFetching: isFetching,\n    isLoading: isLoading,\n    onSelect: onSelect,\n    onToggleItem: onToggleItem,\n    onUnselectItems: onUnselectItems,\n    page: page,\n    perPage: perPage,\n    refetch: refetch,\n    resource: resource,\n    selectedIds: selectedIds,\n    setFilters: setFilters,\n    setPage: setPage,\n    setPerPage: setPerPage,\n    setSort: setSort,\n    showFilter: showFilter,\n    total: total\n  };\n};","map":{"version":3,"names":["useContext","useMemo","defaults","ListContext","useListContext","props","context","extractListContextProps","_a","sort","data","defaultTitle","displayedFilters","exporter","filterValues","hasCreate","hideFilter","isFetching","isLoading","onSelect","onToggleItem","onUnselectItems","page","perPage","refetch","resource","selectedIds","setFilters","setPage","setPerPage","setSort","showFilter","total"],"sources":["/Users/evgenijgnedcik/Documents/GitHub/adminPixomnia/node_modules/ra-core/dist/esm/controller/list/useListContext.js"],"sourcesContent":["import { useContext, useMemo } from 'react';\nimport defaults from 'lodash/defaults';\nimport { ListContext } from './ListContext';\n/**\n * Hook to read the list controller props from the ListContext.\n *\n * Mostly used within a <ListContext.Provider> (e.g. as a descendent of <List>\n * or <ListBase>).\n *\n * But you can also use it without a <ListContext.Provider>. In this case, it is up to you\n * to pass all the necessary props (see the list below).\n *\n * The given props will take precedence over context values.\n *\n * @typedef {Object} ListControllerProps\n * @prop {Object}   data an array of the list records, e.g. [{ id: 123, title: 'hello world' }, { ... }]\n * @prop {integer}  total the total number of results for the current filters, excluding pagination. Useful to build the pagination controls. e.g. 23\n * @prop {boolean}  isFetching boolean that is true on mount, and false once the data was fetched\n * @prop {boolean}  isLoading boolean that is false until the data is available\n * @prop {integer}  page the current page. Starts at 1\n * @prop {Function} setPage a callback to change the page, e.g. setPage(3)\n * @prop {integer}  perPage the number of results per page. Defaults to 25\n * @prop {Function} setPerPage a callback to change the number of results per page, e.g. setPerPage(25)\n * @prop {Object}   sort a sort object { field, order }, e.g. { field: 'date', order: 'DESC' }\n * @prop {Function} setSort a callback to change the sort, e.g. setSort({ field : 'name', order: 'ASC' })\n * @prop {Object}   filterValues a dictionary of filter values, e.g. { title: 'lorem', nationality: 'fr' }\n * @prop {Function} setFilters a callback to update the filters, e.g. setFilters(filters, displayedFilters)\n * @prop {Object}   displayedFilters a dictionary of the displayed filters, e.g. { title: true, nationality: true }\n * @prop {Function} showFilter a callback to show one of the filters, e.g. showFilter('title', defaultValue)\n * @prop {Function} hideFilter a callback to hide one of the filters, e.g. hideFilter('title')\n * @prop {Array}    selectedIds an array listing the ids of the selected rows, e.g. [123, 456]\n * @prop {Function} onSelect callback to change the list of selected rows, e.g. onSelect([456, 789])\n * @prop {Function} onToggleItem callback to toggle the selection of a given record based on its id, e.g. onToggleItem(456)\n * @prop {Function} onUnselectItems callback to clear the selection, e.g. onUnselectItems();\n * @prop {string}   defaultTitle the translated title based on the resource, e.g. 'Posts'\n * @prop {string}   resource the resource name, deduced from the location. e.g. 'posts'\n *\n * @returns {ListControllerResult} list controller props\n *\n * @see useListController for how it is filled\n *\n * @example // custom list view\n *\n * import { useListContext } from 'react-admin';\n *\n * const MyList = () => {\n *     const { data, isLoading } = useListContext();\n *     if (isLoading) {\n *         return <>Loading...</>;\n *     }\n *     return (\n *         <ul>\n *             {data.map(record => (\n *                 <li key={record.id}>{record.name}</li>\n *             ))}\n *         </ul>\n *     );\n * }\n *\n * @example // custom pagination\n *\n * import { useListContext } from 'react-admin';\n * import { Button, Toolbar } from '@mui/material';\n * import ChevronLeft from '@mui/icons-material/ChevronLeft';\n * import ChevronRight from '@mui/icons-material/ChevronRight';\n *\n * const PrevNextPagination = () => {\n *     const { page, perPage, total, setPage } = useListContext();\n *     const nbPages = Math.ceil(total / perPage) || 1;\n *     return (\n *         nbPages > 1 &&\n *             <Toolbar>\n *                 {page > 1 &&\n *                     <Button color=\"primary\" key=\"prev\" onClick={() => setPage(page - 1)}>\n *                         <ChevronLeft />\n *                         Prev\n *                     </Button>\n *                 }\n *                 {page !== nbPages &&\n *                     <Button color=\"primary\" key=\"next\" onClick={() => setPage(page + 1)}>\n *                         Next\n *                         <ChevronRight />\n *                     </Button>\n *                 }\n *             </Toolbar>\n *     );\n * }\n */\nexport var useListContext = function (props) {\n    var context = useContext(ListContext);\n    // Props take precedence over the context\n    // @ts-ignore\n    return useMemo(function () {\n        return defaults({}, props != null ? extractListContextProps(props) : {}, context);\n    }, [context, props]);\n};\n/**\n * Extract only the list controller props\n *\n * @param {Object} props Props passed to the useListContext hook\n *\n * @returns {ListControllerResult} List controller props\n */\nvar extractListContextProps = function (_a) {\n    var sort = _a.sort, data = _a.data, defaultTitle = _a.defaultTitle, displayedFilters = _a.displayedFilters, exporter = _a.exporter, filterValues = _a.filterValues, hasCreate = _a.hasCreate, hideFilter = _a.hideFilter, isFetching = _a.isFetching, isLoading = _a.isLoading, onSelect = _a.onSelect, onToggleItem = _a.onToggleItem, onUnselectItems = _a.onUnselectItems, page = _a.page, perPage = _a.perPage, refetch = _a.refetch, resource = _a.resource, selectedIds = _a.selectedIds, setFilters = _a.setFilters, setPage = _a.setPage, setPerPage = _a.setPerPage, setSort = _a.setSort, showFilter = _a.showFilter, total = _a.total;\n    return ({\n        sort: sort,\n        data: data,\n        defaultTitle: defaultTitle,\n        displayedFilters: displayedFilters,\n        exporter: exporter,\n        filterValues: filterValues,\n        hasCreate: hasCreate,\n        hideFilter: hideFilter,\n        isFetching: isFetching,\n        isLoading: isLoading,\n        onSelect: onSelect,\n        onToggleItem: onToggleItem,\n        onUnselectItems: onUnselectItems,\n        page: page,\n        perPage: perPage,\n        refetch: refetch,\n        resource: resource,\n        selectedIds: selectedIds,\n        setFilters: setFilters,\n        setPage: setPage,\n        setPerPage: setPerPage,\n        setSort: setSort,\n        showFilter: showFilter,\n        total: total,\n    });\n};\n"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,OAArB,QAAoC,OAApC;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,cAAc,GAAG,UAAUC,KAAV,EAAiB;EACzC,IAAIC,OAAO,GAAGN,UAAU,CAACG,WAAD,CAAxB,CADyC,CAEzC;EACA;;EACA,OAAOF,OAAO,CAAC,YAAY;IACvB,OAAOC,QAAQ,CAAC,EAAD,EAAKG,KAAK,IAAI,IAAT,GAAgBE,uBAAuB,CAACF,KAAD,CAAvC,GAAiD,EAAtD,EAA0DC,OAA1D,CAAf;EACH,CAFa,EAEX,CAACA,OAAD,EAAUD,KAAV,CAFW,CAAd;AAGH,CAPM;AAQP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIE,uBAAuB,GAAG,UAAUC,EAAV,EAAc;EACxC,IAAIC,IAAI,GAAGD,EAAE,CAACC,IAAd;EAAA,IAAoBC,IAAI,GAAGF,EAAE,CAACE,IAA9B;EAAA,IAAoCC,YAAY,GAAGH,EAAE,CAACG,YAAtD;EAAA,IAAoEC,gBAAgB,GAAGJ,EAAE,CAACI,gBAA1F;EAAA,IAA4GC,QAAQ,GAAGL,EAAE,CAACK,QAA1H;EAAA,IAAoIC,YAAY,GAAGN,EAAE,CAACM,YAAtJ;EAAA,IAAoKC,SAAS,GAAGP,EAAE,CAACO,SAAnL;EAAA,IAA8LC,UAAU,GAAGR,EAAE,CAACQ,UAA9M;EAAA,IAA0NC,UAAU,GAAGT,EAAE,CAACS,UAA1O;EAAA,IAAsPC,SAAS,GAAGV,EAAE,CAACU,SAArQ;EAAA,IAAgRC,QAAQ,GAAGX,EAAE,CAACW,QAA9R;EAAA,IAAwSC,YAAY,GAAGZ,EAAE,CAACY,YAA1T;EAAA,IAAwUC,eAAe,GAAGb,EAAE,CAACa,eAA7V;EAAA,IAA8WC,IAAI,GAAGd,EAAE,CAACc,IAAxX;EAAA,IAA8XC,OAAO,GAAGf,EAAE,CAACe,OAA3Y;EAAA,IAAoZC,OAAO,GAAGhB,EAAE,CAACgB,OAAja;EAAA,IAA0aC,QAAQ,GAAGjB,EAAE,CAACiB,QAAxb;EAAA,IAAkcC,WAAW,GAAGlB,EAAE,CAACkB,WAAnd;EAAA,IAAgeC,UAAU,GAAGnB,EAAE,CAACmB,UAAhf;EAAA,IAA4fC,OAAO,GAAGpB,EAAE,CAACoB,OAAzgB;EAAA,IAAkhBC,UAAU,GAAGrB,EAAE,CAACqB,UAAliB;EAAA,IAA8iBC,OAAO,GAAGtB,EAAE,CAACsB,OAA3jB;EAAA,IAAokBC,UAAU,GAAGvB,EAAE,CAACuB,UAAplB;EAAA,IAAgmBC,KAAK,GAAGxB,EAAE,CAACwB,KAA3mB;EACA,OAAQ;IACJvB,IAAI,EAAEA,IADF;IAEJC,IAAI,EAAEA,IAFF;IAGJC,YAAY,EAAEA,YAHV;IAIJC,gBAAgB,EAAEA,gBAJd;IAKJC,QAAQ,EAAEA,QALN;IAMJC,YAAY,EAAEA,YANV;IAOJC,SAAS,EAAEA,SAPP;IAQJC,UAAU,EAAEA,UARR;IASJC,UAAU,EAAEA,UATR;IAUJC,SAAS,EAAEA,SAVP;IAWJC,QAAQ,EAAEA,QAXN;IAYJC,YAAY,EAAEA,YAZV;IAaJC,eAAe,EAAEA,eAbb;IAcJC,IAAI,EAAEA,IAdF;IAeJC,OAAO,EAAEA,OAfL;IAgBJC,OAAO,EAAEA,OAhBL;IAiBJC,QAAQ,EAAEA,QAjBN;IAkBJC,WAAW,EAAEA,WAlBT;IAmBJC,UAAU,EAAEA,UAnBR;IAoBJC,OAAO,EAAEA,OApBL;IAqBJC,UAAU,EAAEA,UArBR;IAsBJC,OAAO,EAAEA,OAtBL;IAuBJC,UAAU,EAAEA,UAvBR;IAwBJC,KAAK,EAAEA;EAxBH,CAAR;AA0BH,CA5BD"},"metadata":{},"sourceType":"module"}