{"ast":null,"code":"import { Mark, mergeAttributes, getMarkAttributes } from '@tiptap/core';\nconst TextStyle = Mark.create({\n  name: 'textStyle',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {}\n    };\n  },\n\n  parseHTML() {\n    return [{\n      tag: 'span',\n      getAttrs: element => {\n        const hasStyles = element.hasAttribute('style');\n\n        if (!hasStyles) {\n          return false;\n        }\n\n        return {};\n      }\n    }];\n  },\n\n  renderHTML(_ref) {\n    let {\n      HTMLAttributes\n    } = _ref;\n    return ['span', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n\n  addCommands() {\n    return {\n      removeEmptyTextStyle: () => _ref2 => {\n        let {\n          state,\n          commands\n        } = _ref2;\n        const attributes = getMarkAttributes(state, this.type);\n        const hasStyles = Object.entries(attributes).some(_ref3 => {\n          let [, value] = _ref3;\n          return !!value;\n        });\n\n        if (hasStyles) {\n          return true;\n        }\n\n        return commands.unsetMark(this.name);\n      }\n    };\n  }\n\n});\nexport { TextStyle, TextStyle as default };","map":{"version":3,"mappings":";AAqBa,eAAS,GAAGA,IAAI,CAACC,MAAL,CAA8B;EACrDC,IAAI,EAAE,WAD+C;;EAGrDC,UAAU;IACR,OAAO;MACLC,cAAc,EAAE;IADX,CAAP;EAGD,CAPoD;;EASrDC,SAAS;IACP,OAAO,CACL;MACEC,GAAG,EAAE,MADP;MAEEC,QAAQ,EAAEC,OAAO,IAAG;QAClB,MAAMC,SAAS,GAAID,OAAuB,CAACE,YAAxB,CAAqC,OAArC,CAAnB;;QAEA,IAAI,CAACD,SAAL,EAAgB;UACd,OAAO,KAAP;QACD;;QAED,OAAO,EAAP;MACD;IAVH,CADK,CAAP;EAcD,CAxBoD;;EA0BrDE,UAAU,OAAmB;IAAA,IAAlB;MAAEP;IAAF,CAAkB;IAC3B,OAAO,CAAC,MAAD,EAASQ,eAAe,CAAC,KAAKC,OAAL,CAAaT,cAAd,EAA8BA,cAA9B,CAAxB,EAAuE,CAAvE,CAAP;EACD,CA5BoD;;EA8BrDU,WAAW;IACT,OAAO;MACLC,oBAAoB,EAAE,MAAM,SAAwB;QAAA,IAAvB;UAAEC,KAAF;UAASC;QAAT,CAAuB;QAClD,MAAMC,UAAU,GAAGC,iBAAiB,CAACH,KAAD,EAAQ,KAAKI,IAAb,CAApC;QACA,MAAMX,SAAS,GAAGY,MAAM,CAACC,OAAP,CAAeJ,UAAf,EAA2BK,IAA3B,CAAgC;UAAA,IAAC,GAAGC,KAAH,CAAD;UAAA,OAAe,CAAC,CAACA,KAAjB;QAAA,CAAhC,CAAlB;;QAEA,IAAIf,SAAJ,EAAe;UACb,OAAO,IAAP;QACD;;QAED,OAAOQ,QAAQ,CAACQ,SAAT,CAAmB,KAAKvB,IAAxB,CAAP;MACD;IAVI,CAAP;EAYD;;AA3CoD,CAA9B,CAAZ","names":["Mark","create","name","addOptions","HTMLAttributes","parseHTML","tag","getAttrs","element","hasStyles","hasAttribute","renderHTML","mergeAttributes","options","addCommands","removeEmptyTextStyle","state","commands","attributes","getMarkAttributes","type","Object","entries","some","value","unsetMark"],"sources":["/Users/evgenijgnedcik/Documents/GitHub/adminPixomnia/node_modules/@tiptap/extension-text-style/src/text-style.ts"],"sourcesContent":["import {\n  getMarkAttributes,\n  Mark,\n  mergeAttributes,\n} from '@tiptap/core'\n\nexport interface TextStyleOptions {\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    textStyle: {\n      /**\n       * Remove spans without inline style attributes.\n       */\n      removeEmptyTextStyle: () => ReturnType,\n    }\n  }\n}\n\nexport const TextStyle = Mark.create<TextStyleOptions>({\n  name: 'textStyle',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'span',\n        getAttrs: element => {\n          const hasStyles = (element as HTMLElement).hasAttribute('style')\n\n          if (!hasStyles) {\n            return false\n          }\n\n          return {}\n        },\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['span', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      removeEmptyTextStyle: () => ({ state, commands }) => {\n        const attributes = getMarkAttributes(state, this.type)\n        const hasStyles = Object.entries(attributes).some(([, value]) => !!value)\n\n        if (hasStyles) {\n          return true\n        }\n\n        return commands.unsetMark(this.name)\n      },\n    }\n  },\n\n})\n"]},"metadata":{},"sourceType":"module"}