{"ast":null,"code":"import { Node, mergeAttributes, nodeInputRule } from '@tiptap/core';\nconst inputRegex = /(?:^|\\s)(!\\[(.+|:?)]\\((\\S+)(?:(?:\\s+)[\"'](\\S+)[\"'])?\\))$/;\nconst Image = Node.create({\n  name: 'image',\n\n  addOptions() {\n    return {\n      inline: false,\n      allowBase64: false,\n      HTMLAttributes: {}\n    };\n  },\n\n  inline() {\n    return this.options.inline;\n  },\n\n  group() {\n    return this.options.inline ? 'inline' : 'block';\n  },\n\n  draggable: true,\n\n  addAttributes() {\n    return {\n      src: {\n        default: null\n      },\n      alt: {\n        default: null\n      },\n      title: {\n        default: null\n      }\n    };\n  },\n\n  parseHTML() {\n    return [{\n      tag: this.options.allowBase64 ? 'img[src]' : 'img[src]:not([src^=\"data:\"])'\n    }];\n  },\n\n  renderHTML(_ref) {\n    let {\n      HTMLAttributes\n    } = _ref;\n    return ['img', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes)];\n  },\n\n  addCommands() {\n    return {\n      setImage: options => _ref2 => {\n        let {\n          commands\n        } = _ref2;\n        return commands.insertContent({\n          type: this.name,\n          attrs: options\n        });\n      }\n    };\n  },\n\n  addInputRules() {\n    return [nodeInputRule({\n      find: inputRegex,\n      type: this.type,\n      getAttributes: match => {\n        const [,, alt, src, title] = match;\n        return {\n          src,\n          alt,\n          title\n        };\n      }\n    })];\n  }\n\n});\nexport { Image, Image as default, inputRegex };","map":{"version":3,"mappings":";AAuBO,MAAMA,UAAU,GAAG,0DAAnB;AAEM,WAAK,GAAGC,IAAI,CAACC,MAAL,CAA0B;EAC7CC,IAAI,EAAE,OADuC;;EAG7CC,UAAU;IACR,OAAO;MACLC,MAAM,EAAE,KADH;MAELC,WAAW,EAAE,KAFR;MAGLC,cAAc,EAAE;IAHX,CAAP;EAKD,CAT4C;;EAW7CF,MAAM;IACJ,OAAO,KAAKG,OAAL,CAAaH,MAApB;EACD,CAb4C;;EAe7CI,KAAK;IACH,OAAO,KAAKD,OAAL,CAAaH,MAAb,GAAsB,QAAtB,GAAiC,OAAxC;EACD,CAjB4C;;EAmB7CK,SAAS,EAAE,IAnBkC;;EAqB7CC,aAAa;IACX,OAAO;MACLC,GAAG,EAAE;QACHC,OAAO,EAAE;MADN,CADA;MAILC,GAAG,EAAE;QACHD,OAAO,EAAE;MADN,CAJA;MAOLE,KAAK,EAAE;QACLF,OAAO,EAAE;MADJ;IAPF,CAAP;EAWD,CAjC4C;;EAmC7CG,SAAS;IACP,OAAO,CACL;MACEC,GAAG,EAAE,KAAKT,OAAL,CAAaF,WAAb,GACD,UADC,GAED;IAHN,CADK,CAAP;EAOD,CA3C4C;;EA6C7CY,UAAU,OAAmB;IAAA,IAAlB;MAAEX;IAAF,CAAkB;IAC3B,OAAO,CAAC,KAAD,EAAQY,eAAe,CAAC,KAAKX,OAAL,CAAaD,cAAd,EAA8BA,cAA9B,CAAvB,CAAP;EACD,CA/C4C;;EAiD7Ca,WAAW;IACT,OAAO;MACLC,QAAQ,EAAEb,OAAO,IAAI,SAAiB;QAAA,IAAhB;UAAEc;QAAF,CAAgB;QACpC,OAAOA,QAAQ,CAACC,aAAT,CAAuB;UAC5BC,IAAI,EAAE,KAAKrB,IADiB;UAE5BsB,KAAK,EAAEjB;QAFqB,CAAvB,CAAP;MAID;IANI,CAAP;EAQD,CA1D4C;;EA4D7CkB,aAAa;IACX,OAAO,CACLC,aAAa,CAAC;MACZC,IAAI,EAAE5B,UADM;MAEZwB,IAAI,EAAE,KAAKA,IAFC;MAGZK,aAAa,EAAEC,KAAK,IAAG;QACrB,MAAM,IAAIhB,GAAJ,EAASF,GAAT,EAAcG,KAAd,IAAuBe,KAA7B;QAEA,OAAO;UAAElB,GAAF;UAAOE,GAAP;UAAYC;QAAZ,CAAP;MACD;IAPW,CAAD,CADR,CAAP;EAWD;;AAxE4C,CAA1B,CAAR","names":["inputRegex","Node","create","name","addOptions","inline","allowBase64","HTMLAttributes","options","group","draggable","addAttributes","src","default","alt","title","parseHTML","tag","renderHTML","mergeAttributes","addCommands","setImage","commands","insertContent","type","attrs","addInputRules","nodeInputRule","find","getAttributes","match"],"sources":["/Users/evgenijgnedcik/Documents/GitHub/adminPixomnia/node_modules/@tiptap/extension-image/src/image.ts"],"sourcesContent":["import {\n  mergeAttributes,\n  Node,\n  nodeInputRule,\n} from '@tiptap/core'\n\nexport interface ImageOptions {\n  inline: boolean,\n  allowBase64: boolean,\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    image: {\n      /**\n       * Add an image\n       */\n      setImage: (options: { src: string, alt?: string, title?: string }) => ReturnType,\n    }\n  }\n}\n\nexport const inputRegex = /(?:^|\\s)(!\\[(.+|:?)]\\((\\S+)(?:(?:\\s+)[\"'](\\S+)[\"'])?\\))$/\n\nexport const Image = Node.create<ImageOptions>({\n  name: 'image',\n\n  addOptions() {\n    return {\n      inline: false,\n      allowBase64: false,\n      HTMLAttributes: {},\n    }\n  },\n\n  inline() {\n    return this.options.inline\n  },\n\n  group() {\n    return this.options.inline ? 'inline' : 'block'\n  },\n\n  draggable: true,\n\n  addAttributes() {\n    return {\n      src: {\n        default: null,\n      },\n      alt: {\n        default: null,\n      },\n      title: {\n        default: null,\n      },\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: this.options.allowBase64\n          ? 'img[src]'\n          : 'img[src]:not([src^=\"data:\"])',\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['img', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes)]\n  },\n\n  addCommands() {\n    return {\n      setImage: options => ({ commands }) => {\n        return commands.insertContent({\n          type: this.name,\n          attrs: options,\n        })\n      },\n    }\n  },\n\n  addInputRules() {\n    return [\n      nodeInputRule({\n        find: inputRegex,\n        type: this.type,\n        getAttributes: match => {\n          const [,, alt, src, title] = match\n\n          return { src, alt, title }\n        },\n      }),\n    ]\n  },\n})\n"]},"metadata":{},"sourceType":"module"}