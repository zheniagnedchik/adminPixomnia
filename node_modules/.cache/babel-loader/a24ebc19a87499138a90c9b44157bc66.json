{"ast":null,"code":"import { useCallback, useEffect, useRef } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport useAuthProvider, { defaultAuthParams } from './useAuthProvider';\nimport { useResetStore } from '../store';\nimport { useBasename } from '../routing';\nimport { removeDoubleSlashes } from '../routing/useCreatePath';\n/**\n * Get a callback for calling the authProvider.logout() method,\n * redirect to the login page, and clear the store.\n *\n * @see useAuthProvider\n *\n * @returns {Function} logout callback\n *\n * @example\n *\n * import { useLogout } from 'react-admin';\n *\n * const LogoutButton = () => {\n *     const logout = useLogout();\n *     const handleClick = () => logout();\n *     return <button onClick={handleClick}>Logout</button>;\n * }\n */\n\nvar useLogout = function () {\n  var authProvider = useAuthProvider();\n  var resetStore = useResetStore();\n  var navigate = useNavigate(); // useNavigate forces rerenders on every navigation, even if we don't use the result\n  // see https://github.com/remix-run/react-router/issues/7634\n  // so we use a ref to bail out of rerenders when we don't need to\n\n  var navigateRef = useRef(navigate);\n  var location = useLocation();\n  var locationRef = useRef(location);\n  var basename = useBasename();\n  var loginUrl = removeDoubleSlashes(\"\".concat(basename, \"/\").concat(defaultAuthParams.loginUrl));\n  /*\n   * We need the current location to pass in the router state\n   * so that the login hook knows where to redirect to as next route after login.\n   *\n   * But if we used the location from useLocation as a dependency of the logout\n   * function, it would be rebuilt each time the user changes location.\n   * Consequently, that would force a rerender of all components using this hook\n   * upon navigation (CoreAdminRouter for example).\n   *\n   * To avoid that, we store the location in a ref.\n   */\n\n  useEffect(function () {\n    locationRef.current = location;\n    navigateRef.current = navigate;\n  }, [location, navigate]);\n  var logout = useCallback(function (params, redirectTo, redirectToCurrentLocationAfterLogin) {\n    if (params === void 0) {\n      params = {};\n    }\n\n    if (redirectTo === void 0) {\n      redirectTo = loginUrl;\n    }\n\n    if (redirectToCurrentLocationAfterLogin === void 0) {\n      redirectToCurrentLocationAfterLogin = true;\n    }\n\n    return authProvider.logout(params).then(function (redirectToFromProvider) {\n      if (redirectToFromProvider === false) {\n        resetStore(); // do not redirect\n\n        return;\n      } // redirectTo can contain a query string, e.g. '/login?foo=bar'\n      // we must split the redirectTo to pass a structured location to navigate()\n\n\n      var redirectToParts = (redirectToFromProvider || redirectTo).split('?');\n      var newLocation = {\n        pathname: redirectToParts[0]\n      };\n      var newLocationOptions = {};\n\n      if (redirectToCurrentLocationAfterLogin && locationRef.current && locationRef.current.pathname) {\n        newLocationOptions = {\n          state: {\n            nextPathname: locationRef.current.pathname,\n            nextSearch: locationRef.current.search\n          }\n        };\n      }\n\n      if (redirectToParts[1]) {\n        newLocation.search = redirectToParts[1];\n      }\n\n      navigateRef.current(newLocation, newLocationOptions);\n      resetStore();\n      return redirectToFromProvider;\n    });\n  }, [authProvider, resetStore, loginUrl]);\n  var logoutWithoutProvider = useCallback(function (_) {\n    navigate({\n      pathname: loginUrl\n    }, {\n      state: {\n        nextPathname: location && location.pathname\n      }\n    });\n    resetStore();\n    return Promise.resolve();\n  }, [resetStore, location, navigate, loginUrl]);\n  return authProvider ? logout : logoutWithoutProvider;\n};\n\nexport default useLogout;","map":{"version":3,"names":["useCallback","useEffect","useRef","useLocation","useNavigate","useAuthProvider","defaultAuthParams","useResetStore","useBasename","removeDoubleSlashes","useLogout","authProvider","resetStore","navigate","navigateRef","location","locationRef","basename","loginUrl","concat","current","logout","params","redirectTo","redirectToCurrentLocationAfterLogin","then","redirectToFromProvider","redirectToParts","split","newLocation","pathname","newLocationOptions","state","nextPathname","nextSearch","search","logoutWithoutProvider","_","Promise","resolve"],"sources":["/Users/evgenijgnedcik/Documents/GitHub/adminPixomnia/node_modules/ra-core/dist/esm/auth/useLogout.js"],"sourcesContent":["import { useCallback, useEffect, useRef } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport useAuthProvider, { defaultAuthParams } from './useAuthProvider';\nimport { useResetStore } from '../store';\nimport { useBasename } from '../routing';\nimport { removeDoubleSlashes } from '../routing/useCreatePath';\n/**\n * Get a callback for calling the authProvider.logout() method,\n * redirect to the login page, and clear the store.\n *\n * @see useAuthProvider\n *\n * @returns {Function} logout callback\n *\n * @example\n *\n * import { useLogout } from 'react-admin';\n *\n * const LogoutButton = () => {\n *     const logout = useLogout();\n *     const handleClick = () => logout();\n *     return <button onClick={handleClick}>Logout</button>;\n * }\n */\nvar useLogout = function () {\n    var authProvider = useAuthProvider();\n    var resetStore = useResetStore();\n    var navigate = useNavigate();\n    // useNavigate forces rerenders on every navigation, even if we don't use the result\n    // see https://github.com/remix-run/react-router/issues/7634\n    // so we use a ref to bail out of rerenders when we don't need to\n    var navigateRef = useRef(navigate);\n    var location = useLocation();\n    var locationRef = useRef(location);\n    var basename = useBasename();\n    var loginUrl = removeDoubleSlashes(\"\".concat(basename, \"/\").concat(defaultAuthParams.loginUrl));\n    /*\n     * We need the current location to pass in the router state\n     * so that the login hook knows where to redirect to as next route after login.\n     *\n     * But if we used the location from useLocation as a dependency of the logout\n     * function, it would be rebuilt each time the user changes location.\n     * Consequently, that would force a rerender of all components using this hook\n     * upon navigation (CoreAdminRouter for example).\n     *\n     * To avoid that, we store the location in a ref.\n     */\n    useEffect(function () {\n        locationRef.current = location;\n        navigateRef.current = navigate;\n    }, [location, navigate]);\n    var logout = useCallback(function (params, redirectTo, redirectToCurrentLocationAfterLogin) {\n        if (params === void 0) { params = {}; }\n        if (redirectTo === void 0) { redirectTo = loginUrl; }\n        if (redirectToCurrentLocationAfterLogin === void 0) { redirectToCurrentLocationAfterLogin = true; }\n        return authProvider.logout(params).then(function (redirectToFromProvider) {\n            if (redirectToFromProvider === false) {\n                resetStore();\n                // do not redirect\n                return;\n            }\n            // redirectTo can contain a query string, e.g. '/login?foo=bar'\n            // we must split the redirectTo to pass a structured location to navigate()\n            var redirectToParts = (redirectToFromProvider || redirectTo).split('?');\n            var newLocation = {\n                pathname: redirectToParts[0],\n            };\n            var newLocationOptions = {};\n            if (redirectToCurrentLocationAfterLogin &&\n                locationRef.current &&\n                locationRef.current.pathname) {\n                newLocationOptions = {\n                    state: {\n                        nextPathname: locationRef.current.pathname,\n                        nextSearch: locationRef.current.search,\n                    },\n                };\n            }\n            if (redirectToParts[1]) {\n                newLocation.search = redirectToParts[1];\n            }\n            navigateRef.current(newLocation, newLocationOptions);\n            resetStore();\n            return redirectToFromProvider;\n        });\n    }, [authProvider, resetStore, loginUrl]);\n    var logoutWithoutProvider = useCallback(function (_) {\n        navigate({\n            pathname: loginUrl,\n        }, {\n            state: {\n                nextPathname: location && location.pathname,\n            },\n        });\n        resetStore();\n        return Promise.resolve();\n    }, [resetStore, location, navigate, loginUrl]);\n    return authProvider ? logout : logoutWithoutProvider;\n};\nexport default useLogout;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}