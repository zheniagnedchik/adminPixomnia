{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { Form } from 'react-admin';\nimport { AccordionFormView } from './AccordionFormView';\n/**\n * Form component rendering a list of <Accordion> components.\n *\n * Alternative to <SimpleForm>, to be used as child of <Create> or <Edit>.\n * Expects <AccordionFormPanel> elements as children.\n *\n * @param {boolean} autoClose If true, opening an accordion will close the others. Defaults to false.\n * @param {ReactElement} toolbar An alternative toolbar element (to customize form buttons)\n *\n * @example\n *\n * import { Edit, TextField, TextInput, DateInput, SelectInput, ArrayInput, SimpleFormIterator, BooleanInput } from 'react-admin';\n * import { AccordionForm, AccordionFormPanel } from '@react-admin/ra-form-layout';\n *\n * // don't forget the component=\"div\" prop on the main component to disable the main Card\n * const CustomerEdit = () => (\n *     <Edit component=\"div\">\n *         <AccordionForm>\n *             <AccordionFormPanel label=\"Identity\" defaultExpanded>\n *                 <TextField source=\"id\" />\n *                 <TextInput source=\"first_name\" validate={required()} />\n *                 <TextInput source=\"last_name\" validate={required()} />\n *                 <DateInput source=\"dob\" label=\"born\" validate={required()} />\n *                 <SelectInput source=\"sex\" choices={sexChoices} />\n *             </AccordionFormPanel>\n *             <AccordionFormPanel label=\"Occupations\">\n *                 <ArrayInput source=\"occupations\" label=\"\">\n *                     <SimpleFormIterator>\n *                         <TextInput source=\"name\" validate={required()} />\n *                         <DateInput source=\"from\" validate={required()} />\n *                         <DateInput source=\"to\" />\n *                     </SimpleFormIterator>\n *                 </ArrayInput>\n *             </AccordionFormPanel>\n *             <AccordionFormPanel label=\"Preferences\">\n *                 <SelectInput\n *                     source=\"language\"\n *                     choices={languageChoices}\n *                     defaultValue=\"en\"\n *                 />\n *                 <BooleanInput source=\"dark_theme\" />\n *                 <BooleanInput source=\"accepts_emails_from_partners\" />\n *             </AccordionFormPanel>\n *         </AccordionForm>\n *     </Edit>\n * );\n */\n\nexport var AccordionForm = function (props) {\n  var context = props.context,\n      criteriaMode = props.criteriaMode,\n      defaultValues = props.defaultValues,\n      delayError = props.delayError,\n      formRootPathname = props.formRootPathname,\n      id = props.id,\n      mode = props.mode,\n      noValidate = props.noValidate,\n      onSubmit = props.onSubmit,\n      record = props.record,\n      resolver = props.resolver,\n      reValidateMode = props.reValidateMode,\n      shouldFocusError = props.shouldFocusError,\n      shouldUnregister = props.shouldUnregister,\n      shouldUseNativeValidation = props.shouldUseNativeValidation,\n      validate = props.validate,\n      warnWhenUnsavedChanges = props.warnWhenUnsavedChanges,\n      rest = __rest(props, [\"context\", \"criteriaMode\", \"defaultValues\", \"delayError\", \"formRootPathname\", \"id\", \"mode\", \"noValidate\", \"onSubmit\", \"record\", \"resolver\", \"reValidateMode\", \"shouldFocusError\", \"shouldUnregister\", \"shouldUseNativeValidation\", \"validate\", \"warnWhenUnsavedChanges\"]);\n\n  return React.createElement(Form, {\n    context: context,\n    criteriaMode: criteriaMode,\n    defaultValues: defaultValues,\n    delayError: delayError,\n    formRootPathname: formRootPathname,\n    id: id,\n    mode: mode,\n    noValidate: noValidate,\n    onSubmit: onSubmit,\n    record: record,\n    resolver: resolver,\n    reValidateMode: reValidateMode,\n    shouldFocusError: shouldFocusError,\n    shouldUnregister: shouldUnregister,\n    shouldUseNativeValidation: shouldUseNativeValidation,\n    validate: validate,\n    warnWhenUnsavedChanges: warnWhenUnsavedChanges\n  }, React.createElement(AccordionFormView, __assign({}, rest)));\n};","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","React","Form","AccordionFormView","AccordionForm","props","context","criteriaMode","defaultValues","delayError","formRootPathname","id","mode","noValidate","onSubmit","record","resolver","reValidateMode","shouldFocusError","shouldUnregister","shouldUseNativeValidation","validate","warnWhenUnsavedChanges","rest","createElement"],"sources":["/Users/evgenijgnedcik/Documents/GitHub/adminPixomnia/node_modules/@react-admin/ra-form-layout/esm/src/forms/accordion-form/AccordionForm.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from 'react';\nimport { Form } from 'react-admin';\nimport { AccordionFormView } from './AccordionFormView';\n/**\n * Form component rendering a list of <Accordion> components.\n *\n * Alternative to <SimpleForm>, to be used as child of <Create> or <Edit>.\n * Expects <AccordionFormPanel> elements as children.\n *\n * @param {boolean} autoClose If true, opening an accordion will close the others. Defaults to false.\n * @param {ReactElement} toolbar An alternative toolbar element (to customize form buttons)\n *\n * @example\n *\n * import { Edit, TextField, TextInput, DateInput, SelectInput, ArrayInput, SimpleFormIterator, BooleanInput } from 'react-admin';\n * import { AccordionForm, AccordionFormPanel } from '@react-admin/ra-form-layout';\n *\n * // don't forget the component=\"div\" prop on the main component to disable the main Card\n * const CustomerEdit = () => (\n *     <Edit component=\"div\">\n *         <AccordionForm>\n *             <AccordionFormPanel label=\"Identity\" defaultExpanded>\n *                 <TextField source=\"id\" />\n *                 <TextInput source=\"first_name\" validate={required()} />\n *                 <TextInput source=\"last_name\" validate={required()} />\n *                 <DateInput source=\"dob\" label=\"born\" validate={required()} />\n *                 <SelectInput source=\"sex\" choices={sexChoices} />\n *             </AccordionFormPanel>\n *             <AccordionFormPanel label=\"Occupations\">\n *                 <ArrayInput source=\"occupations\" label=\"\">\n *                     <SimpleFormIterator>\n *                         <TextInput source=\"name\" validate={required()} />\n *                         <DateInput source=\"from\" validate={required()} />\n *                         <DateInput source=\"to\" />\n *                     </SimpleFormIterator>\n *                 </ArrayInput>\n *             </AccordionFormPanel>\n *             <AccordionFormPanel label=\"Preferences\">\n *                 <SelectInput\n *                     source=\"language\"\n *                     choices={languageChoices}\n *                     defaultValue=\"en\"\n *                 />\n *                 <BooleanInput source=\"dark_theme\" />\n *                 <BooleanInput source=\"accepts_emails_from_partners\" />\n *             </AccordionFormPanel>\n *         </AccordionForm>\n *     </Edit>\n * );\n */\nexport var AccordionForm = function (props) {\n    var context = props.context, criteriaMode = props.criteriaMode, defaultValues = props.defaultValues, delayError = props.delayError, formRootPathname = props.formRootPathname, id = props.id, mode = props.mode, noValidate = props.noValidate, onSubmit = props.onSubmit, record = props.record, resolver = props.resolver, reValidateMode = props.reValidateMode, shouldFocusError = props.shouldFocusError, shouldUnregister = props.shouldUnregister, shouldUseNativeValidation = props.shouldUseNativeValidation, validate = props.validate, warnWhenUnsavedChanges = props.warnWhenUnsavedChanges, rest = __rest(props, [\"context\", \"criteriaMode\", \"defaultValues\", \"delayError\", \"formRootPathname\", \"id\", \"mode\", \"noValidate\", \"onSubmit\", \"record\", \"resolver\", \"reValidateMode\", \"shouldFocusError\", \"shouldUnregister\", \"shouldUseNativeValidation\", \"validate\", \"warnWhenUnsavedChanges\"]);\n    return (React.createElement(Form, { context: context, criteriaMode: criteriaMode, defaultValues: defaultValues, delayError: delayError, formRootPathname: formRootPathname, id: id, mode: mode, noValidate: noValidate, onSubmit: onSubmit, record: record, resolver: resolver, reValidateMode: reValidateMode, shouldFocusError: shouldFocusError, shouldUnregister: shouldUnregister, shouldUseNativeValidation: shouldUseNativeValidation, validate: validate, warnWhenUnsavedChanges: warnWhenUnsavedChanges },\n        React.createElement(AccordionFormView, __assign({}, rest))));\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}