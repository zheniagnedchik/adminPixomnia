{"ast":null,"code":"var _jsxFileName = \"/Users/evgenijgnedcik/Documents/GitHub/adminPixomnia/src/App.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { Admin, Resource, fetchUtils, GET_LIST, CREATE, GET_ONE, UPDATE, defaultTheme, useTheme, DELETE } from \"react-admin\";\nimport SouthAmericaIcon from \"@mui/icons-material/SouthAmerica\";\nimport LocalPrintshopIcon from \"@mui/icons-material/LocalPrintshop\";\nimport RegionList from \"./components/RegionList\";\nimport RegionCreate from \"./components/RegionCreate\";\nimport axios from \"axios\";\nimport PrinterList from \"./components/Printers/PrinterList\";\nimport PrinterCreate from \"./components/Printers/PrinterCreate\";\nimport PlacesList from \"./components/Places/PlacesList\";\nimport PlaceCreate from \"./components/Places/PlacesCreate\";\nimport StorefrontIcon from \"@mui/icons-material/Storefront\";\nimport PeopleAltIcon from \"@mui/icons-material/PeopleAlt\";\nimport EmployeesListList from \"./components/Employees/EmployeesList\";\nimport EmployeesCreate from \"./components/Employees/EmployeesCreate\";\nimport EmployeesEdit from \"./components/Employees/EmployeesEdit\";\nimport PrintersEdit from \"./components/Printers/PrintersEdit\";\nimport ShiftScheduleListList from \"./components/ShiftSchedule/ShiftScheduleList\";\nimport ShiftScheduleListCreate from \"./components/ShiftSchedule/ShiftScheduleCreate\";\nimport WorkHistoryIcon from \"@mui/icons-material/WorkHistory\";\nimport PlacesEdit from \"./components/Places/PlacesEdit\";\nimport InventoryIcon from \"@mui/icons-material/Inventory\";\nimport PrintRoundedIcon from \"@mui/icons-material/PrintRounded\";\nimport AcUnitIcon from \"@mui/icons-material/AcUnit\";\nimport { URI } from \"./URLS\";\nimport { Button } from \"@mui/material\";\nimport MyLayout from \"./components/MyLayout/Layout\";\nimport { getCurrentDate } from \"./getDate\";\nimport InventoryList from \"./components/Inventory/InventoryList\";\nimport OnePrintInventoryList from \"./components/Inventory/OnePrintInventoryList\";\nimport ClosedShiftStatistic from \"./components/ShiftStatistic/ClosedShiftStatistic\";\nimport EmployeeGrid from \"./components/ShiftStatistic/EmployeeGrid\";\nimport AddReactionIcon from \"@mui/icons-material/AddReaction\";\nimport OpenShiftStatistic from \"./components/ShiftStatistic/OpenShiftStatistic\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  console.log(\"URI\", URI);\n  const lightTheme = defaultTheme;\n  const darkTheme = { ...defaultTheme,\n    palette: {\n      mode: \"dark\"\n    }\n  };\n\n  const setBody = (resource, params) => {\n    switch (resource) {\n      case \"addPlace\":\n        return {\n          place: { ...params.data,\n            printerIds: [],\n            employeeIds: []\n          }\n        };\n\n      case \"addEmployee\":\n        return {\n          employee: { ...params.data\n          }\n        };\n\n      case \"addShiftSchedule\":\n        const param = {\n          placeId: params.data.placeId,\n          employeeId: params.data.employeeId,\n          startTime: getCurrentDate(params.data.startTime),\n          endTime: getCurrentDate(params.data.endTime),\n          softStartInMinutes: params.data.softStartInMinutes,\n          shiftManager: params.data.shiftManager\n        };\n        return param;\n\n      default:\n        return params.data;\n    }\n  };\n\n  const getLink = (resource, params, body) => {\n    const date = getCurrentDate(new Date());\n    const curDate = new Date();\n    const dateInventoryLogs = curDate.setDate(curDate.getDate() - 1);\n    console.log(date);\n\n    switch (resource) {\n      case \"getShiftSchedule\":\n        return `${URI}/${resource}?employeeId=admin@pixomnia.com&placeId=malroze&fromTime=${date}`;\n\n      case \"getRegions\":\n        return `${URI}/getRegions?employeeId=admin@pixomnia.com`;\n\n      case \"getInventoryLogs\":\n        return `${URI}/${resource}?employeeId=admin@pixomnia.com&regionId=TX&fromTime=${new Date(dateInventoryLogs).toISOString()}`;\n\n      case \"getPrinterInfoLogs\":\n        return `${URI}/${resource}?employeeId=admin@pixomnia.com&printerId=rePrinter01&fromTime=${new Date(dateInventoryLogs).toISOString()}`;\n\n      case \"getCloseShiftStatistics\":\n        return `${URI}/${resource}?employeeId=admin@pixomnia.com&regionId=TX&fromTime=${new Date(dateInventoryLogs).toISOString()}`;\n\n      case \"getOpenShiftStatistics\":\n        return `${URI}/${resource}?employeeId=admin@pixomnia.com&regionId=TX`;\n\n      default:\n        return `${URI}/${resource}?${body}`;\n    }\n  };\n\n  const getNewData = (resource, getListData, params) => {\n    let new_data;\n\n    switch (resource) {\n      case \"getPlacesWithInfo\":\n        new_data = getListData.data.map((i, index) => {\n          let printer = i.printerIds.map(it => {\n            return {\n              item: it\n            };\n          });\n          let employee = i.employeeIds.map(it => {\n            return {\n              item: it\n            };\n          });\n          const printFilter = printer.filter(el => el.item.length > 0);\n          const employeeFilter = employee.filter(el => el.item.length > 0);\n          return { ...i,\n            newList: printFilter,\n            id: index,\n            employee: employeeFilter\n          };\n        });\n        return new_data;\n\n      default:\n        console.log(getListData);\n        new_data = getListData.data.map((i, index) => {\n          return { ...i,\n            id: index\n          };\n        });\n        return new_data;\n    }\n  };\n\n  const sort = (field, order, array) => {\n    console.log(\"field\", field);\n\n    switch (field) {\n      case \"clockInTime\":\n        if (order === \"ASC\") {\n          return array.sort((a, b) => new Date(a[field]) - new Date(b[field]));\n        } else {\n          return array.sort((a, b) => new Date(b[field]) - new Date(a[field]));\n        }\n\n      case \"clockOutTime\":\n        if (order === \"ASC\") {\n          return array.sort((a, b) => new Date(a[field]) - new Date(b[field]));\n        } else {\n          return array.sort((a, b) => new Date(b[field]) - new Date(a[field]));\n        }\n\n      case \"startTime\":\n        if (order === \"ASC\") {\n          return array.sort((a, b) => new Date(a[field]) - new Date(b[field]));\n        } else {\n          return array.sort((a, b) => new Date(b[field]) - new Date(a[field]));\n        }\n\n      case \"endTime\":\n        if (order === \"ASC\") {\n          return array.sort((a, b) => new Date(a[field]) - new Date(b[field]));\n        } else {\n          return array.sort((a, b) => new Date(b[field]) - new Date(a[field]));\n        }\n\n      default:\n        if (order === \"ASC\") {\n          return array.sort((a, b) => {\n            if (typeof a.field === \"string\") {\n              return a[field].localeCompare(b[field]);\n            } else {\n              return a[field] - b[field];\n            }\n          });\n        } else {\n          console.log(\"figfjkg\");\n          return array.sort((a, b) => {\n            if (typeof a.field === \"string\") {\n              console.log(\"dksdklmcd\");\n              return b[field].localeCompare(a[field]);\n            } else {\n              console.log(\"dsfd\");\n              return b[field] - a[field];\n            }\n          });\n        }\n\n    }\n  };\n\n  const test = async (type, resource, params) => {\n    const body = \"employeeId=reload&regionId=TX\";\n    console.log(\"type\", type);\n    console.log(\"resource\", resource);\n    console.log(\"params\", params);\n\n    switch (type) {\n      case GET_LIST:\n        const link = getLink(resource, params, body);\n        const getListData = await axios.get(link);\n        const newData = getNewData(resource, getListData, params);\n        let test;\n\n        if (params.pagination.perPage <= newData.length) {\n          test = newData.splice((params.pagination.page - 1) * params.pagination.perPage, params.pagination.perPage);\n        } else {\n          test = [...newData];\n        }\n\n        const sortedList = sort(params.sort.field, params.sort.order, test);\n        return {\n          data: sortedList,\n          total: getListData.data.length\n        };\n\n      case CREATE:\n        const createBody = setBody(resource, params);\n        const create = await axios.post(`${URI}/${resource}`, createBody);\n        const jsonParse = JSON.parse(create.data.responseJson);\n        const createData = {\n          id: 9,\n          ...jsonParse\n        };\n        return {\n          data: createData\n        };\n\n      case GET_ONE:\n        const list = await axios.get(`${URI}/${resource}?${body}`); // const list_data = list.data.map((i, index) => {\n        //   return { ...i, id: index };\n        // });\n\n        let g = list.data.map((i, index) => {\n          let printer = i.printerIds.map(it => {\n            return {\n              item: it\n            };\n          });\n          let employee = i.employeeIds.map(it => {\n            return {\n              item: it\n            };\n          });\n          const printFilter = printer.filter(el => el.item.length > 0);\n          const employeeFilter = employee.filter(el => el.item.length > 0);\n          console.log(printFilter);\n          return { ...i,\n            newList: printFilter,\n            id: index,\n            employee: employeeFilter\n          };\n        });\n        const filter = g.filter(item => item.id == params.id);\n        console.log(\"filter\", filter);\n        return {\n          data: filter[0]\n        };\n\n      case UPDATE:\n        console.log(\"paramfdfd\", params);\n        const udpList = await axios.get(`${URI}/${resource}?${body}`); // const list_data = list.data.map((i, index) => {\n        //   return { ...i, id: index };\n        // });\n\n        let udp = udpList.data.map((i, index) => {\n          let printer = i.printerIds.map(it => {\n            return {\n              item: it\n            };\n          });\n          let employee = i.employeeIds.map(it => {\n            return {\n              item: it\n            };\n          });\n          const printFilters = printer.filter(el => el.item.length > 0);\n          const employeeFilters = employee.filter(el => el.item.length > 0);\n          return { ...i,\n            newList: printFilters,\n            id: index,\n            employee: employeeFilters\n          };\n        });\n        const filters = udp.filter(item => item.id == params.id);\n        const newPrinters = params.data.newList.filter(e => filters[0].newList.findIndex(i => i.item == e.item) === -1);\n        const delPrinters = filters[0].newList.filter(e => params.data.newList.findIndex(i => i.item == e.item) === -1);\n        const newEmployee = params.data.employee.filter(e => filters[0].employee.findIndex(i => i.item == e.item) === -1);\n        const delEmployee = filters[0].employee.filter(e => params.data.employee.findIndex(i => i.item == e.item) === -1);\n\n        if (newPrinters.length > 0) {\n          for (const item of newPrinters) {\n            await axios.post(`${URI}/linkPrinterAndPlace`, {\n              placeId: params.data.placeId,\n              printerId: item.item\n            }).then(data => console.log(data));\n          }\n        }\n\n        if (delPrinters.length > 0) {\n          for (const item of delPrinters) {\n            await axios.post(`${URI}/unlinkPrinterFromPlace`, {\n              placeId: params.data.placeId,\n              printerId: item.item\n            }).then(data => console.log(data));\n          }\n        }\n\n        if (newEmployee.length > 0) {\n          for (const item of newEmployee) {\n            await axios.post(`${URI}/linkEmployeeAndPlace`, {\n              placeId: params.data.placeId,\n              employeeId: item.item\n            }).then(data => console.log(data));\n          }\n        }\n\n        if (delEmployee.length > 0) {\n          for (const item of delEmployee) {\n            await axios.post(`${URI}/unlinkEmployeeFromPlace`, {\n              placeId: params.data.placeId,\n              employeeId: item.item\n            }).then(data => console.log(data));\n          }\n        } // newPrinters.map(async (item) => {\n        //   await axios\n        //     .post(`http://dev-api-v1.pixomnia.com:8087/linkPrinterAndPlace`, {\n        //       placeId: params.data.placeId,\n        //       printerId: item.item,\n        //     })\n        //     .then((data) => console.log(data));\n        // });\n        // delPrinters.map(async (item) => {\n        //   await axios\n        //     .post(\n        //       `http://dev-api-v1.pixomnia.com:8087/unlinkPrinterFromPlace`,\n        //       {\n        //         placeId: params.data.placeId,\n        //         printerId: item.item,\n        //       }\n        //     )\n        //     .then((data) => console.log(data));\n        // });\n        // return { data: filter[0] };\n        // let update;\n        // if (resource === \"getEmployees\") {\n        //   update = await axios.post(\n        //     `http://dev-api-v1.pixomnia.com:8087/linkEmployeeAndPlace`,\n        //     { placeId: params.data.placeId, employeeId: params.data.email }\n        //   );\n        // }\n        // if (resource === \"getPrinters\") {\n        //   update = await axios.post(\n        //     `http://dev-api-v1.pixomnia.com:8087/linkPrinterAndPlace`,\n        //     { placeId: params.data.placeId, printerId: params.data.printerId }\n        //   );\n        // }\n        // const jsonParseUpd = JSON.parse(update.data.responseJson);\n        // const updData = { id: 9, ...jsonParseUpd };\n\n\n        return {\n          data: params.data\n        };\n\n      case DELETE:\n        console.log(params);\n        axios.get(`${URI}/deleteShift?shiftScheduleId=${params.previousData.shiftScheduleId}`);\n        return {\n          data: params.data\n        };\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Admin, {\n    dataProvider: test,\n    layout: MyLayout,\n    children: [/*#__PURE__*/_jsxDEV(Resource, {\n      name: \"getRegions\",\n      list: RegionList,\n      create: RegionCreate,\n      icon: SouthAmericaIcon,\n      options: {\n        label: \"Regions\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Resource, {\n      name: \"getPrinters\",\n      list: PrinterList,\n      create: PrinterCreate,\n      edit: PrintersEdit,\n      icon: LocalPrintshopIcon,\n      options: {\n        label: \"Printers\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Resource, {\n      name: \"getPlacesWithInfo\",\n      list: PlacesList,\n      create: PlaceCreate,\n      icon: StorefrontIcon,\n      edit: PlacesEdit,\n      options: {\n        label: \"Places\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Resource, {\n      name: \"getEmployees\",\n      list: EmployeesListList,\n      create: EmployeesCreate,\n      edit: EmployeesEdit,\n      icon: PeopleAltIcon,\n      options: {\n        label: \"Employees\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Resource, {\n      name: \"getShiftSchedule\",\n      list: ShiftScheduleListList,\n      create: ShiftScheduleListCreate,\n      icon: WorkHistoryIcon,\n      options: {\n        label: \"Shift\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Resource, {\n      name: \"getInventoryLogs\",\n      list: InventoryList,\n      icon: InventoryIcon,\n      options: {\n        label: \"Inventory\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Resource, {\n      name: \"getPrinterInfoLogs\",\n      list: OnePrintInventoryList,\n      icon: PrintRoundedIcon,\n      options: {\n        label: \"Printer info logs\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 417,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Resource, {\n      name: \"getCloseShiftStatistics\",\n      list: ClosedShiftStatistic,\n      icon: AcUnitIcon,\n      options: {\n        label: \"Closed shift statistic\"\n      },\n      show: EmployeeGrid\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Resource, {\n      name: \"getOpenShiftStatistics\",\n      list: OpenShiftStatistic,\n      icon: AddReactionIcon,\n      options: {\n        label: \"Open shift statistic\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 430,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 372,\n    columnNumber: 5\n  }, this);\n}\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Admin","Resource","fetchUtils","GET_LIST","CREATE","GET_ONE","UPDATE","defaultTheme","useTheme","DELETE","SouthAmericaIcon","LocalPrintshopIcon","RegionList","RegionCreate","axios","PrinterList","PrinterCreate","PlacesList","PlaceCreate","StorefrontIcon","PeopleAltIcon","EmployeesListList","EmployeesCreate","EmployeesEdit","PrintersEdit","ShiftScheduleListList","ShiftScheduleListCreate","WorkHistoryIcon","PlacesEdit","InventoryIcon","PrintRoundedIcon","AcUnitIcon","URI","Button","MyLayout","getCurrentDate","InventoryList","OnePrintInventoryList","ClosedShiftStatistic","EmployeeGrid","AddReactionIcon","OpenShiftStatistic","App","console","log","lightTheme","darkTheme","palette","mode","setBody","resource","params","place","data","printerIds","employeeIds","employee","param","placeId","employeeId","startTime","endTime","softStartInMinutes","shiftManager","getLink","body","date","Date","curDate","dateInventoryLogs","setDate","getDate","toISOString","getNewData","getListData","new_data","map","i","index","printer","it","item","printFilter","filter","el","length","employeeFilter","newList","id","sort","field","order","array","a","b","localeCompare","test","type","link","get","newData","pagination","perPage","splice","page","sortedList","total","createBody","create","post","jsonParse","JSON","parse","responseJson","createData","list","g","udpList","udp","printFilters","employeeFilters","filters","newPrinters","e","findIndex","delPrinters","newEmployee","delEmployee","printerId","then","previousData","shiftScheduleId","label"],"sources":["/Users/evgenijgnedcik/Documents/GitHub/adminPixomnia/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {\n  Admin,\n  Resource,\n  fetchUtils,\n  GET_LIST,\n  CREATE,\n  GET_ONE,\n  UPDATE,\n  defaultTheme,\n  useTheme,\n  DELETE,\n} from \"react-admin\";\nimport SouthAmericaIcon from \"@mui/icons-material/SouthAmerica\";\nimport LocalPrintshopIcon from \"@mui/icons-material/LocalPrintshop\";\nimport RegionList from \"./components/RegionList\";\nimport RegionCreate from \"./components/RegionCreate\";\nimport axios from \"axios\";\nimport PrinterList from \"./components/Printers/PrinterList\";\nimport PrinterCreate from \"./components/Printers/PrinterCreate\";\nimport PlacesList from \"./components/Places/PlacesList\";\nimport PlaceCreate from \"./components/Places/PlacesCreate\";\nimport StorefrontIcon from \"@mui/icons-material/Storefront\";\nimport PeopleAltIcon from \"@mui/icons-material/PeopleAlt\";\nimport EmployeesListList from \"./components/Employees/EmployeesList\";\nimport EmployeesCreate from \"./components/Employees/EmployeesCreate\";\nimport EmployeesEdit from \"./components/Employees/EmployeesEdit\";\nimport PrintersEdit from \"./components/Printers/PrintersEdit\";\nimport ShiftScheduleListList from \"./components/ShiftSchedule/ShiftScheduleList\";\nimport ShiftScheduleListCreate from \"./components/ShiftSchedule/ShiftScheduleCreate\";\nimport WorkHistoryIcon from \"@mui/icons-material/WorkHistory\";\nimport PlacesEdit from \"./components/Places/PlacesEdit\";\nimport InventoryIcon from \"@mui/icons-material/Inventory\";\nimport PrintRoundedIcon from \"@mui/icons-material/PrintRounded\";\nimport AcUnitIcon from \"@mui/icons-material/AcUnit\";\nimport { URI } from \"./URLS\";\n\nimport { Button } from \"@mui/material\";\nimport MyLayout from \"./components/MyLayout/Layout\";\nimport { getCurrentDate } from \"./getDate\";\nimport InventoryList from \"./components/Inventory/InventoryList\";\nimport OnePrintInventoryList from \"./components/Inventory/OnePrintInventoryList\";\nimport ClosedShiftStatistic from \"./components/ShiftStatistic/ClosedShiftStatistic\";\nimport EmployeeGrid from \"./components/ShiftStatistic/EmployeeGrid\";\nimport AddReactionIcon from \"@mui/icons-material/AddReaction\";\nimport OpenShiftStatistic from \"./components/ShiftStatistic/OpenShiftStatistic\";\n\nfunction App() {\n  console.log(\"URI\", URI);\n  const lightTheme = defaultTheme;\n  const darkTheme = {\n    ...defaultTheme,\n    palette: {\n      mode: \"dark\",\n    },\n  };\n\n  const setBody = (resource, params) => {\n    switch (resource) {\n      case \"addPlace\":\n        return { place: { ...params.data, printerIds: [], employeeIds: [] } };\n      case \"addEmployee\":\n        return { employee: { ...params.data } };\n      case \"addShiftSchedule\":\n        const param = {\n          placeId: params.data.placeId,\n          employeeId: params.data.employeeId,\n          startTime: getCurrentDate(params.data.startTime),\n          endTime: getCurrentDate(params.data.endTime),\n          softStartInMinutes: params.data.softStartInMinutes,\n          shiftManager: params.data.shiftManager,\n        };\n        return param;\n      default:\n        return params.data;\n    }\n  };\n\n  const getLink = (resource, params, body) => {\n    const date = getCurrentDate(new Date());\n    const curDate = new Date();\n    const dateInventoryLogs = curDate.setDate(curDate.getDate() - 1);\n\n    console.log(date);\n    switch (resource) {\n      case \"getShiftSchedule\":\n        return `${URI}/${resource}?employeeId=admin@pixomnia.com&placeId=malroze&fromTime=${date}`;\n      case \"getRegions\":\n        return `${URI}/getRegions?employeeId=admin@pixomnia.com`;\n      case \"getInventoryLogs\":\n        return `${URI}/${resource}?employeeId=admin@pixomnia.com&regionId=TX&fromTime=${new Date(\n          dateInventoryLogs\n        ).toISOString()}`;\n      case \"getPrinterInfoLogs\":\n        return `${URI}/${resource}?employeeId=admin@pixomnia.com&printerId=rePrinter01&fromTime=${new Date(\n          dateInventoryLogs\n        ).toISOString()}`;\n      case \"getCloseShiftStatistics\":\n        return `${URI}/${resource}?employeeId=admin@pixomnia.com&regionId=TX&fromTime=${new Date(\n          dateInventoryLogs\n        ).toISOString()}`;\n      case \"getOpenShiftStatistics\":\n        return `${URI}/${resource}?employeeId=admin@pixomnia.com&regionId=TX`;\n      default:\n        return `${URI}/${resource}?${body}`;\n    }\n  };\n  const getNewData = (resource, getListData, params) => {\n    let new_data;\n    switch (resource) {\n      case \"getPlacesWithInfo\":\n        new_data = getListData.data.map((i, index) => {\n          let printer = i.printerIds.map((it) => {\n            return { item: it };\n          });\n          let employee = i.employeeIds.map((it) => {\n            return { item: it };\n          });\n          const printFilter = printer.filter((el) => el.item.length > 0);\n          const employeeFilter = employee.filter((el) => el.item.length > 0);\n\n          return {\n            ...i,\n            newList: printFilter,\n            id: index,\n            employee: employeeFilter,\n          };\n        });\n        return new_data;\n\n      default:\n        console.log(getListData);\n        new_data = getListData.data.map((i, index) => {\n          return { ...i, id: index };\n        });\n        return new_data;\n    }\n  };\n  const sort = (field, order, array) => {\n    console.log(\"field\", field);\n    switch (field) {\n      case \"clockInTime\":\n        if (order === \"ASC\") {\n          return array.sort((a, b) => new Date(a[field]) - new Date(b[field]));\n        } else {\n          return array.sort((a, b) => new Date(b[field]) - new Date(a[field]));\n        }\n      case \"clockOutTime\":\n        if (order === \"ASC\") {\n          return array.sort((a, b) => new Date(a[field]) - new Date(b[field]));\n        } else {\n          return array.sort((a, b) => new Date(b[field]) - new Date(a[field]));\n        }\n      case \"startTime\":\n        if (order === \"ASC\") {\n          return array.sort((a, b) => new Date(a[field]) - new Date(b[field]));\n        } else {\n          return array.sort((a, b) => new Date(b[field]) - new Date(a[field]));\n        }\n      case \"endTime\":\n        if (order === \"ASC\") {\n          return array.sort((a, b) => new Date(a[field]) - new Date(b[field]));\n        } else {\n          return array.sort((a, b) => new Date(b[field]) - new Date(a[field]));\n        }\n\n      default:\n        if (order === \"ASC\") {\n          return array.sort((a, b) => {\n            if (typeof a.field === \"string\") {\n              return a[field].localeCompare(b[field]);\n            } else {\n              return a[field] - b[field];\n            }\n          });\n        } else {\n          console.log(\"figfjkg\");\n          return array.sort((a, b) => {\n            if (typeof a.field === \"string\") {\n              console.log(\"dksdklmcd\");\n              return b[field].localeCompare(a[field]);\n            } else {\n              console.log(\"dsfd\");\n              return b[field] - a[field];\n            }\n          });\n        }\n    }\n  };\n  const test = async (type, resource, params) => {\n    const body = \"employeeId=reload&regionId=TX\";\n    console.log(\"type\", type);\n    console.log(\"resource\", resource);\n    console.log(\"params\", params);\n    switch (type) {\n      case GET_LIST:\n        const link = getLink(resource, params, body);\n        const getListData = await axios.get(link);\n        const newData = getNewData(resource, getListData, params);\n        let test;\n        if (params.pagination.perPage <= newData.length) {\n          test = newData.splice(\n            (params.pagination.page - 1) * params.pagination.perPage,\n            params.pagination.perPage\n          );\n        } else {\n          test = [...newData];\n        }\n\n        const sortedList = sort(params.sort.field, params.sort.order, test);\n        return { data: sortedList, total: getListData.data.length };\n      case CREATE:\n        const createBody = setBody(resource, params);\n        const create = await axios.post(`${URI}/${resource}`, createBody);\n        const jsonParse = JSON.parse(create.data.responseJson);\n        const createData = { id: 9, ...jsonParse };\n        return { data: createData };\n      case GET_ONE:\n        const list = await axios.get(`${URI}/${resource}?${body}`);\n\n        // const list_data = list.data.map((i, index) => {\n        //   return { ...i, id: index };\n        // });\n        let g = list.data.map((i, index) => {\n          let printer = i.printerIds.map((it) => {\n            return { item: it };\n          });\n\n          let employee = i.employeeIds.map((it) => {\n            return { item: it };\n          });\n          const printFilter = printer.filter((el) => el.item.length > 0);\n          const employeeFilter = employee.filter((el) => el.item.length > 0);\n          console.log(printFilter);\n          return {\n            ...i,\n            newList: printFilter,\n            id: index,\n            employee: employeeFilter,\n          };\n        });\n        const filter = g.filter((item) => item.id == params.id);\n        console.log(\"filter\", filter);\n        return { data: filter[0] };\n      case UPDATE:\n        console.log(\"paramfdfd\", params);\n        const udpList = await axios.get(`${URI}/${resource}?${body}`);\n\n        // const list_data = list.data.map((i, index) => {\n        //   return { ...i, id: index };\n        // });\n        let udp = udpList.data.map((i, index) => {\n          let printer = i.printerIds.map((it) => {\n            return { item: it };\n          });\n\n          let employee = i.employeeIds.map((it) => {\n            return { item: it };\n          });\n          const printFilters = printer.filter((el) => el.item.length > 0);\n          const employeeFilters = employee.filter((el) => el.item.length > 0);\n\n          return {\n            ...i,\n            newList: printFilters,\n            id: index,\n            employee: employeeFilters,\n          };\n        });\n        const filters = udp.filter((item) => item.id == params.id);\n        const newPrinters = params.data.newList.filter(\n          (e) => filters[0].newList.findIndex((i) => i.item == e.item) === -1\n        );\n        const delPrinters = filters[0].newList.filter(\n          (e) => params.data.newList.findIndex((i) => i.item == e.item) === -1\n        );\n        const newEmployee = params.data.employee.filter(\n          (e) => filters[0].employee.findIndex((i) => i.item == e.item) === -1\n        );\n        const delEmployee = filters[0].employee.filter(\n          (e) => params.data.employee.findIndex((i) => i.item == e.item) === -1\n        );\n        if (newPrinters.length > 0) {\n          for (const item of newPrinters) {\n            await axios\n              .post(`${URI}/linkPrinterAndPlace`, {\n                placeId: params.data.placeId,\n                printerId: item.item,\n              })\n              .then((data) => console.log(data));\n          }\n        }\n        if (delPrinters.length > 0) {\n          for (const item of delPrinters) {\n            await axios\n              .post(`${URI}/unlinkPrinterFromPlace`, {\n                placeId: params.data.placeId,\n                printerId: item.item,\n              })\n              .then((data) => console.log(data));\n          }\n        }\n        if (newEmployee.length > 0) {\n          for (const item of newEmployee) {\n            await axios\n              .post(`${URI}/linkEmployeeAndPlace`, {\n                placeId: params.data.placeId,\n                employeeId: item.item,\n              })\n              .then((data) => console.log(data));\n          }\n        }\n        if (delEmployee.length > 0) {\n          for (const item of delEmployee) {\n            await axios\n              .post(`${URI}/unlinkEmployeeFromPlace`, {\n                placeId: params.data.placeId,\n                employeeId: item.item,\n              })\n              .then((data) => console.log(data));\n          }\n        }\n\n        // newPrinters.map(async (item) => {\n        //   await axios\n        //     .post(`http://dev-api-v1.pixomnia.com:8087/linkPrinterAndPlace`, {\n        //       placeId: params.data.placeId,\n        //       printerId: item.item,\n        //     })\n        //     .then((data) => console.log(data));\n        // });\n\n        // delPrinters.map(async (item) => {\n        //   await axios\n        //     .post(\n        //       `http://dev-api-v1.pixomnia.com:8087/unlinkPrinterFromPlace`,\n        //       {\n        //         placeId: params.data.placeId,\n        //         printerId: item.item,\n        //       }\n        //     )\n        //     .then((data) => console.log(data));\n        // });\n        // return { data: filter[0] };\n        // let update;\n        // if (resource === \"getEmployees\") {\n        //   update = await axios.post(\n        //     `http://dev-api-v1.pixomnia.com:8087/linkEmployeeAndPlace`,\n        //     { placeId: params.data.placeId, employeeId: params.data.email }\n        //   );\n        // }\n        // if (resource === \"getPrinters\") {\n        //   update = await axios.post(\n        //     `http://dev-api-v1.pixomnia.com:8087/linkPrinterAndPlace`,\n        //     { placeId: params.data.placeId, printerId: params.data.printerId }\n        //   );\n        // }\n\n        // const jsonParseUpd = JSON.parse(update.data.responseJson);\n        // const updData = { id: 9, ...jsonParseUpd };\n        return { data: params.data };\n      case DELETE:\n        console.log(params);\n        axios.get(\n          `${URI}/deleteShift?shiftScheduleId=${params.previousData.shiftScheduleId}`\n        );\n        return { data: params.data };\n    }\n  };\n\n  return (\n    <Admin dataProvider={test} layout={MyLayout}>\n      <Resource\n        name=\"getRegions\"\n        list={RegionList}\n        create={RegionCreate}\n        icon={SouthAmericaIcon}\n        options={{ label: \"Regions\" }}\n      />\n      <Resource\n        name=\"getPrinters\"\n        list={PrinterList}\n        create={PrinterCreate}\n        edit={PrintersEdit}\n        icon={LocalPrintshopIcon}\n        options={{ label: \"Printers\" }}\n      />\n      <Resource\n        name=\"getPlacesWithInfo\"\n        list={PlacesList}\n        create={PlaceCreate}\n        icon={StorefrontIcon}\n        edit={PlacesEdit}\n        options={{ label: \"Places\" }}\n      />\n      <Resource\n        name=\"getEmployees\"\n        list={EmployeesListList}\n        create={EmployeesCreate}\n        edit={EmployeesEdit}\n        icon={PeopleAltIcon}\n        options={{ label: \"Employees\" }}\n      />\n      <Resource\n        name=\"getShiftSchedule\"\n        list={ShiftScheduleListList}\n        create={ShiftScheduleListCreate}\n        icon={WorkHistoryIcon}\n        options={{ label: \"Shift\" }}\n      />\n      <Resource\n        name=\"getInventoryLogs\"\n        list={InventoryList}\n        icon={InventoryIcon}\n        options={{ label: \"Inventory\" }}\n      />\n      <Resource\n        name=\"getPrinterInfoLogs\"\n        list={OnePrintInventoryList}\n        icon={PrintRoundedIcon}\n        options={{ label: \"Printer info logs\" }}\n      />\n      <Resource\n        name=\"getCloseShiftStatistics\"\n        list={ClosedShiftStatistic}\n        icon={AcUnitIcon}\n        options={{ label: \"Closed shift statistic\" }}\n        show={EmployeeGrid}\n      />\n      <Resource\n        name=\"getOpenShiftStatistics\"\n        list={OpenShiftStatistic}\n        icon={AddReactionIcon}\n        options={{ label: \"Open shift statistic\" }}\n      />\n    </Admin>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}