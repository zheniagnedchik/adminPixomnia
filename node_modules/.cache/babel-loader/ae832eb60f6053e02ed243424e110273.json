{"ast":null,"code":"import { Mark, mergeAttributes, markInputRule, markPasteRule } from '@tiptap/core';\nconst inputRegex = /(?:^|\\s)((?:==)((?:[^~=]+))(?:==))$/;\nconst pasteRegex = /(?:^|\\s)((?:==)((?:[^~=]+))(?:==))/g;\nconst Highlight = Mark.create({\n  name: 'highlight',\n\n  addOptions() {\n    return {\n      multicolor: false,\n      HTMLAttributes: {}\n    };\n  },\n\n  addAttributes() {\n    if (!this.options.multicolor) {\n      return {};\n    }\n\n    return {\n      color: {\n        default: null,\n        parseHTML: element => element.getAttribute('data-color') || element.style.backgroundColor,\n        renderHTML: attributes => {\n          if (!attributes.color) {\n            return {};\n          }\n\n          return {\n            'data-color': attributes.color,\n            style: `background-color: ${attributes.color}`\n          };\n        }\n      }\n    };\n  },\n\n  parseHTML() {\n    return [{\n      tag: 'mark'\n    }];\n  },\n\n  renderHTML(_ref) {\n    let {\n      HTMLAttributes\n    } = _ref;\n    return ['mark', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n\n  addCommands() {\n    return {\n      setHighlight: attributes => _ref2 => {\n        let {\n          commands\n        } = _ref2;\n        return commands.setMark(this.name, attributes);\n      },\n      toggleHighlight: attributes => _ref3 => {\n        let {\n          commands\n        } = _ref3;\n        return commands.toggleMark(this.name, attributes);\n      },\n      unsetHighlight: () => _ref4 => {\n        let {\n          commands\n        } = _ref4;\n        return commands.unsetMark(this.name);\n      }\n    };\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-h': () => this.editor.commands.toggleHighlight()\n    };\n  },\n\n  addInputRules() {\n    return [markInputRule({\n      find: inputRegex,\n      type: this.type\n    })];\n  },\n\n  addPasteRules() {\n    return [markPasteRule({\n      find: pasteRegex,\n      type: this.type\n    })];\n  }\n\n});\nexport { Highlight, Highlight as default, inputRegex, pasteRegex };","map":{"version":3,"mappings":";AA+BO,MAAMA,UAAU,GAAG,qCAAnB;AACA,MAAMC,UAAU,GAAG,qCAAnB;AAEM,eAAS,GAAGC,IAAI,CAACC,MAAL,CAA8B;EACrDC,IAAI,EAAE,WAD+C;;EAGrDC,UAAU;IACR,OAAO;MACLC,UAAU,EAAE,KADP;MAELC,cAAc,EAAE;IAFX,CAAP;EAID,CARoD;;EAUrDC,aAAa;IACX,IAAI,CAAC,KAAKC,OAAL,CAAaH,UAAlB,EAA8B;MAC5B,OAAO,EAAP;IACD;;IAED,OAAO;MACLI,KAAK,EAAE;QACLC,OAAO,EAAE,IADJ;QAELC,SAAS,EAAEC,OAAO,IAAIA,OAAO,CAACC,YAAR,CAAqB,YAArB,KAAsCD,OAAO,CAACE,KAAR,CAAcC,eAFrE;QAGLC,UAAU,EAAEC,UAAU,IAAG;UACvB,IAAI,CAACA,UAAU,CAACR,KAAhB,EAAuB;YACrB,OAAO,EAAP;UACD;;UAED,OAAO;YACL,cAAcQ,UAAU,CAACR,KADpB;YAELK,KAAK,EAAE,qBAAqBG,UAAU,CAACR,KAAO;UAFzC,CAAP;QAID;MAZI;IADF,CAAP;EAgBD,CA/BoD;;EAiCrDE,SAAS;IACP,OAAO,CACL;MACEO,GAAG,EAAE;IADP,CADK,CAAP;EAKD,CAvCoD;;EAyCrDF,UAAU,OAAmB;IAAA,IAAlB;MAAEV;IAAF,CAAkB;IAC3B,OAAO,CAAC,MAAD,EAASa,eAAe,CAAC,KAAKX,OAAL,CAAaF,cAAd,EAA8BA,cAA9B,CAAxB,EAAuE,CAAvE,CAAP;EACD,CA3CoD;;EA6CrDc,WAAW;IACT,OAAO;MACLC,YAAY,EAAEJ,UAAU,IAAI,SAAiB;QAAA,IAAhB;UAAEK;QAAF,CAAgB;QAC3C,OAAOA,QAAQ,CAACC,OAAT,CAAiB,KAAKpB,IAAtB,EAA4Bc,UAA5B,CAAP;MACD,CAHI;MAILO,eAAe,EAAEP,UAAU,IAAI,SAAiB;QAAA,IAAhB;UAAEK;QAAF,CAAgB;QAC9C,OAAOA,QAAQ,CAACG,UAAT,CAAoB,KAAKtB,IAAzB,EAA+Bc,UAA/B,CAAP;MACD,CANI;MAOLS,cAAc,EAAE,MAAM,SAAiB;QAAA,IAAhB;UAAEJ;QAAF,CAAgB;QACrC,OAAOA,QAAQ,CAACK,SAAT,CAAmB,KAAKxB,IAAxB,CAAP;MACD;IATI,CAAP;EAWD,CAzDoD;;EA2DrDyB,oBAAoB;IAClB,OAAO;MACL,eAAe,MAAM,KAAKC,MAAL,CAAYP,QAAZ,CAAqBE,eAArB;IADhB,CAAP;EAGD,CA/DoD;;EAiErDM,aAAa;IACX,OAAO,CACLC,aAAa,CAAC;MACZC,IAAI,EAAEjC,UADM;MAEZkC,IAAI,EAAE,KAAKA;IAFC,CAAD,CADR,CAAP;EAMD,CAxEoD;;EA0ErDC,aAAa;IACX,OAAO,CACLC,aAAa,CAAC;MACZH,IAAI,EAAEhC,UADM;MAEZiC,IAAI,EAAE,KAAKA;IAFC,CAAD,CADR,CAAP;EAMD;;AAjFoD,CAA9B,CAAZ","names":["inputRegex","pasteRegex","Mark","create","name","addOptions","multicolor","HTMLAttributes","addAttributes","options","color","default","parseHTML","element","getAttribute","style","backgroundColor","renderHTML","attributes","tag","mergeAttributes","addCommands","setHighlight","commands","setMark","toggleHighlight","toggleMark","unsetHighlight","unsetMark","addKeyboardShortcuts","editor","addInputRules","markInputRule","find","type","addPasteRules","markPasteRule"],"sources":["/Users/evgenijgnedcik/Documents/GitHub/adminPixomnia/node_modules/@tiptap/extension-highlight/src/highlight.ts"],"sourcesContent":["import {\n  Mark,\n  markInputRule,\n  markPasteRule,\n  mergeAttributes,\n} from '@tiptap/core'\n\nexport interface HighlightOptions {\n  multicolor: boolean,\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    highlight: {\n      /**\n       * Set a highlight mark\n       */\n      setHighlight: (attributes?: { color: string }) => ReturnType,\n      /**\n       * Toggle a highlight mark\n       */\n      toggleHighlight: (attributes?: { color: string }) => ReturnType,\n      /**\n       * Unset a highlight mark\n       */\n      unsetHighlight: () => ReturnType,\n    }\n  }\n}\n\nexport const inputRegex = /(?:^|\\s)((?:==)((?:[^~=]+))(?:==))$/\nexport const pasteRegex = /(?:^|\\s)((?:==)((?:[^~=]+))(?:==))/g\n\nexport const Highlight = Mark.create<HighlightOptions>({\n  name: 'highlight',\n\n  addOptions() {\n    return {\n      multicolor: false,\n      HTMLAttributes: {},\n    }\n  },\n\n  addAttributes() {\n    if (!this.options.multicolor) {\n      return {}\n    }\n\n    return {\n      color: {\n        default: null,\n        parseHTML: element => element.getAttribute('data-color') || element.style.backgroundColor,\n        renderHTML: attributes => {\n          if (!attributes.color) {\n            return {}\n          }\n\n          return {\n            'data-color': attributes.color,\n            style: `background-color: ${attributes.color}`,\n          }\n        },\n      },\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'mark',\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['mark', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setHighlight: attributes => ({ commands }) => {\n        return commands.setMark(this.name, attributes)\n      },\n      toggleHighlight: attributes => ({ commands }) => {\n        return commands.toggleMark(this.name, attributes)\n      },\n      unsetHighlight: () => ({ commands }) => {\n        return commands.unsetMark(this.name)\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-h': () => this.editor.commands.toggleHighlight(),\n    }\n  },\n\n  addInputRules() {\n    return [\n      markInputRule({\n        find: inputRegex,\n        type: this.type,\n      }),\n    ]\n  },\n\n  addPasteRules() {\n    return [\n      markPasteRule({\n        find: pasteRegex,\n        type: this.type,\n      }),\n    ]\n  },\n})\n"]},"metadata":{},"sourceType":"module"}