{"ast":null,"code":"import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { TranslatableContextProvider, useTranslatable, useRecordContext } from 'ra-core';\nimport { TranslatableFieldsTabs } from './TranslatableFieldsTabs';\nimport { TranslatableFieldsTabContent } from './TranslatableFieldsTabContent';\n/**\n * Provides a way to show multiple languages for any field passed as children.\n * It expects the translatable values to have the following structure:\n * {\n *     name: {\n *         en: 'The english value',\n *         fr: 'The french value',\n *         tlh: 'The klingon value',\n *     },\n *     description: {\n *         en: 'The english value',\n *         fr: 'The french value',\n *         tlh: 'The klingon value',\n *     }\n * }\n *\n * @example <caption>Basic usage</caption>\n * <TranslatableFields locales={['en', 'fr']}>\n *     <TextField source={getSource('title')} />\n *     <TextField source={getSource('description')} />\n * </TranslatableFields>\n *\n * @example <caption>With a custom language selector</caption>\n * <TranslatableFields\n *     selector={<MyLanguageSelector />}\n *     locales={['en', 'fr']}\n * >\n *     <TextField source={getSource('title')} />\n * <TranslatableFields>\n>\n *\n * const MyLanguageSelector = () => {\n *     const {\n *         locales,\n *         selectedLocale,\n *         selectLocale,\n *     } = useTranslatableContext();\n *\n *     return (\n *         <select onChange={selectLocale}>\n *             {locales.map((locale) => (\n *                 <option selected={locale.locale === selectedLocale}>\n *                     {locale.name}\n *                 </option>\n *             ))}\n *        </select>\n *     );\n * }\n *\n * @param props The component props\n * @param {string} props.defaultLocale The locale selected by default. Default to 'en'.\n * @param {string[]} props.locales An array of the possible locales in the form. For example [{ 'en', 'fr' }].\n * @param {ReactElement} props.selector The element responsible for selecting a locale. Defaults to MUI tabs.\n */\n\nexport var TranslatableFields = function (props) {\n  var defaultLocale = props.defaultLocale,\n      locales = props.locales,\n      _a = props.groupKey,\n      groupKey = _a === void 0 ? '' : _a,\n      _b = props.selector,\n      selector = _b === void 0 ? React.createElement(TranslatableFieldsTabs, {\n    groupKey: groupKey\n  }) : _b,\n      children = props.children,\n      resource = props.resource,\n      className = props.className;\n  var record = useRecordContext(props);\n  var context = useTranslatable({\n    defaultLocale: defaultLocale,\n    locales: locales\n  });\n  return React.createElement(Root, {\n    className: className\n  }, React.createElement(TranslatableContextProvider, {\n    value: context\n  }, selector, locales.map(function (locale) {\n    return React.createElement(TranslatableFieldsTabContent, {\n      key: locale,\n      locale: locale,\n      record: record,\n      resource: resource,\n      groupKey: groupKey\n    }, children);\n  })));\n};\nvar PREFIX = 'RaTranslatableFields';\nvar Root = styled('div', {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var theme = _a.theme;\n  return {\n    flexGrow: 1,\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(0.5)\n  };\n});","map":{"version":3,"names":["React","styled","TranslatableContextProvider","useTranslatable","useRecordContext","TranslatableFieldsTabs","TranslatableFieldsTabContent","TranslatableFields","props","defaultLocale","locales","_a","groupKey","_b","selector","createElement","children","resource","className","record","context","Root","value","map","locale","key","PREFIX","name","overridesResolver","styles","root","theme","flexGrow","marginTop","spacing","marginBottom"],"sources":["/Users/evgenijgnedcik/Documents/GitHub/adminPixomnia/node_modules/ra-ui-materialui/dist/esm/field/TranslatableFields.js"],"sourcesContent":["import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { TranslatableContextProvider, useTranslatable, useRecordContext, } from 'ra-core';\nimport { TranslatableFieldsTabs } from './TranslatableFieldsTabs';\nimport { TranslatableFieldsTabContent } from './TranslatableFieldsTabContent';\n/**\n * Provides a way to show multiple languages for any field passed as children.\n * It expects the translatable values to have the following structure:\n * {\n *     name: {\n *         en: 'The english value',\n *         fr: 'The french value',\n *         tlh: 'The klingon value',\n *     },\n *     description: {\n *         en: 'The english value',\n *         fr: 'The french value',\n *         tlh: 'The klingon value',\n *     }\n * }\n *\n * @example <caption>Basic usage</caption>\n * <TranslatableFields locales={['en', 'fr']}>\n *     <TextField source={getSource('title')} />\n *     <TextField source={getSource('description')} />\n * </TranslatableFields>\n *\n * @example <caption>With a custom language selector</caption>\n * <TranslatableFields\n *     selector={<MyLanguageSelector />}\n *     locales={['en', 'fr']}\n * >\n *     <TextField source={getSource('title')} />\n * <TranslatableFields>\n>\n *\n * const MyLanguageSelector = () => {\n *     const {\n *         locales,\n *         selectedLocale,\n *         selectLocale,\n *     } = useTranslatableContext();\n *\n *     return (\n *         <select onChange={selectLocale}>\n *             {locales.map((locale) => (\n *                 <option selected={locale.locale === selectedLocale}>\n *                     {locale.name}\n *                 </option>\n *             ))}\n *        </select>\n *     );\n * }\n *\n * @param props The component props\n * @param {string} props.defaultLocale The locale selected by default. Default to 'en'.\n * @param {string[]} props.locales An array of the possible locales in the form. For example [{ 'en', 'fr' }].\n * @param {ReactElement} props.selector The element responsible for selecting a locale. Defaults to MUI tabs.\n */\nexport var TranslatableFields = function (props) {\n    var defaultLocale = props.defaultLocale, locales = props.locales, _a = props.groupKey, groupKey = _a === void 0 ? '' : _a, _b = props.selector, selector = _b === void 0 ? React.createElement(TranslatableFieldsTabs, { groupKey: groupKey }) : _b, children = props.children, resource = props.resource, className = props.className;\n    var record = useRecordContext(props);\n    var context = useTranslatable({ defaultLocale: defaultLocale, locales: locales });\n    return (React.createElement(Root, { className: className },\n        React.createElement(TranslatableContextProvider, { value: context },\n            selector,\n            locales.map(function (locale) { return (React.createElement(TranslatableFieldsTabContent, { key: locale, locale: locale, record: record, resource: resource, groupKey: groupKey }, children)); }))));\n};\nvar PREFIX = 'RaTranslatableFields';\nvar Root = styled('div', {\n    name: PREFIX,\n    overridesResolver: function (props, styles) { return styles.root; },\n})(function (_a) {\n    var theme = _a.theme;\n    return ({\n        flexGrow: 1,\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(0.5),\n    });\n});\n"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,QAAuB,sBAAvB;AACA,SAASC,2BAAT,EAAsCC,eAAtC,EAAuDC,gBAAvD,QAAgF,SAAhF;AACA,SAASC,sBAAT,QAAuC,0BAAvC;AACA,SAASC,4BAAT,QAA6C,gCAA7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,kBAAkB,GAAG,UAAUC,KAAV,EAAiB;EAC7C,IAAIC,aAAa,GAAGD,KAAK,CAACC,aAA1B;EAAA,IAAyCC,OAAO,GAAGF,KAAK,CAACE,OAAzD;EAAA,IAAkEC,EAAE,GAAGH,KAAK,CAACI,QAA7E;EAAA,IAAuFA,QAAQ,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,EAAhB,GAAqBA,EAAvH;EAAA,IAA2HE,EAAE,GAAGL,KAAK,CAACM,QAAtI;EAAA,IAAgJA,QAAQ,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgBb,KAAK,CAACe,aAAN,CAAoBV,sBAApB,EAA4C;IAAEO,QAAQ,EAAEA;EAAZ,CAA5C,CAAhB,GAAsFC,EAAjP;EAAA,IAAqPG,QAAQ,GAAGR,KAAK,CAACQ,QAAtQ;EAAA,IAAgRC,QAAQ,GAAGT,KAAK,CAACS,QAAjS;EAAA,IAA2SC,SAAS,GAAGV,KAAK,CAACU,SAA7T;EACA,IAAIC,MAAM,GAAGf,gBAAgB,CAACI,KAAD,CAA7B;EACA,IAAIY,OAAO,GAAGjB,eAAe,CAAC;IAAEM,aAAa,EAAEA,aAAjB;IAAgCC,OAAO,EAAEA;EAAzC,CAAD,CAA7B;EACA,OAAQV,KAAK,CAACe,aAAN,CAAoBM,IAApB,EAA0B;IAAEH,SAAS,EAAEA;EAAb,CAA1B,EACJlB,KAAK,CAACe,aAAN,CAAoBb,2BAApB,EAAiD;IAAEoB,KAAK,EAAEF;EAAT,CAAjD,EACIN,QADJ,EAEIJ,OAAO,CAACa,GAAR,CAAY,UAAUC,MAAV,EAAkB;IAAE,OAAQxB,KAAK,CAACe,aAAN,CAAoBT,4BAApB,EAAkD;MAAEmB,GAAG,EAAED,MAAP;MAAeA,MAAM,EAAEA,MAAvB;MAA+BL,MAAM,EAAEA,MAAvC;MAA+CF,QAAQ,EAAEA,QAAzD;MAAmEL,QAAQ,EAAEA;IAA7E,CAAlD,EAA2II,QAA3I,CAAR;EAAgK,CAAhM,CAFJ,CADI,CAAR;AAIH,CARM;AASP,IAAIU,MAAM,GAAG,sBAAb;AACA,IAAIL,IAAI,GAAGpB,MAAM,CAAC,KAAD,EAAQ;EACrB0B,IAAI,EAAED,MADe;EAErBE,iBAAiB,EAAE,UAAUpB,KAAV,EAAiBqB,MAAjB,EAAyB;IAAE,OAAOA,MAAM,CAACC,IAAd;EAAqB;AAF9C,CAAR,CAAN,CAGR,UAAUnB,EAAV,EAAc;EACb,IAAIoB,KAAK,GAAGpB,EAAE,CAACoB,KAAf;EACA,OAAQ;IACJC,QAAQ,EAAE,CADN;IAEJC,SAAS,EAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CAFP;IAGJC,YAAY,EAAEJ,KAAK,CAACG,OAAN,CAAc,GAAd;EAHV,CAAR;AAKH,CAVU,CAAX"},"metadata":{},"sourceType":"module"}