{"ast":null,"code":"import { useContext } from 'react';\nimport { RecordContext } from './RecordContext';\n/**\n * Hook to read the record from a RecordContext.\n *\n * Must be used within a <RecordContext> such as provided by the <EditContextProvider>\n * (e.g. as a descendent of <Edit> or <EditBase>) or within a <ShowContextProvider>\n * (e.g. as a descendent of <Show> or <ShowBase>)\n *\n * @example // basic usage\n *\n * import { useRecordContext } from 'ra-core';\n *\n * const TitleField = () => {\n *     const record = useRecordContext();\n *     return <span>{record && record.title}</span>;\n * };\n *\n * @example // allow record override via props\n *\n * import { useRecordContext } from 'ra-core';\n *\n * const TitleField = (props) => {\n *     const record = useRecordContext(props);\n *     return <span>{record && record.title}</span>;\n * };\n * render(<TextField record={record} />);\n *\n * @returns {RaRecord} A record object\n */\n\nexport var useRecordContext = function (props) {\n  // Can't find a way to specify the RecordType when CreateContext is declared\n  // @ts-ignore\n  var context = useContext(RecordContext);\n  return props && props.record || context;\n};","map":{"version":3,"names":["useContext","RecordContext","useRecordContext","props","context","record"],"sources":["/Users/evgenijgnedcik/Documents/GitHub/adminPixomnia/node_modules/ra-core/dist/esm/controller/record/useRecordContext.js"],"sourcesContent":["import { useContext } from 'react';\nimport { RecordContext } from './RecordContext';\n/**\n * Hook to read the record from a RecordContext.\n *\n * Must be used within a <RecordContext> such as provided by the <EditContextProvider>\n * (e.g. as a descendent of <Edit> or <EditBase>) or within a <ShowContextProvider>\n * (e.g. as a descendent of <Show> or <ShowBase>)\n *\n * @example // basic usage\n *\n * import { useRecordContext } from 'ra-core';\n *\n * const TitleField = () => {\n *     const record = useRecordContext();\n *     return <span>{record && record.title}</span>;\n * };\n *\n * @example // allow record override via props\n *\n * import { useRecordContext } from 'ra-core';\n *\n * const TitleField = (props) => {\n *     const record = useRecordContext(props);\n *     return <span>{record && record.title}</span>;\n * };\n * render(<TextField record={record} />);\n *\n * @returns {RaRecord} A record object\n */\nexport var useRecordContext = function (props) {\n    // Can't find a way to specify the RecordType when CreateContext is declared\n    // @ts-ignore\n    var context = useContext(RecordContext);\n    return (props && props.record) || context;\n};\n"],"mappings":"AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,gBAAgB,GAAG,UAAUC,KAAV,EAAiB;EAC3C;EACA;EACA,IAAIC,OAAO,GAAGJ,UAAU,CAACC,aAAD,CAAxB;EACA,OAAQE,KAAK,IAAIA,KAAK,CAACE,MAAhB,IAA2BD,OAAlC;AACH,CALM"},"metadata":{},"sourceType":"module"}