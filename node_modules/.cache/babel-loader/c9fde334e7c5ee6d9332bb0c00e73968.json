{"ast":null,"code":"import { Extension } from '@tiptap/core';\nconst TextAlign = Extension.create({\n  name: 'textAlign',\n\n  addOptions() {\n    return {\n      types: [],\n      alignments: ['left', 'center', 'right', 'justify'],\n      defaultAlignment: 'left'\n    };\n  },\n\n  addGlobalAttributes() {\n    return [{\n      types: this.options.types,\n      attributes: {\n        textAlign: {\n          default: this.options.defaultAlignment,\n          parseHTML: element => element.style.textAlign || this.options.defaultAlignment,\n          renderHTML: attributes => {\n            if (attributes.textAlign === this.options.defaultAlignment) {\n              return {};\n            }\n\n            return {\n              style: `text-align: ${attributes.textAlign}`\n            };\n          }\n        }\n      }\n    }];\n  },\n\n  addCommands() {\n    return {\n      setTextAlign: alignment => _ref => {\n        let {\n          commands\n        } = _ref;\n\n        if (!this.options.alignments.includes(alignment)) {\n          return false;\n        }\n\n        return this.options.types.every(type => commands.updateAttributes(type, {\n          textAlign: alignment\n        }));\n      },\n      unsetTextAlign: () => _ref2 => {\n        let {\n          commands\n        } = _ref2;\n        return this.options.types.every(type => commands.resetAttributes(type, 'textAlign'));\n      }\n    };\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-l': () => this.editor.commands.setTextAlign('left'),\n      'Mod-Shift-e': () => this.editor.commands.setTextAlign('center'),\n      'Mod-Shift-r': () => this.editor.commands.setTextAlign('right'),\n      'Mod-Shift-j': () => this.editor.commands.setTextAlign('justify')\n    };\n  }\n\n});\nexport { TextAlign, TextAlign as default };","map":{"version":3,"mappings":";AAuBa,eAAS,GAAGA,SAAS,CAACC,MAAV,CAAmC;EAC1DC,IAAI,EAAE,WADoD;;EAG1DC,UAAU;IACR,OAAO;MACLC,KAAK,EAAE,EADF;MAELC,UAAU,EAAE,CAAC,MAAD,EAAS,QAAT,EAAmB,OAAnB,EAA4B,SAA5B,CAFP;MAGLC,gBAAgB,EAAE;IAHb,CAAP;EAKD,CATyD;;EAW1DC,mBAAmB;IACjB,OAAO,CACL;MACEH,KAAK,EAAE,KAAKI,OAAL,CAAaJ,KADtB;MAEEK,UAAU,EAAE;QACVC,SAAS,EAAE;UACTC,OAAO,EAAE,KAAKH,OAAL,CAAaF,gBADb;UAETM,SAAS,EAAEC,OAAO,IAAIA,OAAO,CAACC,KAAR,CAAcJ,SAAd,IAA2B,KAAKF,OAAL,CAAaF,gBAFrD;UAGTS,UAAU,EAAEN,UAAU,IAAG;YACvB,IAAIA,UAAU,CAACC,SAAX,KAAyB,KAAKF,OAAL,CAAaF,gBAA1C,EAA4D;cAC1D,OAAO,EAAP;YACD;;YAED,OAAO;cAAEQ,KAAK,EAAE,eAAeL,UAAU,CAACC,SAAW;YAA9C,CAAP;UACD;QATQ;MADD;IAFd,CADK,CAAP;EAkBD,CA9ByD;;EAgC1DM,WAAW;IACT,OAAO;MACLC,YAAY,EAAGC,SAAD,IAAuB,QAAiB;QAAA,IAAhB;UAAEC;QAAF,CAAgB;;QACpD,IAAI,CAAC,KAAKX,OAAL,CAAaH,UAAb,CAAwBe,QAAxB,CAAiCF,SAAjC,CAAL,EAAkD;UAChD,OAAO,KAAP;QACD;;QAED,OAAO,KAAKV,OAAL,CAAaJ,KAAb,CAAmBiB,KAAnB,CAAyBC,IAAI,IAAIH,QAAQ,CAACI,gBAAT,CAA0BD,IAA1B,EAAgC;UAAEZ,SAAS,EAAEQ;QAAb,CAAhC,CAAjC,CAAP;MACD,CAPI;MASLM,cAAc,EAAE,MAAM,SAAiB;QAAA,IAAhB;UAAEL;QAAF,CAAgB;QACrC,OAAO,KAAKX,OAAL,CAAaJ,KAAb,CAAmBiB,KAAnB,CAAyBC,IAAI,IAAIH,QAAQ,CAACM,eAAT,CAAyBH,IAAzB,EAA+B,WAA/B,CAAjC,CAAP;MACD;IAXI,CAAP;EAaD,CA9CyD;;EAgD1DI,oBAAoB;IAClB,OAAO;MACL,eAAe,MAAM,KAAKC,MAAL,CAAYR,QAAZ,CAAqBF,YAArB,CAAkC,MAAlC,CADhB;MAEL,eAAe,MAAM,KAAKU,MAAL,CAAYR,QAAZ,CAAqBF,YAArB,CAAkC,QAAlC,CAFhB;MAGL,eAAe,MAAM,KAAKU,MAAL,CAAYR,QAAZ,CAAqBF,YAArB,CAAkC,OAAlC,CAHhB;MAIL,eAAe,MAAM,KAAKU,MAAL,CAAYR,QAAZ,CAAqBF,YAArB,CAAkC,SAAlC;IAJhB,CAAP;EAMD;;AAvDyD,CAAnC,CAAZ","names":["Extension","create","name","addOptions","types","alignments","defaultAlignment","addGlobalAttributes","options","attributes","textAlign","default","parseHTML","element","style","renderHTML","addCommands","setTextAlign","alignment","commands","includes","every","type","updateAttributes","unsetTextAlign","resetAttributes","addKeyboardShortcuts","editor"],"sources":["/Users/evgenijgnedcik/Documents/GitHub/adminPixomnia/node_modules/@tiptap/extension-text-align/src/text-align.ts"],"sourcesContent":["import { Extension } from '@tiptap/core'\n\nexport interface TextAlignOptions {\n  types: string[],\n  alignments: string[],\n  defaultAlignment: string,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    textAlign: {\n      /**\n       * Set the text align attribute\n       */\n      setTextAlign: (alignment: string) => ReturnType,\n      /**\n       * Unset the text align attribute\n       */\n      unsetTextAlign: () => ReturnType,\n    }\n  }\n}\n\nexport const TextAlign = Extension.create<TextAlignOptions>({\n  name: 'textAlign',\n\n  addOptions() {\n    return {\n      types: [],\n      alignments: ['left', 'center', 'right', 'justify'],\n      defaultAlignment: 'left',\n    }\n  },\n\n  addGlobalAttributes() {\n    return [\n      {\n        types: this.options.types,\n        attributes: {\n          textAlign: {\n            default: this.options.defaultAlignment,\n            parseHTML: element => element.style.textAlign || this.options.defaultAlignment,\n            renderHTML: attributes => {\n              if (attributes.textAlign === this.options.defaultAlignment) {\n                return {}\n              }\n\n              return { style: `text-align: ${attributes.textAlign}` }\n            },\n          },\n        },\n      },\n    ]\n  },\n\n  addCommands() {\n    return {\n      setTextAlign: (alignment: string) => ({ commands }) => {\n        if (!this.options.alignments.includes(alignment)) {\n          return false\n        }\n\n        return this.options.types.every(type => commands.updateAttributes(type, { textAlign: alignment }))\n      },\n\n      unsetTextAlign: () => ({ commands }) => {\n        return this.options.types.every(type => commands.resetAttributes(type, 'textAlign'))\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-l': () => this.editor.commands.setTextAlign('left'),\n      'Mod-Shift-e': () => this.editor.commands.setTextAlign('center'),\n      'Mod-Shift-r': () => this.editor.commands.setTextAlign('right'),\n      'Mod-Shift-j': () => this.editor.commands.setTextAlign('justify'),\n    }\n  },\n})\n"]},"metadata":{},"sourceType":"module"}